
FreeRTOS4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006508  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  00006508  0000659c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000069e  008000f2  008000f2  0000662e  2**0
                  ALLOC
  3 .stab         00008898  00000000  00000000  00006630  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004000  00000000  00000000  0000eec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00012ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00013008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00013178  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00014dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00015cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00016a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00016bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00016e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00017617  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 5e 2e 	jmp	0x5cbc	; 0x5cbc <__vector_13>
      38:	0c 94 ca 2e 	jmp	0x5d94	; 0x5d94 <__vector_14>
      3c:	0c 94 94 2e 	jmp	0x5d28	; 0x5d28 <__vector_15>
      40:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f5 e6       	ldi	r31, 0x65	; 101
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3f       	cpi	r26, 0xF2	; 242
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	a2 ef       	ldi	r26, 0xF2	; 242
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <main>
      8a:	0c 94 82 32 	jmp	0x6504	; 0x6504 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 42 32 	jmp	0x6484	; 0x6484 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ee       	ldi	r26, 0xE5	; 229
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5e 32 	jmp	0x64bc	; 0x64bc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4e 32 	jmp	0x649c	; 0x649c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6a 32 	jmp	0x64d4	; 0x64d4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4e 32 	jmp	0x649c	; 0x649c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6a 32 	jmp	0x64d4	; 0x64d4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 42 32 	jmp	0x6484	; 0x6484 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ee       	ldi	r24, 0xE5	; 229
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5e 32 	jmp	0x64bc	; 0x64bc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4e 32 	jmp	0x649c	; 0x649c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6a 32 	jmp	0x64d4	; 0x64d4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4e 32 	jmp	0x649c	; 0x649c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6a 32 	jmp	0x64d4	; 0x64d4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4e 32 	jmp	0x649c	; 0x649c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6a 32 	jmp	0x64d4	; 0x64d4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 52 32 	jmp	0x64a4	; 0x64a4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6e 32 	jmp	0x64dc	; 0x64dc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <vStartPolledQueueTasks>:
static volatile BaseType_t xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCount = pollqINITIAL_VALUE;

/*-----------------------------------------------------------*/

void vStartPolledQueueTasks( UBaseType_t uxPriority )
{
     b46:	af 92       	push	r10
     b48:	bf 92       	push	r11
     b4a:	cf 92       	push	r12
     b4c:	df 92       	push	r13
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	df 93       	push	r29
     b56:	cf 93       	push	r28
     b58:	0f 92       	push	r0
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	89 83       	std	Y+1, r24	; 0x01
static QueueHandle_t xPolledQueue;

	/* Create the queue used by the producer and consumer. */
	xPolledQueue = xQueueCreate( pollqQUEUE_SIZE, ( UBaseType_t ) sizeof( uint16_t ) );
     b60:	8a e0       	ldi	r24, 0x0A	; 10
     b62:	62 e0       	ldi	r22, 0x02	; 2
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	0e 94 83 12 	call	0x2506	; 0x2506 <xQueueGenericCreate>
     b6a:	90 93 f5 00 	sts	0x00F5, r25
     b6e:	80 93 f4 00 	sts	0x00F4, r24
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
	defined to be less than 1. */
	vQueueAddToRegistry( xPolledQueue, "Poll_Test_Queue" );

	/* Spawn the producer and consumer. */
	xTaskCreate( vPolledQueueConsumer, "QConsNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
     b72:	87 e2       	ldi	r24, 0x27	; 39
     b74:	96 e0       	ldi	r25, 0x06	; 6
     b76:	20 e6       	ldi	r18, 0x60	; 96
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	e4 ef       	ldi	r30, 0xF4	; 244
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	b9 01       	movw	r22, r18
     b80:	45 e5       	ldi	r20, 0x55	; 85
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	9f 01       	movw	r18, r30
     b86:	09 81       	ldd	r16, Y+1	; 0x01
     b88:	ee 24       	eor	r14, r14
     b8a:	ff 24       	eor	r15, r15
     b8c:	cc 24       	eor	r12, r12
     b8e:	dd 24       	eor	r13, r13
     b90:	aa 24       	eor	r10, r10
     b92:	bb 24       	eor	r11, r11
     b94:	0e 94 a9 19 	call	0x3352	; 0x3352 <xTaskGenericCreate>
	xTaskCreate( vPolledQueueProducer, "QProdNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
     b98:	8a ee       	ldi	r24, 0xEA	; 234
     b9a:	95 e0       	ldi	r25, 0x05	; 5
     b9c:	28 e6       	ldi	r18, 0x68	; 104
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	e4 ef       	ldi	r30, 0xF4	; 244
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	b9 01       	movw	r22, r18
     ba6:	45 e5       	ldi	r20, 0x55	; 85
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	9f 01       	movw	r18, r30
     bac:	09 81       	ldd	r16, Y+1	; 0x01
     bae:	ee 24       	eor	r14, r14
     bb0:	ff 24       	eor	r15, r15
     bb2:	cc 24       	eor	r12, r12
     bb4:	dd 24       	eor	r13, r13
     bb6:	aa 24       	eor	r10, r10
     bb8:	bb 24       	eor	r11, r11
     bba:	0e 94 a9 19 	call	0x3352	; 0x3352 <xTaskGenericCreate>
}
     bbe:	0f 90       	pop	r0
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	0f 91       	pop	r16
     bc6:	ff 90       	pop	r15
     bc8:	ef 90       	pop	r14
     bca:	df 90       	pop	r13
     bcc:	cf 90       	pop	r12
     bce:	bf 90       	pop	r11
     bd0:	af 90       	pop	r10
     bd2:	08 95       	ret

00000bd4 <vPolledQueueProducer>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueProducer, pvParameters )
{
     bd4:	df 93       	push	r29
     bd6:	cf 93       	push	r28
     bd8:	00 d0       	rcall	.+0      	; 0xbda <vPolledQueueProducer+0x6>
     bda:	00 d0       	rcall	.+0      	; 0xbdc <vPolledQueueProducer+0x8>
     bdc:	00 d0       	rcall	.+0      	; 0xbde <vPolledQueueProducer+0xa>
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	9e 83       	std	Y+6, r25	; 0x06
     be4:	8d 83       	std	Y+5, r24	; 0x05
uint16_t usValue = ( uint16_t ) 0;
     be6:	1c 82       	std	Y+4, r1	; 0x04
     be8:	1b 82       	std	Y+3, r1	; 0x03
BaseType_t xError = pdFALSE, xLoop;
     bea:	1a 82       	std	Y+2, r1	; 0x02

	for( ;; )
	{		
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
     bec:	19 82       	std	Y+1, r1	; 0x01
     bee:	27 c0       	rjmp	.+78     	; 0xc3e <vPolledQueueProducer+0x6a>
		{
			/* Send an incrementing number on the queue without blocking. */
			if( xQueueSend( *( ( QueueHandle_t * ) pvParameters ), ( void * ) &usValue, pollqNO_DELAY ) != pdPASS )
     bf0:	ed 81       	ldd	r30, Y+5	; 0x05
     bf2:	fe 81       	ldd	r31, Y+6	; 0x06
     bf4:	80 81       	ld	r24, Z
     bf6:	91 81       	ldd	r25, Z+1	; 0x01
     bf8:	9e 01       	movw	r18, r28
     bfa:	2d 5f       	subi	r18, 0xFD	; 253
     bfc:	3f 4f       	sbci	r19, 0xFF	; 255
     bfe:	b9 01       	movw	r22, r18
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	50 e0       	ldi	r21, 0x00	; 0
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	0e 94 4e 13 	call	0x269c	; 0x269c <xQueueGenericSend>
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	19 f0       	breq	.+6      	; 0xc14 <vPolledQueueProducer+0x40>
			{
				/* We should never find the queue full so if we get here there
				has been an error. */
				xError = pdTRUE;
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	8a 83       	std	Y+2, r24	; 0x02
     c12:	12 c0       	rjmp	.+36     	; 0xc38 <vPolledQueueProducer+0x64>
			}
			else
			{
				if( xError == pdFALSE )
     c14:	8a 81       	ldd	r24, Y+2	; 0x02
     c16:	88 23       	and	r24, r24
     c18:	51 f4       	brne	.+20     	; 0xc2e <vPolledQueueProducer+0x5a>
				{
					/* If an error has ever been recorded we stop incrementing the
					check variable. */
					portENTER_CRITICAL();
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	0f 92       	push	r0
						xPollingProducerCount++;
     c20:	80 91 f3 00 	lds	r24, 0x00F3
     c24:	8f 5f       	subi	r24, 0xFF	; 255
     c26:	80 93 f3 00 	sts	0x00F3, r24
					portEXIT_CRITICAL();
     c2a:	0f 90       	pop	r0
     c2c:	0f be       	out	0x3f, r0	; 63
				}

				/* Update the value we are going to post next time around. */
				usValue++;
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	9c 81       	ldd	r25, Y+4	; 0x04
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	9c 83       	std	Y+4, r25	; 0x04
     c36:	8b 83       	std	Y+3, r24	; 0x03
uint16_t usValue = ( uint16_t ) 0;
BaseType_t xError = pdFALSE, xLoop;

	for( ;; )
	{		
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	8f 5f       	subi	r24, 0xFF	; 255
     c3c:	89 83       	std	Y+1, r24	; 0x01
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	83 30       	cpi	r24, 0x03	; 3
     c42:	b4 f2       	brlt	.-84     	; 0xbf0 <vPolledQueueProducer+0x1c>
			}
		}

		/* Wait before we start posting again to ensure the consumer runs and
		empties the queue. */
		vTaskDelay( pollqPRODUCER_DELAY );
     c44:	88 ec       	ldi	r24, 0xC8	; 200
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <vTaskDelay>
     c4c:	cf cf       	rjmp	.-98     	; 0xbec <vPolledQueueProducer+0x18>

00000c4e <vPolledQueueConsumer>:
	}
}  /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueConsumer, pvParameters )
{
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	27 97       	sbiw	r28, 0x07	; 7
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61
     c62:	9f 83       	std	Y+7, r25	; 0x07
     c64:	8e 83       	std	Y+6, r24	; 0x06
uint16_t usData, usExpectedValue = ( uint16_t ) 0;
     c66:	1b 82       	std	Y+3, r1	; 0x03
     c68:	1a 82       	std	Y+2, r1	; 0x02
BaseType_t xError = pdFALSE;
     c6a:	19 82       	std	Y+1, r1	; 0x01
     c6c:	2f c0       	rjmp	.+94     	; 0xccc <vPolledQueueConsumer+0x7e>
	for( ;; )
	{		
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
		{
			if( xQueueReceive( *( ( QueueHandle_t * ) pvParameters ), &usData, pollqNO_DELAY ) == pdPASS )
     c6e:	ee 81       	ldd	r30, Y+6	; 0x06
     c70:	ff 81       	ldd	r31, Y+7	; 0x07
     c72:	80 81       	ld	r24, Z
     c74:	91 81       	ldd	r25, Z+1	; 0x01
     c76:	9e 01       	movw	r18, r28
     c78:	2c 5f       	subi	r18, 0xFC	; 252
     c7a:	3f 4f       	sbci	r19, 0xFF	; 255
     c7c:	b9 01       	movw	r22, r18
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <xQueueGenericReceive>
     c88:	81 30       	cpi	r24, 0x01	; 1
     c8a:	01 f5       	brne	.+64     	; 0xccc <vPolledQueueConsumer+0x7e>
			{
				if( usData != usExpectedValue )
     c8c:	2c 81       	ldd	r18, Y+4	; 0x04
     c8e:	3d 81       	ldd	r19, Y+5	; 0x05
     c90:	8a 81       	ldd	r24, Y+2	; 0x02
     c92:	9b 81       	ldd	r25, Y+3	; 0x03
     c94:	28 17       	cp	r18, r24
     c96:	39 07       	cpc	r19, r25
     c98:	39 f0       	breq	.+14     	; 0xca8 <vPolledQueueConsumer+0x5a>
				{
					/* This is not what we expected to receive so an error has
					occurred. */
					xError = pdTRUE;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	89 83       	std	Y+1, r24	; 0x01

					/* Catch-up to the value we received so our next expected
					value should again be correct. */
					usExpectedValue = usData;
     c9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ca0:	9d 81       	ldd	r25, Y+5	; 0x05
     ca2:	9b 83       	std	Y+3, r25	; 0x03
     ca4:	8a 83       	std	Y+2, r24	; 0x02
     ca6:	0d c0       	rjmp	.+26     	; 0xcc2 <vPolledQueueConsumer+0x74>
				}
				else
				{
					if( xError == pdFALSE )
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	88 23       	and	r24, r24
     cac:	51 f4       	brne	.+20     	; 0xcc2 <vPolledQueueConsumer+0x74>
					{
						/* Only increment the check variable if no errors have
						occurred. */
						portENTER_CRITICAL();
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	0f 92       	push	r0
							xPollingConsumerCount++;
     cb4:	80 91 f2 00 	lds	r24, 0x00F2
     cb8:	8f 5f       	subi	r24, 0xFF	; 255
     cba:	80 93 f2 00 	sts	0x00F2, r24
						portEXIT_CRITICAL();
     cbe:	0f 90       	pop	r0
     cc0:	0f be       	out	0x3f, r0	; 63
					}
				}

				/* Next time round we would expect the number to be one higher. */
				usExpectedValue++;
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	9b 81       	ldd	r25, Y+3	; 0x03
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	9b 83       	std	Y+3, r25	; 0x03
     cca:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xError = pdFALSE;

	for( ;; )
	{		
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
     ccc:	ee 81       	ldd	r30, Y+6	; 0x06
     cce:	ff 81       	ldd	r31, Y+7	; 0x07
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <uxQueueMessagesWaiting>
     cd8:	88 23       	and	r24, r24
     cda:	49 f6       	brne	.-110    	; 0xc6e <vPolledQueueConsumer+0x20>
			}
		}

		/* Now the queue is empty we block, allowing the producer to place more
		items in the queue. */
		vTaskDelay( pollqCONSUMER_DELAY );
     cdc:	84 eb       	ldi	r24, 0xB4	; 180
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <vTaskDelay>
     ce4:	f3 cf       	rjmp	.-26     	; 0xccc <vPolledQueueConsumer+0x7e>

00000ce6 <xArePollingQueuesStillRunning>:
} /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running with no errors. */
BaseType_t xArePollingQueuesStillRunning( void )
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	0f 92       	push	r0
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62

	/* Check both the consumer and producer poll count to check they have both
	been changed since out last trip round.  We do not need a critical section
	around the check variables as this is called from a higher priority than
	the other tasks that access the same variables. */
	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
     cf0:	80 91 f2 00 	lds	r24, 0x00F2
     cf4:	88 23       	and	r24, r24
     cf6:	21 f0       	breq	.+8      	; 0xd00 <xArePollingQueuesStillRunning+0x1a>
     cf8:	80 91 f3 00 	lds	r24, 0x00F3
     cfc:	88 23       	and	r24, r24
     cfe:	11 f4       	brne	.+4      	; 0xd04 <xArePollingQueuesStillRunning+0x1e>
		( xPollingProducerCount == pollqINITIAL_VALUE )
	  )
	{
		xReturn = pdFALSE;
     d00:	19 82       	std	Y+1, r1	; 0x01
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <xArePollingQueuesStillRunning+0x22>
	}
	else
	{
		xReturn = pdTRUE;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Set the check variables back down so we know if they have been
	incremented the next time around. */
	xPollingConsumerCount = pollqINITIAL_VALUE;
     d08:	10 92 f2 00 	sts	0x00F2, r1
	xPollingProducerCount = pollqINITIAL_VALUE;
     d0c:	10 92 f3 00 	sts	0x00F3, r1

	return xReturn;
     d10:	89 81       	ldd	r24, Y+1	; 0x01
}
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	27 97       	sbiw	r28, 0x07	; 7
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	9d 83       	std	Y+5, r25	; 0x05
     d30:	8c 83       	std	Y+4, r24	; 0x04
     d32:	6e 83       	std	Y+6, r22	; 0x06
     d34:	4f 83       	std	Y+7, r20	; 0x07
BaseType_t xReturn;
CRCB_t *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
     d36:	8a e1       	ldi	r24, 0x1A	; 26
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 a5 0c 	call	0x194a	; 0x194a <pvPortMalloc>
     d3e:	9a 83       	std	Y+2, r25	; 0x02
     d40:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	9a 81       	ldd	r25, Y+2	; 0x02
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	09 f4       	brne	.+2      	; 0xd4c <xCoRoutineCreate+0x32>
     d4a:	6f c0       	rjmp	.+222    	; 0xe2a <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     d4c:	80 91 f6 00 	lds	r24, 0x00F6
     d50:	90 91 f7 00 	lds	r25, 0x00F7
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	41 f4       	brne	.+16     	; 0xd68 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	9a 81       	ldd	r25, Y+2	; 0x02
     d5c:	90 93 f7 00 	sts	0x00F7, r25
     d60:	80 93 f6 00 	sts	0x00F6, r24
			prvInitialiseCoRoutineLists();
     d64:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     d68:	8e 81       	ldd	r24, Y+6	; 0x06
     d6a:	82 30       	cpi	r24, 0x02	; 2
     d6c:	10 f0       	brcs	.+4      	; 0xd72 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     d72:	e9 81       	ldd	r30, Y+1	; 0x01
     d74:	fa 81       	ldd	r31, Y+2	; 0x02
     d76:	11 8e       	std	Z+25, r1	; 0x19
     d78:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
     d7a:	e9 81       	ldd	r30, Y+1	; 0x01
     d7c:	fa 81       	ldd	r31, Y+2	; 0x02
     d7e:	8e 81       	ldd	r24, Y+6	; 0x06
     d80:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
     d82:	e9 81       	ldd	r30, Y+1	; 0x01
     d84:	fa 81       	ldd	r31, Y+2	; 0x02
     d86:	8f 81       	ldd	r24, Y+7	; 0x07
     d88:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     d8a:	e9 81       	ldd	r30, Y+1	; 0x01
     d8c:	fa 81       	ldd	r31, Y+2	; 0x02
     d8e:	8c 81       	ldd	r24, Y+4	; 0x04
     d90:	9d 81       	ldd	r25, Y+5	; 0x05
     d92:	91 83       	std	Z+1, r25	; 0x01
     d94:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	02 96       	adiw	r24, 0x02	; 2
     d9c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	0c 96       	adiw	r24, 0x0c	; 12
     da6:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the ListItem_t.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     daa:	e9 81       	ldd	r30, Y+1	; 0x01
     dac:	fa 81       	ldd	r31, Y+2	; 0x02
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	9a 81       	ldd	r25, Y+2	; 0x02
     db2:	91 87       	std	Z+9, r25	; 0x09
     db4:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     db6:	e9 81       	ldd	r30, Y+1	; 0x01
     db8:	fa 81       	ldd	r31, Y+2	; 0x02
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	9a 81       	ldd	r25, Y+2	; 0x02
     dbe:	93 8b       	std	Z+19, r25	; 0x13
     dc0:	82 8b       	std	Z+18, r24	; 0x12

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
     dc2:	8e 81       	ldd	r24, Y+6	; 0x06
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	82 1b       	sub	r24, r18
     dce:	93 0b       	sbc	r25, r19
     dd0:	e9 81       	ldd	r30, Y+1	; 0x01
     dd2:	fa 81       	ldd	r31, Y+2	; 0x02
     dd4:	95 87       	std	Z+13, r25	; 0x0d
     dd6:	84 87       	std	Z+12, r24	; 0x0c

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     dd8:	e9 81       	ldd	r30, Y+1	; 0x01
     dda:	fa 81       	ldd	r31, Y+2	; 0x02
     ddc:	96 89       	ldd	r25, Z+22	; 0x16
     dde:	80 91 f8 00 	lds	r24, 0x00F8
     de2:	89 17       	cp	r24, r25
     de4:	28 f4       	brcc	.+10     	; 0xdf0 <xCoRoutineCreate+0xd6>
     de6:	e9 81       	ldd	r30, Y+1	; 0x01
     de8:	fa 81       	ldd	r31, Y+2	; 0x02
     dea:	86 89       	ldd	r24, Z+22	; 0x16
     dec:	80 93 f8 00 	sts	0x00F8, r24
     df0:	e9 81       	ldd	r30, Y+1	; 0x01
     df2:	fa 81       	ldd	r31, Y+2	; 0x02
     df4:	86 89       	ldd	r24, Z+22	; 0x16
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	c9 01       	movw	r24, r18
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	82 0f       	add	r24, r18
     e0a:	93 1f       	adc	r25, r19
     e0c:	ac 01       	movw	r20, r24
     e0e:	41 50       	subi	r20, 0x01	; 1
     e10:	5f 4f       	sbci	r21, 0xFF	; 255
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	9a 81       	ldd	r25, Y+2	; 0x02
     e16:	9c 01       	movw	r18, r24
     e18:	2e 5f       	subi	r18, 0xFE	; 254
     e1a:	3f 4f       	sbci	r19, 0xFF	; 255
     e1c:	ca 01       	movw	r24, r20
     e1e:	b9 01       	movw	r22, r18
     e20:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <vListInsertEnd>

		xReturn = pdPASS;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	8b 83       	std	Y+3, r24	; 0x03
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <xCoRoutineCreate+0x114>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     e2a:	8f ef       	ldi	r24, 0xFF	; 255
     e2c:	8b 83       	std	Y+3, r24	; 0x03
	}

	return xReturn;
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
}
     e30:	27 96       	adiw	r28, 0x07	; 7
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	00 d0       	rcall	.+0      	; 0xe48 <vCoRoutineAddToDelayedList+0x6>
     e48:	00 d0       	rcall	.+0      	; 0xe4a <vCoRoutineAddToDelayedList+0x8>
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <vCoRoutineAddToDelayedList+0xa>
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	9c 83       	std	Y+4, r25	; 0x04
     e52:	8b 83       	std	Y+3, r24	; 0x03
     e54:	7e 83       	std	Y+6, r23	; 0x06
     e56:	6d 83       	std	Y+5, r22	; 0x05
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     e58:	20 91 f9 00 	lds	r18, 0x00F9
     e5c:	30 91 fa 00 	lds	r19, 0x00FA
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	9c 81       	ldd	r25, Y+4	; 0x04
     e64:	82 0f       	add	r24, r18
     e66:	93 1f       	adc	r25, r19
     e68:	9a 83       	std	Y+2, r25	; 0x02
     e6a:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     e6c:	80 91 f6 00 	lds	r24, 0x00F6
     e70:	90 91 f7 00 	lds	r25, 0x00F7
     e74:	02 96       	adiw	r24, 0x02	; 2
     e76:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     e7a:	e0 91 f6 00 	lds	r30, 0x00F6
     e7e:	f0 91 f7 00 	lds	r31, 0x00F7
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	9a 81       	ldd	r25, Y+2	; 0x02
     e86:	93 83       	std	Z+3, r25	; 0x03
     e88:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
     e8a:	20 91 f9 00 	lds	r18, 0x00F9
     e8e:	30 91 fa 00 	lds	r19, 0x00FA
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	70 f4       	brcc	.+28     	; 0xeb8 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     e9c:	80 91 25 01 	lds	r24, 0x0125
     ea0:	90 91 26 01 	lds	r25, 0x0126
     ea4:	20 91 f6 00 	lds	r18, 0x00F6
     ea8:	30 91 f7 00 	lds	r19, 0x00F7
     eac:	2e 5f       	subi	r18, 0xFE	; 254
     eae:	3f 4f       	sbci	r19, 0xFF	; 255
     eb0:	b9 01       	movw	r22, r18
     eb2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <vListInsert>
     eb6:	0d c0       	rjmp	.+26     	; 0xed2 <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     eb8:	80 91 23 01 	lds	r24, 0x0123
     ebc:	90 91 24 01 	lds	r25, 0x0124
     ec0:	20 91 f6 00 	lds	r18, 0x00F6
     ec4:	30 91 f7 00 	lds	r19, 0x00F7
     ec8:	2e 5f       	subi	r18, 0xFE	; 254
     eca:	3f 4f       	sbci	r19, 0xFF	; 255
     ecc:	b9 01       	movw	r22, r18
     ece:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <vListInsert>
	}

	if( pxEventList )
     ed2:	8d 81       	ldd	r24, Y+5	; 0x05
     ed4:	9e 81       	ldd	r25, Y+6	; 0x06
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	61 f0       	breq	.+24     	; 0xef2 <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     eda:	80 91 f6 00 	lds	r24, 0x00F6
     ede:	90 91 f7 00 	lds	r25, 0x00F7
     ee2:	9c 01       	movw	r18, r24
     ee4:	24 5f       	subi	r18, 0xF4	; 244
     ee6:	3f 4f       	sbci	r19, 0xFF	; 255
     ee8:	8d 81       	ldd	r24, Y+5	; 0x05
     eea:	9e 81       	ldd	r25, Y+6	; 0x06
     eec:	b9 01       	movw	r22, r18
     eee:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <vListInsert>
	}
}
     ef2:	26 96       	adiw	r28, 0x06	; 6
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	00 d0       	rcall	.+0      	; 0xf0a <prvCheckPendingReadyList+0x6>
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	3a c0       	rjmp	.+116    	; 0xf84 <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		CRCB_t *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     f10:	f8 94       	cli
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
     f12:	e0 91 2c 01 	lds	r30, 0x012C
     f16:	f0 91 2d 01 	lds	r31, 0x012D
     f1a:	86 81       	ldd	r24, Z+6	; 0x06
     f1c:	97 81       	ldd	r25, Z+7	; 0x07
     f1e:	9a 83       	std	Y+2, r25	; 0x02
     f20:	89 83       	std	Y+1, r24	; 0x01
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	9a 81       	ldd	r25, Y+2	; 0x02
     f26:	0c 96       	adiw	r24, 0x0c	; 12
     f28:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
		}
		portENABLE_INTERRUPTS();
     f2c:	78 94       	sei

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	02 96       	adiw	r24, 0x02	; 2
     f34:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
     f38:	e9 81       	ldd	r30, Y+1	; 0x01
     f3a:	fa 81       	ldd	r31, Y+2	; 0x02
     f3c:	96 89       	ldd	r25, Z+22	; 0x16
     f3e:	80 91 f8 00 	lds	r24, 0x00F8
     f42:	89 17       	cp	r24, r25
     f44:	28 f4       	brcc	.+10     	; 0xf50 <prvCheckPendingReadyList+0x4c>
     f46:	e9 81       	ldd	r30, Y+1	; 0x01
     f48:	fa 81       	ldd	r31, Y+2	; 0x02
     f4a:	86 89       	ldd	r24, Z+22	; 0x16
     f4c:	80 93 f8 00 	sts	0x00F8, r24
     f50:	e9 81       	ldd	r30, Y+1	; 0x01
     f52:	fa 81       	ldd	r31, Y+2	; 0x02
     f54:	86 89       	ldd	r24, Z+22	; 0x16
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	c9 01       	movw	r24, r18
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	82 0f       	add	r24, r18
     f6a:	93 1f       	adc	r25, r19
     f6c:	ac 01       	movw	r20, r24
     f6e:	41 50       	subi	r20, 0x01	; 1
     f70:	5f 4f       	sbci	r21, 0xFF	; 255
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	9a 81       	ldd	r25, Y+2	; 0x02
     f76:	9c 01       	movw	r18, r24
     f78:	2e 5f       	subi	r18, 0xFE	; 254
     f7a:	3f 4f       	sbci	r19, 0xFF	; 255
     f7c:	ca 01       	movw	r24, r20
     f7e:	b9 01       	movw	r22, r18
     f80:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     f84:	80 91 27 01 	lds	r24, 0x0127
     f88:	88 23       	and	r24, r24
     f8a:	09 f0       	breq	.+2      	; 0xf8e <prvCheckPendingReadyList+0x8a>
     f8c:	c1 cf       	rjmp	.-126    	; 0xf10 <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
	}
}
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <prvCheckDelayedList+0x6>
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <prvCheckDelayedList+0x8>
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     fa4:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <xTaskGetTickCount>
     fa8:	20 91 fb 00 	lds	r18, 0x00FB
     fac:	30 91 fc 00 	lds	r19, 0x00FC
     fb0:	82 1b       	sub	r24, r18
     fb2:	93 0b       	sbc	r25, r19
     fb4:	90 93 fe 00 	sts	0x00FE, r25
     fb8:	80 93 fd 00 	sts	0x00FD, r24
     fbc:	85 c0       	rjmp	.+266    	; 0x10c8 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
     fbe:	80 91 f9 00 	lds	r24, 0x00F9
     fc2:	90 91 fa 00 	lds	r25, 0x00FA
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	90 93 fa 00 	sts	0x00FA, r25
     fcc:	80 93 f9 00 	sts	0x00F9, r24
		xPassedTicks--;
     fd0:	80 91 fd 00 	lds	r24, 0x00FD
     fd4:	90 91 fe 00 	lds	r25, 0x00FE
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	90 93 fe 00 	sts	0x00FE, r25
     fde:	80 93 fd 00 	sts	0x00FD, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     fe2:	80 91 f9 00 	lds	r24, 0x00F9
     fe6:	90 91 fa 00 	lds	r25, 0x00FA
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	09 f0       	breq	.+2      	; 0xff0 <prvCheckDelayedList+0x58>
     fee:	64 c0       	rjmp	.+200    	; 0x10b8 <prvCheckDelayedList+0x120>
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     ff0:	80 91 23 01 	lds	r24, 0x0123
     ff4:	90 91 24 01 	lds	r25, 0x0124
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     ffc:	80 91 25 01 	lds	r24, 0x0125
    1000:	90 91 26 01 	lds	r25, 0x0126
    1004:	90 93 24 01 	sts	0x0124, r25
    1008:	80 93 23 01 	sts	0x0123, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	9a 81       	ldd	r25, Y+2	; 0x02
    1010:	90 93 26 01 	sts	0x0126, r25
    1014:	80 93 25 01 	sts	0x0125, r24
    1018:	4f c0       	rjmp	.+158    	; 0x10b8 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    101a:	e0 91 23 01 	lds	r30, 0x0123
    101e:	f0 91 24 01 	lds	r31, 0x0124
    1022:	05 80       	ldd	r0, Z+5	; 0x05
    1024:	f6 81       	ldd	r31, Z+6	; 0x06
    1026:	e0 2d       	mov	r30, r0
    1028:	86 81       	ldd	r24, Z+6	; 0x06
    102a:	97 81       	ldd	r25, Z+7	; 0x07
    102c:	9c 83       	std	Y+4, r25	; 0x04
    102e:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
    1030:	eb 81       	ldd	r30, Y+3	; 0x03
    1032:	fc 81       	ldd	r31, Y+4	; 0x04
    1034:	22 81       	ldd	r18, Z+2	; 0x02
    1036:	33 81       	ldd	r19, Z+3	; 0x03
    1038:	80 91 f9 00 	lds	r24, 0x00F9
    103c:	90 91 fa 00 	lds	r25, 0x00FA
    1040:	82 17       	cp	r24, r18
    1042:	93 07       	cpc	r25, r19
    1044:	08 f4       	brcc	.+2      	; 0x1048 <prvCheckDelayedList+0xb0>
    1046:	40 c0       	rjmp	.+128    	; 0x10c8 <prvCheckDelayedList+0x130>
			{
				/* Timeout not yet expired. */
				break;
			}

			portDISABLE_INTERRUPTS();
    1048:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	9c 81       	ldd	r25, Y+4	; 0x04
    104e:	02 96       	adiw	r24, 0x02	; 2
    1050:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pvContainer )
    1054:	eb 81       	ldd	r30, Y+3	; 0x03
    1056:	fc 81       	ldd	r31, Y+4	; 0x04
    1058:	84 89       	ldd	r24, Z+20	; 0x14
    105a:	95 89       	ldd	r25, Z+21	; 0x15
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	29 f0       	breq	.+10     	; 0x106a <prvCheckDelayedList+0xd2>
				{
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	0c 96       	adiw	r24, 0x0c	; 12
    1066:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    106a:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );
    106c:	eb 81       	ldd	r30, Y+3	; 0x03
    106e:	fc 81       	ldd	r31, Y+4	; 0x04
    1070:	96 89       	ldd	r25, Z+22	; 0x16
    1072:	80 91 f8 00 	lds	r24, 0x00F8
    1076:	89 17       	cp	r24, r25
    1078:	28 f4       	brcc	.+10     	; 0x1084 <prvCheckDelayedList+0xec>
    107a:	eb 81       	ldd	r30, Y+3	; 0x03
    107c:	fc 81       	ldd	r31, Y+4	; 0x04
    107e:	86 89       	ldd	r24, Z+22	; 0x16
    1080:	80 93 f8 00 	sts	0x00F8, r24
    1084:	eb 81       	ldd	r30, Y+3	; 0x03
    1086:	fc 81       	ldd	r31, Y+4	; 0x04
    1088:	86 89       	ldd	r24, Z+22	; 0x16
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	c9 01       	movw	r24, r18
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	82 0f       	add	r24, r18
    109e:	93 1f       	adc	r25, r19
    10a0:	ac 01       	movw	r20, r24
    10a2:	41 50       	subi	r20, 0x01	; 1
    10a4:	5f 4f       	sbci	r21, 0xFF	; 255
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	9c 81       	ldd	r25, Y+4	; 0x04
    10aa:	9c 01       	movw	r18, r24
    10ac:	2e 5f       	subi	r18, 0xFE	; 254
    10ae:	3f 4f       	sbci	r19, 0xFF	; 255
    10b0:	ca 01       	movw	r24, r20
    10b2:	b9 01       	movw	r22, r18
    10b4:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    10b8:	e0 91 23 01 	lds	r30, 0x0123
    10bc:	f0 91 24 01 	lds	r31, 0x0124
    10c0:	80 81       	ld	r24, Z
    10c2:	88 23       	and	r24, r24
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <prvCheckDelayedList+0x130>
    10c6:	a9 cf       	rjmp	.-174    	; 0x101a <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    10c8:	80 91 fd 00 	lds	r24, 0x00FD
    10cc:	90 91 fe 00 	lds	r25, 0x00FE
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <prvCheckDelayedList+0x13e>
    10d4:	74 cf       	rjmp	.-280    	; 0xfbe <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );
		}
	}

	xLastTickCount = xCoRoutineTickCount;
    10d6:	80 91 f9 00 	lds	r24, 0x00F9
    10da:	90 91 fa 00 	lds	r25, 0x00FA
    10de:	90 93 fc 00 	sts	0x00FC, r25
    10e2:	80 93 fb 00 	sts	0x00FB, r24
}
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <vCoRoutineSchedule+0x6>
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    10fe:	0e 94 82 07 	call	0xf04	; 0xf04 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    1102:	0e 94 cc 07 	call	0xf98	; 0xf98 <prvCheckDelayedList>
    1106:	0a c0       	rjmp	.+20     	; 0x111c <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    1108:	80 91 f8 00 	lds	r24, 0x00F8
    110c:	88 23       	and	r24, r24
    110e:	09 f4       	brne	.+2      	; 0x1112 <vCoRoutineSchedule+0x1e>
    1110:	66 c0       	rjmp	.+204    	; 0x11de <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    1112:	80 91 f8 00 	lds	r24, 0x00F8
    1116:	81 50       	subi	r24, 0x01	; 1
    1118:	80 93 f8 00 	sts	0x00F8, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    111c:	80 91 f8 00 	lds	r24, 0x00F8
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	c9 01       	movw	r24, r18
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	82 0f       	add	r24, r18
    1134:	93 1f       	adc	r25, r19
    1136:	fc 01       	movw	r30, r24
    1138:	e1 50       	subi	r30, 0x01	; 1
    113a:	ff 4f       	sbci	r31, 0xFF	; 255
    113c:	80 81       	ld	r24, Z
    113e:	88 23       	and	r24, r24
    1140:	19 f3       	breq	.-58     	; 0x1108 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    1142:	80 91 f8 00 	lds	r24, 0x00F8
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	c9 01       	movw	r24, r18
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	82 0f       	add	r24, r18
    115a:	93 1f       	adc	r25, r19
    115c:	81 50       	subi	r24, 0x01	; 1
    115e:	9f 4f       	sbci	r25, 0xFF	; 255
    1160:	9a 83       	std	Y+2, r25	; 0x02
    1162:	89 83       	std	Y+1, r24	; 0x01
    1164:	e9 81       	ldd	r30, Y+1	; 0x01
    1166:	fa 81       	ldd	r31, Y+2	; 0x02
    1168:	01 80       	ldd	r0, Z+1	; 0x01
    116a:	f2 81       	ldd	r31, Z+2	; 0x02
    116c:	e0 2d       	mov	r30, r0
    116e:	82 81       	ldd	r24, Z+2	; 0x02
    1170:	93 81       	ldd	r25, Z+3	; 0x03
    1172:	e9 81       	ldd	r30, Y+1	; 0x01
    1174:	fa 81       	ldd	r31, Y+2	; 0x02
    1176:	92 83       	std	Z+2, r25	; 0x02
    1178:	81 83       	std	Z+1, r24	; 0x01
    117a:	e9 81       	ldd	r30, Y+1	; 0x01
    117c:	fa 81       	ldd	r31, Y+2	; 0x02
    117e:	21 81       	ldd	r18, Z+1	; 0x01
    1180:	32 81       	ldd	r19, Z+2	; 0x02
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	03 96       	adiw	r24, 0x03	; 3
    1188:	28 17       	cp	r18, r24
    118a:	39 07       	cpc	r19, r25
    118c:	59 f4       	brne	.+22     	; 0x11a4 <vCoRoutineSchedule+0xb0>
    118e:	e9 81       	ldd	r30, Y+1	; 0x01
    1190:	fa 81       	ldd	r31, Y+2	; 0x02
    1192:	01 80       	ldd	r0, Z+1	; 0x01
    1194:	f2 81       	ldd	r31, Z+2	; 0x02
    1196:	e0 2d       	mov	r30, r0
    1198:	82 81       	ldd	r24, Z+2	; 0x02
    119a:	93 81       	ldd	r25, Z+3	; 0x03
    119c:	e9 81       	ldd	r30, Y+1	; 0x01
    119e:	fa 81       	ldd	r31, Y+2	; 0x02
    11a0:	92 83       	std	Z+2, r25	; 0x02
    11a2:	81 83       	std	Z+1, r24	; 0x01
    11a4:	e9 81       	ldd	r30, Y+1	; 0x01
    11a6:	fa 81       	ldd	r31, Y+2	; 0x02
    11a8:	01 80       	ldd	r0, Z+1	; 0x01
    11aa:	f2 81       	ldd	r31, Z+2	; 0x02
    11ac:	e0 2d       	mov	r30, r0
    11ae:	86 81       	ldd	r24, Z+6	; 0x06
    11b0:	97 81       	ldd	r25, Z+7	; 0x07
    11b2:	90 93 f7 00 	sts	0x00F7, r25
    11b6:	80 93 f6 00 	sts	0x00F6, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    11ba:	e0 91 f6 00 	lds	r30, 0x00F6
    11be:	f0 91 f7 00 	lds	r31, 0x00F7
    11c2:	40 81       	ld	r20, Z
    11c4:	51 81       	ldd	r21, Z+1	; 0x01
    11c6:	80 91 f6 00 	lds	r24, 0x00F6
    11ca:	90 91 f7 00 	lds	r25, 0x00F7
    11ce:	e0 91 f6 00 	lds	r30, 0x00F6
    11d2:	f0 91 f7 00 	lds	r31, 0x00F7
    11d6:	27 89       	ldd	r18, Z+23	; 0x17
    11d8:	62 2f       	mov	r22, r18
    11da:	fa 01       	movw	r30, r20
    11dc:	09 95       	icall

	return;
}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	0f 92       	push	r0
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    11f2:	19 82       	std	Y+1, r1	; 0x01
    11f4:	13 c0       	rjmp	.+38     	; 0x121c <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	c9 01       	movw	r24, r18
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	82 0f       	add	r24, r18
    120c:	93 1f       	adc	r25, r19
    120e:	81 50       	subi	r24, 0x01	; 1
    1210:	9f 4f       	sbci	r25, 0xFF	; 255
    1212:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	8f 5f       	subi	r24, 0xFF	; 255
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	82 30       	cpi	r24, 0x02	; 2
    1220:	50 f3       	brcs	.-44     	; 0x11f6 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
    1222:	81 e1       	ldi	r24, 0x11	; 17
    1224:	91 e0       	ldi	r25, 0x01	; 1
    1226:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vListInitialise>
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
    122a:	8a e1       	ldi	r24, 0x1A	; 26
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vListInitialise>
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
    1232:	87 e2       	ldi	r24, 0x27	; 39
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    123a:	81 e1       	ldi	r24, 0x11	; 17
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	90 93 24 01 	sts	0x0124, r25
    1242:	80 93 23 01 	sts	0x0123, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    1246:	8a e1       	ldi	r24, 0x1A	; 26
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	90 93 26 01 	sts	0x0126, r25
    124e:	80 93 25 01 	sts	0x0125, r24
}
    1252:	0f 90       	pop	r0
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
{
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	00 d0       	rcall	.+0      	; 0x1260 <xCoRoutineRemoveFromEventList+0x6>
    1260:	00 d0       	rcall	.+0      	; 0x1262 <xCoRoutineRemoveFromEventList+0x8>
    1262:	0f 92       	push	r0
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	9d 83       	std	Y+5, r25	; 0x05
    126a:	8c 83       	std	Y+4, r24	; 0x04
BaseType_t xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    126c:	ec 81       	ldd	r30, Y+4	; 0x04
    126e:	fd 81       	ldd	r31, Y+5	; 0x05
    1270:	05 80       	ldd	r0, Z+5	; 0x05
    1272:	f6 81       	ldd	r31, Z+6	; 0x06
    1274:	e0 2d       	mov	r30, r0
    1276:	86 81       	ldd	r24, Z+6	; 0x06
    1278:	97 81       	ldd	r25, Z+7	; 0x07
    127a:	9b 83       	std	Y+3, r25	; 0x03
    127c:	8a 83       	std	Y+2, r24	; 0x02
	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	9b 81       	ldd	r25, Y+3	; 0x03
    1282:	0c 96       	adiw	r24, 0x0c	; 12
    1284:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	9b 81       	ldd	r25, Y+3	; 0x03
    128c:	9c 01       	movw	r18, r24
    128e:	24 5f       	subi	r18, 0xF4	; 244
    1290:	3f 4f       	sbci	r19, 0xFF	; 255
    1292:	87 e2       	ldi	r24, 0x27	; 39
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	b9 01       	movw	r22, r18
    1298:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    129c:	ea 81       	ldd	r30, Y+2	; 0x02
    129e:	fb 81       	ldd	r31, Y+3	; 0x03
    12a0:	96 89       	ldd	r25, Z+22	; 0x16
    12a2:	e0 91 f6 00 	lds	r30, 0x00F6
    12a6:	f0 91 f7 00 	lds	r31, 0x00F7
    12aa:	86 89       	ldd	r24, Z+22	; 0x16
    12ac:	98 17       	cp	r25, r24
    12ae:	18 f0       	brcs	.+6      	; 0x12b6 <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    12b6:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <xEventGroupCreate>:
static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits );

/*-----------------------------------------------------------*/

EventGroupHandle_t xEventGroupCreate( void )
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <xEventGroupCreate+0x6>
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
EventGroup_t *pxEventBits;

	pxEventBits = pvPortMalloc( sizeof( EventGroup_t ) );
    12d4:	8b e0       	ldi	r24, 0x0B	; 11
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 a5 0c 	call	0x194a	; 0x194a <pvPortMalloc>
    12dc:	9a 83       	std	Y+2, r25	; 0x02
    12de:	89 83       	std	Y+1, r24	; 0x01
	if( pxEventBits != NULL )
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	9a 81       	ldd	r25, Y+2	; 0x02
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	49 f0       	breq	.+18     	; 0x12fa <xEventGroupCreate+0x30>
	{
		pxEventBits->uxEventBits = 0;
    12e8:	e9 81       	ldd	r30, Y+1	; 0x01
    12ea:	fa 81       	ldd	r31, Y+2	; 0x02
    12ec:	11 82       	std	Z+1, r1	; 0x01
    12ee:	10 82       	st	Z, r1
		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	9a 81       	ldd	r25, Y+2	; 0x02
    12f4:	02 96       	adiw	r24, 0x02	; 2
    12f6:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vListInitialise>
	else
	{
		traceEVENT_GROUP_CREATE_FAILED();
	}

	return ( EventGroupHandle_t ) pxEventBits;
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <xEventGroupSync>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	60 97       	sbiw	r28, 0x10	; 16
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	9a 87       	std	Y+10, r25	; 0x0a
    131e:	89 87       	std	Y+9, r24	; 0x09
    1320:	7c 87       	std	Y+12, r23	; 0x0c
    1322:	6b 87       	std	Y+11, r22	; 0x0b
    1324:	5e 87       	std	Y+14, r21	; 0x0e
    1326:	4d 87       	std	Y+13, r20	; 0x0d
    1328:	38 8b       	std	Y+16, r19	; 0x10
    132a:	2f 87       	std	Y+15, r18	; 0x0f
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    132c:	89 85       	ldd	r24, Y+9	; 0x09
    132e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    1334:	19 82       	std	Y+1, r1	; 0x01
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    1336:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
    133a:	eb 81       	ldd	r30, Y+3	; 0x03
    133c:	fc 81       	ldd	r31, Y+4	; 0x04
    133e:	80 81       	ld	r24, Z
    1340:	91 81       	ldd	r25, Z+1	; 0x01
    1342:	98 87       	std	Y+8, r25	; 0x08
    1344:	8f 83       	std	Y+7, r24	; 0x07

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    1346:	89 85       	ldd	r24, Y+9	; 0x09
    1348:	9a 85       	ldd	r25, Y+10	; 0x0a
    134a:	2b 85       	ldd	r18, Y+11	; 0x0b
    134c:	3c 85       	ldd	r19, Y+12	; 0x0c
    134e:	b9 01       	movw	r22, r18
    1350:	0e 94 56 0b 	call	0x16ac	; 0x16ac <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1354:	2f 81       	ldd	r18, Y+7	; 0x07
    1356:	38 85       	ldd	r19, Y+8	; 0x08
    1358:	8b 85       	ldd	r24, Y+11	; 0x0b
    135a:	9c 85       	ldd	r25, Y+12	; 0x0c
    135c:	28 2b       	or	r18, r24
    135e:	39 2b       	or	r19, r25
    1360:	8d 85       	ldd	r24, Y+13	; 0x0d
    1362:	9e 85       	ldd	r25, Y+14	; 0x0e
    1364:	28 23       	and	r18, r24
    1366:	39 23       	and	r19, r25
    1368:	8d 85       	ldd	r24, Y+13	; 0x0d
    136a:	9e 85       	ldd	r25, Y+14	; 0x0e
    136c:	28 17       	cp	r18, r24
    136e:	39 07       	cpc	r19, r25
    1370:	c9 f4       	brne	.+50     	; 0x13a4 <xEventGroupSync+0x9c>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
    1372:	2f 81       	ldd	r18, Y+7	; 0x07
    1374:	38 85       	ldd	r19, Y+8	; 0x08
    1376:	8b 85       	ldd	r24, Y+11	; 0x0b
    1378:	9c 85       	ldd	r25, Y+12	; 0x0c
    137a:	82 2b       	or	r24, r18
    137c:	93 2b       	or	r25, r19
    137e:	9e 83       	std	Y+6, r25	; 0x06
    1380:	8d 83       	std	Y+5, r24	; 0x05

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1382:	eb 81       	ldd	r30, Y+3	; 0x03
    1384:	fc 81       	ldd	r31, Y+4	; 0x04
    1386:	20 81       	ld	r18, Z
    1388:	31 81       	ldd	r19, Z+1	; 0x01
    138a:	8d 85       	ldd	r24, Y+13	; 0x0d
    138c:	9e 85       	ldd	r25, Y+14	; 0x0e
    138e:	80 95       	com	r24
    1390:	90 95       	com	r25
    1392:	82 23       	and	r24, r18
    1394:	93 23       	and	r25, r19
    1396:	eb 81       	ldd	r30, Y+3	; 0x03
    1398:	fc 81       	ldd	r31, Y+4	; 0x04
    139a:	91 83       	std	Z+1, r25	; 0x01
    139c:	80 83       	st	Z, r24

			xTicksToWait = 0;
    139e:	18 8a       	std	Y+16, r1	; 0x10
    13a0:	1f 86       	std	Y+15, r1	; 0x0f
    13a2:	1c c0       	rjmp	.+56     	; 0x13dc <xEventGroupSync+0xd4>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
    13a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a6:	98 89       	ldd	r25, Y+16	; 0x10
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	91 f0       	breq	.+36     	; 0x13d0 <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	9c 81       	ldd	r25, Y+4	; 0x04
    13b0:	bc 01       	movw	r22, r24
    13b2:	6e 5f       	subi	r22, 0xFE	; 254
    13b4:	7f 4f       	sbci	r23, 0xFF	; 255
    13b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ba:	9c 01       	movw	r18, r24
    13bc:	35 60       	ori	r19, 0x05	; 5
    13be:	4f 85       	ldd	r20, Y+15	; 0x0f
    13c0:	58 89       	ldd	r21, Y+16	; 0x10
    13c2:	cb 01       	movw	r24, r22
    13c4:	b9 01       	movw	r22, r18
    13c6:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
    13ca:	1e 82       	std	Y+6, r1	; 0x06
    13cc:	1d 82       	std	Y+5, r1	; 0x05
    13ce:	06 c0       	rjmp	.+12     	; 0x13dc <xEventGroupSync+0xd4>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    13d0:	eb 81       	ldd	r30, Y+3	; 0x03
    13d2:	fc 81       	ldd	r31, Y+4	; 0x04
    13d4:	80 81       	ld	r24, Z
    13d6:	91 81       	ldd	r25, Z+1	; 0x01
    13d8:	9e 83       	std	Y+6, r25	; 0x06
    13da:	8d 83       	std	Y+5, r24	; 0x05
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    13dc:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <xTaskResumeAll>
    13e0:	8a 83       	std	Y+2, r24	; 0x02

	if( xTicksToWait != ( TickType_t ) 0 )
    13e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e4:	98 89       	ldd	r25, Y+16	; 0x10
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	09 f4       	brne	.+2      	; 0x13ec <xEventGroupSync+0xe4>
    13ea:	3a c0       	rjmp	.+116    	; 0x1460 <xEventGroupSync+0x158>
	{
		if( xAlreadyYielded == pdFALSE )
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	88 23       	and	r24, r24
    13f0:	11 f4       	brne	.+4      	; 0x13f6 <xEventGroupSync+0xee>
		{
			portYIELD_WITHIN_API();
    13f2:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    13f6:	0e 94 a3 23 	call	0x4746	; 0x4746 <uxTaskResetEventItemValue>
    13fa:	9e 83       	std	Y+6, r25	; 0x06
    13fc:	8d 83       	std	Y+5, r24	; 0x05

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    13fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1400:	9e 81       	ldd	r25, Y+6	; 0x06
    1402:	80 70       	andi	r24, 0x00	; 0
    1404:	92 70       	andi	r25, 0x02	; 2
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	31 f5       	brne	.+76     	; 0x1456 <xEventGroupSync+0x14e>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
    1410:	eb 81       	ldd	r30, Y+3	; 0x03
    1412:	fc 81       	ldd	r31, Y+4	; 0x04
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	9e 83       	std	Y+6, r25	; 0x06
    141a:	8d 83       	std	Y+5, r24	; 0x05

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    141c:	2d 81       	ldd	r18, Y+5	; 0x05
    141e:	3e 81       	ldd	r19, Y+6	; 0x06
    1420:	8d 85       	ldd	r24, Y+13	; 0x0d
    1422:	9e 85       	ldd	r25, Y+14	; 0x0e
    1424:	28 23       	and	r18, r24
    1426:	39 23       	and	r19, r25
    1428:	8d 85       	ldd	r24, Y+13	; 0x0d
    142a:	9e 85       	ldd	r25, Y+14	; 0x0e
    142c:	28 17       	cp	r18, r24
    142e:	39 07       	cpc	r19, r25
    1430:	71 f4       	brne	.+28     	; 0x144e <xEventGroupSync+0x146>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1432:	eb 81       	ldd	r30, Y+3	; 0x03
    1434:	fc 81       	ldd	r31, Y+4	; 0x04
    1436:	20 81       	ld	r18, Z
    1438:	31 81       	ldd	r19, Z+1	; 0x01
    143a:	8d 85       	ldd	r24, Y+13	; 0x0d
    143c:	9e 85       	ldd	r25, Y+14	; 0x0e
    143e:	80 95       	com	r24
    1440:	90 95       	com	r25
    1442:	82 23       	and	r24, r18
    1444:	93 23       	and	r25, r19
    1446:	eb 81       	ldd	r30, Y+3	; 0x03
    1448:	fc 81       	ldd	r31, Y+4	; 0x04
    144a:	91 83       	std	Z+1, r25	; 0x01
    144c:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    144e:	0f 90       	pop	r0
    1450:	0f be       	out	0x3f, r0	; 63

			xTimeoutOccurred = pdTRUE;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	89 83       	std	Y+1, r24	; 0x01
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    1456:	8d 81       	ldd	r24, Y+5	; 0x05
    1458:	9e 81       	ldd	r25, Y+6	; 0x06
    145a:	90 70       	andi	r25, 0x00	; 0
    145c:	9e 83       	std	Y+6, r25	; 0x06
    145e:	8d 83       	std	Y+5, r24	; 0x05
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
    1460:	8d 81       	ldd	r24, Y+5	; 0x05
    1462:	9e 81       	ldd	r25, Y+6	; 0x06
}
    1464:	60 96       	adiw	r28, 0x10	; 16
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	63 97       	sbiw	r28, 0x13	; 19
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	9d 87       	std	Y+13, r25	; 0x0d
    1490:	8c 87       	std	Y+12, r24	; 0x0c
    1492:	7f 87       	std	Y+15, r23	; 0x0f
    1494:	6e 87       	std	Y+14, r22	; 0x0e
    1496:	48 8b       	std	Y+16, r20	; 0x10
    1498:	29 8b       	std	Y+17, r18	; 0x11
    149a:	1b 8b       	std	Y+19, r17	; 0x13
    149c:	0a 8b       	std	Y+18, r16	; 0x12
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    149e:	8c 85       	ldd	r24, Y+12	; 0x0c
    14a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    14a2:	9b 87       	std	Y+11, r25	; 0x0b
    14a4:	8a 87       	std	Y+10, r24	; 0x0a
EventBits_t uxReturn, uxControlBits = 0;
    14a6:	1f 82       	std	Y+7, r1	; 0x07
    14a8:	1e 82       	std	Y+6, r1	; 0x06
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    14aa:	1b 82       	std	Y+3, r1	; 0x03
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    14ac:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    14b0:	ea 85       	ldd	r30, Y+10	; 0x0a
    14b2:	fb 85       	ldd	r31, Y+11	; 0x0b
    14b4:	80 81       	ld	r24, Z
    14b6:	91 81       	ldd	r25, Z+1	; 0x01
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	89 83       	std	Y+1, r24	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	2e 85       	ldd	r18, Y+14	; 0x0e
    14c2:	3f 85       	ldd	r19, Y+15	; 0x0f
    14c4:	b9 01       	movw	r22, r18
    14c6:	49 89       	ldd	r20, Y+17	; 0x11
    14c8:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <prvTestWaitCondition>
    14cc:	8d 83       	std	Y+5, r24	; 0x05

		if( xWaitConditionMet != pdFALSE )
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	88 23       	and	r24, r24
    14d2:	c1 f0       	breq	.+48     	; 0x1504 <xEventGroupWaitBits+0x8e>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
    14d8:	99 87       	std	Y+9, r25	; 0x09
    14da:	88 87       	std	Y+8, r24	; 0x08
			xTicksToWait = ( TickType_t ) 0;
    14dc:	1b 8a       	std	Y+19, r1	; 0x13
    14de:	1a 8a       	std	Y+18, r1	; 0x12

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
    14e0:	88 89       	ldd	r24, Y+16	; 0x10
    14e2:	88 23       	and	r24, r24
    14e4:	d9 f1       	breq	.+118    	; 0x155c <xEventGroupWaitBits+0xe6>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    14e6:	ea 85       	ldd	r30, Y+10	; 0x0a
    14e8:	fb 85       	ldd	r31, Y+11	; 0x0b
    14ea:	20 81       	ld	r18, Z
    14ec:	31 81       	ldd	r19, Z+1	; 0x01
    14ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    14f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    14f2:	80 95       	com	r24
    14f4:	90 95       	com	r25
    14f6:	82 23       	and	r24, r18
    14f8:	93 23       	and	r25, r19
    14fa:	ea 85       	ldd	r30, Y+10	; 0x0a
    14fc:	fb 85       	ldd	r31, Y+11	; 0x0b
    14fe:	91 83       	std	Z+1, r25	; 0x01
    1500:	80 83       	st	Z, r24
    1502:	2c c0       	rjmp	.+88     	; 0x155c <xEventGroupWaitBits+0xe6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
    1504:	8a 89       	ldd	r24, Y+18	; 0x12
    1506:	9b 89       	ldd	r25, Y+19	; 0x13
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	29 f4       	brne	.+10     	; 0x1516 <xEventGroupWaitBits+0xa0>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	9a 81       	ldd	r25, Y+2	; 0x02
    1510:	99 87       	std	Y+9, r25	; 0x09
    1512:	88 87       	std	Y+8, r24	; 0x08
    1514:	23 c0       	rjmp	.+70     	; 0x155c <xEventGroupWaitBits+0xe6>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
    1516:	88 89       	ldd	r24, Y+16	; 0x10
    1518:	88 23       	and	r24, r24
    151a:	29 f0       	breq	.+10     	; 0x1526 <xEventGroupWaitBits+0xb0>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    151c:	8e 81       	ldd	r24, Y+6	; 0x06
    151e:	9f 81       	ldd	r25, Y+7	; 0x07
    1520:	91 60       	ori	r25, 0x01	; 1
    1522:	9f 83       	std	Y+7, r25	; 0x07
    1524:	8e 83       	std	Y+6, r24	; 0x06
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
    1526:	89 89       	ldd	r24, Y+17	; 0x11
    1528:	88 23       	and	r24, r24
    152a:	29 f0       	breq	.+10     	; 0x1536 <xEventGroupWaitBits+0xc0>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
    152c:	8e 81       	ldd	r24, Y+6	; 0x06
    152e:	9f 81       	ldd	r25, Y+7	; 0x07
    1530:	94 60       	ori	r25, 0x04	; 4
    1532:	9f 83       	std	Y+7, r25	; 0x07
    1534:	8e 83       	std	Y+6, r24	; 0x06
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    1536:	8a 85       	ldd	r24, Y+10	; 0x0a
    1538:	9b 85       	ldd	r25, Y+11	; 0x0b
    153a:	bc 01       	movw	r22, r24
    153c:	6e 5f       	subi	r22, 0xFE	; 254
    153e:	7f 4f       	sbci	r23, 0xFF	; 255
    1540:	2e 85       	ldd	r18, Y+14	; 0x0e
    1542:	3f 85       	ldd	r19, Y+15	; 0x0f
    1544:	8e 81       	ldd	r24, Y+6	; 0x06
    1546:	9f 81       	ldd	r25, Y+7	; 0x07
    1548:	28 2b       	or	r18, r24
    154a:	39 2b       	or	r19, r25
    154c:	4a 89       	ldd	r20, Y+18	; 0x12
    154e:	5b 89       	ldd	r21, Y+19	; 0x13
    1550:	cb 01       	movw	r24, r22
    1552:	b9 01       	movw	r22, r18
    1554:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
    1558:	19 86       	std	Y+9, r1	; 0x09
    155a:	18 86       	std	Y+8, r1	; 0x08

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    155c:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <xTaskResumeAll>
    1560:	8c 83       	std	Y+4, r24	; 0x04

	if( xTicksToWait != ( TickType_t ) 0 )
    1562:	8a 89       	ldd	r24, Y+18	; 0x12
    1564:	9b 89       	ldd	r25, Y+19	; 0x13
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	09 f4       	brne	.+2      	; 0x156c <xEventGroupWaitBits+0xf6>
    156a:	3b c0       	rjmp	.+118    	; 0x15e2 <xEventGroupWaitBits+0x16c>
	{
		if( xAlreadyYielded == pdFALSE )
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	88 23       	and	r24, r24
    1570:	11 f4       	brne	.+4      	; 0x1576 <xEventGroupWaitBits+0x100>
		{
			portYIELD_WITHIN_API();
    1572:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    1576:	0e 94 a3 23 	call	0x4746	; 0x4746 <uxTaskResetEventItemValue>
    157a:	99 87       	std	Y+9, r25	; 0x09
    157c:	88 87       	std	Y+8, r24	; 0x08

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    157e:	88 85       	ldd	r24, Y+8	; 0x08
    1580:	99 85       	ldd	r25, Y+9	; 0x09
    1582:	80 70       	andi	r24, 0x00	; 0
    1584:	92 70       	andi	r25, 0x02	; 2
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	39 f5       	brne	.+78     	; 0x15d8 <xEventGroupWaitBits+0x162>
		{
			taskENTER_CRITICAL();
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    1590:	ea 85       	ldd	r30, Y+10	; 0x0a
    1592:	fb 85       	ldd	r31, Y+11	; 0x0b
    1594:	80 81       	ld	r24, Z
    1596:	91 81       	ldd	r25, Z+1	; 0x01
    1598:	99 87       	std	Y+9, r25	; 0x09
    159a:	88 87       	std	Y+8, r24	; 0x08

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
    159c:	88 85       	ldd	r24, Y+8	; 0x08
    159e:	99 85       	ldd	r25, Y+9	; 0x09
    15a0:	2e 85       	ldd	r18, Y+14	; 0x0e
    15a2:	3f 85       	ldd	r19, Y+15	; 0x0f
    15a4:	b9 01       	movw	r22, r18
    15a6:	49 89       	ldd	r20, Y+17	; 0x11
    15a8:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <prvTestWaitCondition>
    15ac:	88 23       	and	r24, r24
    15ae:	89 f0       	breq	.+34     	; 0x15d2 <xEventGroupWaitBits+0x15c>
				{
					if( xClearOnExit != pdFALSE )
    15b0:	88 89       	ldd	r24, Y+16	; 0x10
    15b2:	88 23       	and	r24, r24
    15b4:	71 f0       	breq	.+28     	; 0x15d2 <xEventGroupWaitBits+0x15c>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    15b6:	ea 85       	ldd	r30, Y+10	; 0x0a
    15b8:	fb 85       	ldd	r31, Y+11	; 0x0b
    15ba:	20 81       	ld	r18, Z
    15bc:	31 81       	ldd	r19, Z+1	; 0x01
    15be:	8e 85       	ldd	r24, Y+14	; 0x0e
    15c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    15c2:	80 95       	com	r24
    15c4:	90 95       	com	r25
    15c6:	82 23       	and	r24, r18
    15c8:	93 23       	and	r25, r19
    15ca:	ea 85       	ldd	r30, Y+10	; 0x0a
    15cc:	fb 85       	ldd	r31, Y+11	; 0x0b
    15ce:	91 83       	std	Z+1, r25	; 0x01
    15d0:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    15d2:	0f 90       	pop	r0
    15d4:	0f be       	out	0x3f, r0	; 63

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
    15d6:	1b 82       	std	Y+3, r1	; 0x03
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    15d8:	88 85       	ldd	r24, Y+8	; 0x08
    15da:	99 85       	ldd	r25, Y+9	; 0x09
    15dc:	90 70       	andi	r25, 0x00	; 0
    15de:	99 87       	std	Y+9, r25	; 0x09
    15e0:	88 87       	std	Y+8, r24	; 0x08
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
    15e2:	88 85       	ldd	r24, Y+8	; 0x08
    15e4:	99 85       	ldd	r25, Y+9	; 0x09
}
    15e6:	63 96       	adiw	r28, 0x13	; 19
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	08 95       	ret

000015fc <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	28 97       	sbiw	r28, 0x08	; 8
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	9e 83       	std	Y+6, r25	; 0x06
    1612:	8d 83       	std	Y+5, r24	; 0x05
    1614:	78 87       	std	Y+8, r23	; 0x08
    1616:	6f 83       	std	Y+7, r22	; 0x07
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    1618:	8d 81       	ldd	r24, Y+5	; 0x05
    161a:	9e 81       	ldd	r25, Y+6	; 0x06
    161c:	9c 83       	std	Y+4, r25	; 0x04
    161e:	8b 83       	std	Y+3, r24	; 0x03

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
    1626:	eb 81       	ldd	r30, Y+3	; 0x03
    1628:	fc 81       	ldd	r31, Y+4	; 0x04
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	89 83       	std	Y+1, r24	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    1632:	eb 81       	ldd	r30, Y+3	; 0x03
    1634:	fc 81       	ldd	r31, Y+4	; 0x04
    1636:	20 81       	ld	r18, Z
    1638:	31 81       	ldd	r19, Z+1	; 0x01
    163a:	8f 81       	ldd	r24, Y+7	; 0x07
    163c:	98 85       	ldd	r25, Y+8	; 0x08
    163e:	80 95       	com	r24
    1640:	90 95       	com	r25
    1642:	82 23       	and	r24, r18
    1644:	93 23       	and	r25, r19
    1646:	eb 81       	ldd	r30, Y+3	; 0x03
    1648:	fc 81       	ldd	r31, Y+4	; 0x04
    164a:	91 83       	std	Z+1, r25	; 0x01
    164c:	80 83       	st	Z, r24
	}
	taskEXIT_CRITICAL();
    164e:	0f 90       	pop	r0
    1650:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1656:	28 96       	adiw	r28, 0x08	; 8
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	27 97       	sbiw	r28, 0x07	; 7
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	9f 83       	std	Y+7, r25	; 0x07
    167e:	8e 83       	std	Y+6, r24	; 0x06
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    1680:	8e 81       	ldd	r24, Y+6	; 0x06
    1682:	9f 81       	ldd	r25, Y+7	; 0x07
    1684:	9c 83       	std	Y+4, r25	; 0x04
    1686:	8b 83       	std	Y+3, r24	; 0x03
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1688:	1d 82       	std	Y+5, r1	; 0x05
	{
		uxReturn = pxEventBits->uxEventBits;
    168a:	eb 81       	ldd	r30, Y+3	; 0x03
    168c:	fc 81       	ldd	r31, Y+4	; 0x04
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	9a 83       	std	Y+2, r25	; 0x02
    1694:	89 83       	std	Y+1, r24	; 0x01
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	9a 81       	ldd	r25, Y+2	; 0x02
}
    169a:	27 96       	adiw	r28, 0x07	; 7
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	65 97       	sbiw	r28, 0x15	; 21
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	9b 8b       	std	Y+19, r25	; 0x13
    16c2:	8a 8b       	std	Y+18, r24	; 0x12
    16c4:	7d 8b       	std	Y+21, r23	; 0x15
    16c6:	6c 8b       	std	Y+20, r22	; 0x14
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    16c8:	19 86       	std	Y+9, r1	; 0x09
    16ca:	18 86       	std	Y+8, r1	; 0x08
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    16cc:	8a 89       	ldd	r24, Y+18	; 0x12
    16ce:	9b 89       	ldd	r25, Y+19	; 0x13
    16d0:	9b 83       	std	Y+3, r25	; 0x03
    16d2:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xMatchFound = pdFALSE;
    16d4:	19 82       	std	Y+1, r1	; 0x01

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	9b 81       	ldd	r25, Y+3	; 0x03
    16da:	02 96       	adiw	r24, 0x02	; 2
    16dc:	9b 87       	std	Y+11, r25	; 0x0b
    16de:	8a 87       	std	Y+10, r24	; 0x0a
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    16e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16e4:	03 96       	adiw	r24, 0x03	; 3
    16e6:	9d 87       	std	Y+13, r25	; 0x0d
    16e8:	8c 87       	std	Y+12, r24	; 0x0c
	vTaskSuspendAll();
    16ea:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
    16ee:	ea 85       	ldd	r30, Y+10	; 0x0a
    16f0:	fb 85       	ldd	r31, Y+11	; 0x0b
    16f2:	85 81       	ldd	r24, Z+5	; 0x05
    16f4:	96 81       	ldd	r25, Z+6	; 0x06
    16f6:	99 8b       	std	Y+17, r25	; 0x11
    16f8:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
    16fa:	ea 81       	ldd	r30, Y+2	; 0x02
    16fc:	fb 81       	ldd	r31, Y+3	; 0x03
    16fe:	20 81       	ld	r18, Z
    1700:	31 81       	ldd	r19, Z+1	; 0x01
    1702:	8c 89       	ldd	r24, Y+20	; 0x14
    1704:	9d 89       	ldd	r25, Y+21	; 0x15
    1706:	82 2b       	or	r24, r18
    1708:	93 2b       	or	r25, r19
    170a:	ea 81       	ldd	r30, Y+2	; 0x02
    170c:	fb 81       	ldd	r31, Y+3	; 0x03
    170e:	91 83       	std	Z+1, r25	; 0x01
    1710:	80 83       	st	Z, r24
    1712:	59 c0       	rjmp	.+178    	; 0x17c6 <xEventGroupSetBits+0x11a>

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
    1714:	e8 89       	ldd	r30, Y+16	; 0x10
    1716:	f9 89       	ldd	r31, Y+17	; 0x11
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	93 81       	ldd	r25, Z+3	; 0x03
    171c:	9f 87       	std	Y+15, r25	; 0x0f
    171e:	8e 87       	std	Y+14, r24	; 0x0e
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    1720:	e8 89       	ldd	r30, Y+16	; 0x10
    1722:	f9 89       	ldd	r31, Y+17	; 0x11
    1724:	80 81       	ld	r24, Z
    1726:	91 81       	ldd	r25, Z+1	; 0x01
    1728:	9f 83       	std	Y+7, r25	; 0x07
    172a:	8e 83       	std	Y+6, r24	; 0x06
			xMatchFound = pdFALSE;
    172c:	19 82       	std	Y+1, r1	; 0x01

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
    172e:	8e 81       	ldd	r24, Y+6	; 0x06
    1730:	9f 81       	ldd	r25, Y+7	; 0x07
    1732:	80 70       	andi	r24, 0x00	; 0
    1734:	9d 83       	std	Y+5, r25	; 0x05
    1736:	8c 83       	std	Y+4, r24	; 0x04
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    1738:	8e 81       	ldd	r24, Y+6	; 0x06
    173a:	9f 81       	ldd	r25, Y+7	; 0x07
    173c:	90 70       	andi	r25, 0x00	; 0
    173e:	9f 83       	std	Y+7, r25	; 0x07
    1740:	8e 83       	std	Y+6, r24	; 0x06

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    1742:	8c 81       	ldd	r24, Y+4	; 0x04
    1744:	9d 81       	ldd	r25, Y+5	; 0x05
    1746:	80 70       	andi	r24, 0x00	; 0
    1748:	94 70       	andi	r25, 0x04	; 4
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	69 f4       	brne	.+26     	; 0x1768 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    174e:	ea 81       	ldd	r30, Y+2	; 0x02
    1750:	fb 81       	ldd	r31, Y+3	; 0x03
    1752:	20 81       	ld	r18, Z
    1754:	31 81       	ldd	r19, Z+1	; 0x01
    1756:	8e 81       	ldd	r24, Y+6	; 0x06
    1758:	9f 81       	ldd	r25, Y+7	; 0x07
    175a:	82 23       	and	r24, r18
    175c:	93 23       	and	r25, r19
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	91 f0       	breq	.+36     	; 0x1786 <xEventGroupSetBits+0xda>
				{
					xMatchFound = pdTRUE;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	0f c0       	rjmp	.+30     	; 0x1786 <xEventGroupSetBits+0xda>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    1768:	ea 81       	ldd	r30, Y+2	; 0x02
    176a:	fb 81       	ldd	r31, Y+3	; 0x03
    176c:	20 81       	ld	r18, Z
    176e:	31 81       	ldd	r19, Z+1	; 0x01
    1770:	8e 81       	ldd	r24, Y+6	; 0x06
    1772:	9f 81       	ldd	r25, Y+7	; 0x07
    1774:	28 23       	and	r18, r24
    1776:	39 23       	and	r19, r25
    1778:	8e 81       	ldd	r24, Y+6	; 0x06
    177a:	9f 81       	ldd	r25, Y+7	; 0x07
    177c:	28 17       	cp	r18, r24
    177e:	39 07       	cpc	r19, r25
    1780:	11 f4       	brne	.+4      	; 0x1786 <xEventGroupSetBits+0xda>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	88 23       	and	r24, r24
    178a:	c9 f0       	breq	.+50     	; 0x17be <xEventGroupSetBits+0x112>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	9d 81       	ldd	r25, Y+5	; 0x05
    1790:	80 70       	andi	r24, 0x00	; 0
    1792:	91 70       	andi	r25, 0x01	; 1
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	41 f0       	breq	.+16     	; 0x17a8 <xEventGroupSetBits+0xfc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
    1798:	88 85       	ldd	r24, Y+8	; 0x08
    179a:	99 85       	ldd	r25, Y+9	; 0x09
    179c:	2e 81       	ldd	r18, Y+6	; 0x06
    179e:	3f 81       	ldd	r19, Y+7	; 0x07
    17a0:	82 2b       	or	r24, r18
    17a2:	93 2b       	or	r25, r19
    17a4:	99 87       	std	Y+9, r25	; 0x09
    17a6:	88 87       	std	Y+8, r24	; 0x08
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    17a8:	ea 81       	ldd	r30, Y+2	; 0x02
    17aa:	fb 81       	ldd	r31, Y+3	; 0x03
    17ac:	80 81       	ld	r24, Z
    17ae:	91 81       	ldd	r25, Z+1	; 0x01
    17b0:	9c 01       	movw	r18, r24
    17b2:	32 60       	ori	r19, 0x02	; 2
    17b4:	88 89       	ldd	r24, Y+16	; 0x10
    17b6:	99 89       	ldd	r25, Y+17	; 0x11
    17b8:	b9 01       	movw	r22, r18
    17ba:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
    17be:	8e 85       	ldd	r24, Y+14	; 0x0e
    17c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    17c2:	99 8b       	std	Y+17, r25	; 0x11
    17c4:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
    17c6:	28 89       	ldd	r18, Y+16	; 0x10
    17c8:	39 89       	ldd	r19, Y+17	; 0x11
    17ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    17cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    17ce:	28 17       	cp	r18, r24
    17d0:	39 07       	cpc	r19, r25
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <xEventGroupSetBits+0x12a>
    17d4:	9f cf       	rjmp	.-194    	; 0x1714 <xEventGroupSetBits+0x68>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    17d6:	ea 81       	ldd	r30, Y+2	; 0x02
    17d8:	fb 81       	ldd	r31, Y+3	; 0x03
    17da:	20 81       	ld	r18, Z
    17dc:	31 81       	ldd	r19, Z+1	; 0x01
    17de:	88 85       	ldd	r24, Y+8	; 0x08
    17e0:	99 85       	ldd	r25, Y+9	; 0x09
    17e2:	80 95       	com	r24
    17e4:	90 95       	com	r25
    17e6:	82 23       	and	r24, r18
    17e8:	93 23       	and	r25, r19
    17ea:	ea 81       	ldd	r30, Y+2	; 0x02
    17ec:	fb 81       	ldd	r31, Y+3	; 0x03
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	80 83       	st	Z, r24
	}
	( void ) xTaskResumeAll();
    17f2:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
    17f6:	ea 81       	ldd	r30, Y+2	; 0x02
    17f8:	fb 81       	ldd	r31, Y+3	; 0x03
    17fa:	80 81       	ld	r24, Z
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
}
    17fe:	65 96       	adiw	r28, 0x15	; 21
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <vEventGroupDelete+0x6>
    1816:	00 d0       	rcall	.+0      	; 0x1818 <vEventGroupDelete+0x8>
    1818:	00 d0       	rcall	.+0      	; 0x181a <vEventGroupDelete+0xa>
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	9e 83       	std	Y+6, r25	; 0x06
    1820:	8d 83       	std	Y+5, r24	; 0x05
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	9e 81       	ldd	r25, Y+6	; 0x06
    1826:	9c 83       	std	Y+4, r25	; 0x04
    1828:	8b 83       	std	Y+3, r24	; 0x03
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	9c 81       	ldd	r25, Y+4	; 0x04
    182e:	02 96       	adiw	r24, 0x02	; 2
    1830:	9a 83       	std	Y+2, r25	; 0x02
    1832:	89 83       	std	Y+1, r24	; 0x01

	vTaskSuspendAll();
    1834:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <vTaskSuspendAll>
    1838:	08 c0       	rjmp	.+16     	; 0x184a <vEventGroupDelete+0x3a>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    183a:	e9 81       	ldd	r30, Y+1	; 0x01
    183c:	fa 81       	ldd	r31, Y+2	; 0x02
    183e:	85 81       	ldd	r24, Z+5	; 0x05
    1840:	96 81       	ldd	r25, Z+6	; 0x06
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	72 e0       	ldi	r23, 0x02	; 2
    1846:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    184a:	e9 81       	ldd	r30, Y+1	; 0x01
    184c:	fa 81       	ldd	r31, Y+2	; 0x02
    184e:	80 81       	ld	r24, Z
    1850:	88 23       	and	r24, r24
    1852:	99 f7       	brne	.-26     	; 0x183a <vEventGroupDelete+0x2a>
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
		}

		vPortFree( pxEventBits );
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <vPortFree>
	}
	( void ) xTaskResumeAll();
    185c:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <xTaskResumeAll>
}
    1860:	26 96       	adiw	r28, 0x06	; 6
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	00 d0       	rcall	.+0      	; 0x1878 <vEventGroupSetBitsCallback+0x6>
    1878:	00 d0       	rcall	.+0      	; 0x187a <vEventGroupSetBitsCallback+0x8>
    187a:	00 d0       	rcall	.+0      	; 0x187c <vEventGroupSetBitsCallback+0xa>
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	9a 83       	std	Y+2, r25	; 0x02
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	4b 83       	std	Y+3, r20	; 0x03
    1886:	5c 83       	std	Y+4, r21	; 0x04
    1888:	6d 83       	std	Y+5, r22	; 0x05
    188a:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
    188c:	2b 81       	ldd	r18, Y+3	; 0x03
    188e:	3c 81       	ldd	r19, Y+4	; 0x04
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	b9 01       	movw	r22, r18
    1896:	0e 94 56 0b 	call	0x16ac	; 0x16ac <xEventGroupSetBits>
}
    189a:	26 96       	adiw	r28, 0x06	; 6
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	de bf       	out	0x3e, r29	; 62
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	cd bf       	out	0x3d, r28	; 61
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <vEventGroupClearBitsCallback+0x6>
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <vEventGroupClearBitsCallback+0x8>
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <vEventGroupClearBitsCallback+0xa>
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	9a 83       	std	Y+2, r25	; 0x02
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	4b 83       	std	Y+3, r20	; 0x03
    18c0:	5c 83       	std	Y+4, r21	; 0x04
    18c2:	6d 83       	std	Y+5, r22	; 0x05
    18c4:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
    18c6:	2b 81       	ldd	r18, Y+3	; 0x03
    18c8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	9a 81       	ldd	r25, Y+2	; 0x02
    18ce:	b9 01       	movw	r22, r18
    18d0:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <xEventGroupClearBits>
}
    18d4:	26 96       	adiw	r28, 0x06	; 6
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <prvTestWaitCondition+0x6>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <prvTestWaitCondition+0x8>
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <prvTestWaitCondition+0xa>
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	9b 83       	std	Y+3, r25	; 0x03
    18f6:	8a 83       	std	Y+2, r24	; 0x02
    18f8:	7d 83       	std	Y+5, r23	; 0x05
    18fa:	6c 83       	std	Y+4, r22	; 0x04
    18fc:	4e 83       	std	Y+6, r20	; 0x06
BaseType_t xWaitConditionMet = pdFALSE;
    18fe:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
    1900:	8e 81       	ldd	r24, Y+6	; 0x06
    1902:	88 23       	and	r24, r24
    1904:	59 f4       	brne	.+22     	; 0x191c <prvTestWaitCondition+0x36>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	9b 81       	ldd	r25, Y+3	; 0x03
    190a:	2c 81       	ldd	r18, Y+4	; 0x04
    190c:	3d 81       	ldd	r19, Y+5	; 0x05
    190e:	82 23       	and	r24, r18
    1910:	93 23       	and	r25, r19
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	81 f0       	breq	.+32     	; 0x1936 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	0d c0       	rjmp	.+26     	; 0x1936 <prvTestWaitCondition+0x50>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    191c:	2a 81       	ldd	r18, Y+2	; 0x02
    191e:	3b 81       	ldd	r19, Y+3	; 0x03
    1920:	8c 81       	ldd	r24, Y+4	; 0x04
    1922:	9d 81       	ldd	r25, Y+5	; 0x05
    1924:	28 23       	and	r18, r24
    1926:	39 23       	and	r19, r25
    1928:	8c 81       	ldd	r24, Y+4	; 0x04
    192a:	9d 81       	ldd	r25, Y+5	; 0x05
    192c:	28 17       	cp	r18, r24
    192e:	39 07       	cpc	r19, r25
    1930:	11 f4       	brne	.+4      	; 0x1936 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
    1936:	89 81       	ldd	r24, Y+1	; 0x01
}
    1938:	26 96       	adiw	r28, 0x06	; 6
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	00 d0       	rcall	.+0      	; 0x1950 <pvPortMalloc+0x6>
    1950:	00 d0       	rcall	.+0      	; 0x1952 <pvPortMalloc+0x8>
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	9c 83       	std	Y+4, r25	; 0x04
    1958:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    195a:	1a 82       	std	Y+2, r1	; 0x02
    195c:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    195e:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    1962:	80 91 32 01 	lds	r24, 0x0132
    1966:	90 91 33 01 	lds	r25, 0x0133
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	31 f4       	brne	.+12     	; 0x197a <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    196e:	85 e3       	ldi	r24, 0x35	; 53
    1970:	91 e0       	ldi	r25, 0x01	; 1
    1972:	90 93 33 01 	sts	0x0133, r25
    1976:	80 93 32 01 	sts	0x0132, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    197a:	80 91 30 01 	lds	r24, 0x0130
    197e:	90 91 31 01 	lds	r25, 0x0131
    1982:	2b 81       	ldd	r18, Y+3	; 0x03
    1984:	3c 81       	ldd	r19, Y+4	; 0x04
    1986:	82 0f       	add	r24, r18
    1988:	93 1f       	adc	r25, r19
    198a:	25 e0       	ldi	r18, 0x05	; 5
    198c:	8b 3d       	cpi	r24, 0xDB	; 219
    198e:	92 07       	cpc	r25, r18
    1990:	38 f5       	brcc	.+78     	; 0x19e0 <pvPortMalloc+0x96>
    1992:	20 91 30 01 	lds	r18, 0x0130
    1996:	30 91 31 01 	lds	r19, 0x0131
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	9c 81       	ldd	r25, Y+4	; 0x04
    199e:	28 0f       	add	r18, r24
    19a0:	39 1f       	adc	r19, r25
    19a2:	80 91 30 01 	lds	r24, 0x0130
    19a6:	90 91 31 01 	lds	r25, 0x0131
    19aa:	82 17       	cp	r24, r18
    19ac:	93 07       	cpc	r25, r19
    19ae:	c0 f4       	brcc	.+48     	; 0x19e0 <pvPortMalloc+0x96>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    19b0:	20 91 32 01 	lds	r18, 0x0132
    19b4:	30 91 33 01 	lds	r19, 0x0133
    19b8:	80 91 30 01 	lds	r24, 0x0130
    19bc:	90 91 31 01 	lds	r25, 0x0131
    19c0:	82 0f       	add	r24, r18
    19c2:	93 1f       	adc	r25, r19
    19c4:	9a 83       	std	Y+2, r25	; 0x02
    19c6:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    19c8:	20 91 30 01 	lds	r18, 0x0130
    19cc:	30 91 31 01 	lds	r19, 0x0131
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	9c 81       	ldd	r25, Y+4	; 0x04
    19d4:	82 0f       	add	r24, r18
    19d6:	93 1f       	adc	r25, r19
    19d8:	90 93 31 01 	sts	0x0131, r25
    19dc:	80 93 30 01 	sts	0x0130, r24
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    19e0:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <vPortFree+0x6>
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	9a 83       	std	Y+2, r25	; 0x02
    1a02:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    1a16:	10 92 31 01 	sts	0x0131, r1
    1a1a:	10 92 30 01 	sts	0x0130, r1
}
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    1a2c:	20 91 30 01 	lds	r18, 0x0130
    1a30:	30 91 31 01 	lds	r19, 0x0131
    1a34:	8b ed       	ldi	r24, 0xDB	; 219
    1a36:	95 e0       	ldi	r25, 0x05	; 5
    1a38:	82 1b       	sub	r24, r18
    1a3a:	93 0b       	sbc	r25, r19
}
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <vStartIntegerMathTasks>:
static volatile BaseType_t xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( BaseType_t ) pdFALSE };

/*-----------------------------------------------------------*/

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
    1a42:	af 92       	push	r10
    1a44:	bf 92       	push	r11
    1a46:	cf 92       	push	r12
    1a48:	df 92       	push	r13
    1a4a:	ef 92       	push	r14
    1a4c:	ff 92       	push	r15
    1a4e:	0f 93       	push	r16
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <vStartIntegerMathTasks+0x14>
    1a56:	0f 92       	push	r0
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	8b 83       	std	Y+3, r24	; 0x03
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
    1a5e:	1a 82       	std	Y+2, r1	; 0x02
    1a60:	19 82       	std	Y+1, r1	; 0x01
    1a62:	1b c0       	rjmp	.+54     	; 0x1a9a <vStartIntegerMathTasks+0x58>
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	9a 81       	ldd	r25, Y+2	; 0x02
    1a68:	fc 01       	movw	r30, r24
    1a6a:	e0 5f       	subi	r30, 0xF0	; 240
    1a6c:	f8 4f       	sbci	r31, 0xF8	; 248
    1a6e:	8f e5       	ldi	r24, 0x5F	; 95
    1a70:	9d e0       	ldi	r25, 0x0D	; 13
    1a72:	20 e7       	ldi	r18, 0x70	; 112
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	b9 01       	movw	r22, r18
    1a78:	45 e5       	ldi	r20, 0x55	; 85
    1a7a:	50 e0       	ldi	r21, 0x00	; 0
    1a7c:	9f 01       	movw	r18, r30
    1a7e:	0b 81       	ldd	r16, Y+3	; 0x03
    1a80:	ee 24       	eor	r14, r14
    1a82:	ff 24       	eor	r15, r15
    1a84:	cc 24       	eor	r12, r12
    1a86:	dd 24       	eor	r13, r13
    1a88:	aa 24       	eor	r10, r10
    1a8a:	bb 24       	eor	r11, r11
    1a8c:	0e 94 a9 19 	call	0x3352	; 0x3352 <xTaskGenericCreate>

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	01 96       	adiw	r24, 0x01	; 1
    1a96:	9a 83       	std	Y+2, r25	; 0x02
    1a98:	89 83       	std	Y+1, r24	; 0x01
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9e:	18 16       	cp	r1, r24
    1aa0:	19 06       	cpc	r1, r25
    1aa2:	04 f7       	brge	.-64     	; 0x1a64 <vStartIntegerMathTasks+0x22>
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
	}
}
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	0f 91       	pop	r16
    1ab0:	ff 90       	pop	r15
    1ab2:	ef 90       	pop	r14
    1ab4:	df 90       	pop	r13
    1ab6:	cf 90       	pop	r12
    1ab8:	bf 90       	pop	r11
    1aba:	af 90       	pop	r10
    1abc:	08 95       	ret

00001abe <vCompeteingIntMathTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	2a 97       	sbiw	r28, 0x0a	; 10
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	9a 87       	std	Y+10, r25	; 0x0a
    1ad4:	89 87       	std	Y+9, r24	; 0x09
/* These variables are all effectively set to constants so they are volatile to
ensure the compiler does not just get rid of them. */
volatile long lValue;
short sError = pdFALSE;
    1ad6:	1c 82       	std	Y+4, r1	; 0x04
    1ad8:	1b 82       	std	Y+3, r1	; 0x03
volatile BaseType_t *pxTaskHasExecuted;

	/* Set a pointer to the variable we are going to set to true each
	iteration.  This is also a good test of the parameter passing mechanism
	within each port. */
	pxTaskHasExecuted = ( volatile BaseType_t * ) pvParameters;
    1ada:	89 85       	ldd	r24, Y+9	; 0x09
    1adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ade:	9a 83       	std	Y+2, r25	; 0x02
    1ae0:	89 83       	std	Y+1, r24	; 0x01
	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		/* Perform the calculation.  This will store partial value in
		registers, resulting in a good test of the context switch mechanism. */
		lValue = intgCONST1;
    1ae2:	8b e7       	ldi	r24, 0x7B	; 123
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	a0 e0       	ldi	r26, 0x00	; 0
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	8d 83       	std	Y+5, r24	; 0x05
    1aec:	9e 83       	std	Y+6, r25	; 0x06
    1aee:	af 83       	std	Y+7, r26	; 0x07
    1af0:	b8 87       	std	Y+8, r27	; 0x08
		lValue += intgCONST2;
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	9e 81       	ldd	r25, Y+6	; 0x06
    1af6:	af 81       	ldd	r26, Y+7	; 0x07
    1af8:	b8 85       	ldd	r27, Y+8	; 0x08
    1afa:	89 5b       	subi	r24, 0xB9	; 185
    1afc:	9b 46       	sbci	r25, 0x6B	; 107
    1afe:	ac 4f       	sbci	r26, 0xFC	; 252
    1b00:	bf 4f       	sbci	r27, 0xFF	; 255
    1b02:	8d 83       	std	Y+5, r24	; 0x05
    1b04:	9e 83       	std	Y+6, r25	; 0x06
    1b06:	af 83       	std	Y+7, r26	; 0x07
    1b08:	b8 87       	std	Y+8, r27	; 0x08
			taskYIELD();
		}
		#endif

		/* Finish off the calculation. */
		lValue *= intgCONST3;
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0e:	af 81       	ldd	r26, Y+7	; 0x07
    1b10:	b8 85       	ldd	r27, Y+8	; 0x08
    1b12:	2d ef       	ldi	r18, 0xFD	; 253
    1b14:	3f ef       	ldi	r19, 0xFF	; 255
    1b16:	4f ef       	ldi	r20, 0xFF	; 255
    1b18:	5f ef       	ldi	r21, 0xFF	; 255
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__mulsi3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	8d 83       	std	Y+5, r24	; 0x05
    1b28:	9e 83       	std	Y+6, r25	; 0x06
    1b2a:	af 83       	std	Y+7, r26	; 0x07
    1b2c:	b8 87       	std	Y+8, r27	; 0x08
		lValue /= intgCONST4;
    1b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b30:	9e 81       	ldd	r25, Y+6	; 0x06
    1b32:	af 81       	ldd	r26, Y+7	; 0x07
    1b34:	b8 85       	ldd	r27, Y+8	; 0x08
    1b36:	27 e0       	ldi	r18, 0x07	; 7
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	50 e0       	ldi	r21, 0x00	; 0
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 05 32 	call	0x640a	; 0x640a <__divmodsi4>
    1b46:	da 01       	movw	r26, r20
    1b48:	c9 01       	movw	r24, r18
    1b4a:	8d 83       	std	Y+5, r24	; 0x05
    1b4c:	9e 83       	std	Y+6, r25	; 0x06
    1b4e:	af 83       	std	Y+7, r26	; 0x07
    1b50:	b8 87       	std	Y+8, r27	; 0x08

		/* If the calculation is found to be incorrect we stop setting the 
		TaskHasExecuted variable so the check task can see an error has 
		occurred. */
		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised out. */
    1b52:	8d 81       	ldd	r24, Y+5	; 0x05
    1b54:	9e 81       	ldd	r25, Y+6	; 0x06
    1b56:	af 81       	ldd	r26, Y+7	; 0x07
    1b58:	b8 85       	ldd	r27, Y+8	; 0x08
    1b5a:	8b 31       	cpi	r24, 0x1B	; 27
    1b5c:	27 e7       	ldi	r18, 0x77	; 119
    1b5e:	92 07       	cpc	r25, r18
    1b60:	2e ef       	ldi	r18, 0xFE	; 254
    1b62:	a2 07       	cpc	r26, r18
    1b64:	2f ef       	ldi	r18, 0xFF	; 255
    1b66:	b2 07       	cpc	r27, r18
    1b68:	21 f0       	breq	.+8      	; 0x1b72 <vCompeteingIntMathTask+0xb4>
		{
			sError = pdTRUE;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9c 83       	std	Y+4, r25	; 0x04
    1b70:	8b 83       	std	Y+3, r24	; 0x03
		}

		if( sError == pdFALSE )
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <vCompeteingIntMathTask+0xbe>
    1b7a:	b3 cf       	rjmp	.-154    	; 0x1ae2 <vCompeteingIntMathTask+0x24>
		{
			/* We have not encountered any errors, so set the flag that show
			we are still executing.  This will be periodically cleared by
			the check task. */
			portENTER_CRITICAL();
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	0f 92       	push	r0
				*pxTaskHasExecuted = pdTRUE;
    1b82:	e9 81       	ldd	r30, Y+1	; 0x01
    1b84:	fa 81       	ldd	r31, Y+2	; 0x02
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	80 83       	st	Z, r24
			portEXIT_CRITICAL();
    1b8a:	0f 90       	pop	r0
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	a9 cf       	rjmp	.-174    	; 0x1ae2 <vCompeteingIntMathTask+0x24>

00001b90 <xAreIntegerMathsTaskStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreIntegerMathsTaskStillRunning( void )
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <xAreIntegerMathsTaskStillRunning+0x6>
    1b96:	0f 92       	push	r0
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
BaseType_t xReturn = pdTRUE;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	8b 83       	std	Y+3, r24	; 0x03
short sTask;

	/* Check the maths tasks are still running by ensuring their check variables 
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
    1ba0:	1a 82       	std	Y+2, r1	; 0x02
    1ba2:	19 82       	std	Y+1, r1	; 0x01
    1ba4:	14 c0       	rjmp	.+40     	; 0x1bce <xAreIntegerMathsTaskStillRunning+0x3e>
	{
		if( xTaskCheck[ sTask ] == pdFALSE )
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    1baa:	fc 01       	movw	r30, r24
    1bac:	e0 5f       	subi	r30, 0xF0	; 240
    1bae:	f8 4f       	sbci	r31, 0xF8	; 248
    1bb0:	80 81       	ld	r24, Z
    1bb2:	88 23       	and	r24, r24
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <xAreIntegerMathsTaskStillRunning+0x28>
		{
			/* The check has not incremented so an error exists. */
			xReturn = pdFALSE;
    1bb6:	1b 82       	std	Y+3, r1	; 0x03
		}

		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	e0 5f       	subi	r30, 0xF0	; 240
    1bc0:	f8 4f       	sbci	r31, 0xF8	; 248
    1bc2:	10 82       	st	Z, r1
BaseType_t xReturn = pdTRUE;
short sTask;

	/* Check the maths tasks are still running by ensuring their check variables 
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc8:	01 96       	adiw	r24, 0x01	; 1
    1bca:	9a 83       	std	Y+2, r25	; 0x02
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd2:	18 16       	cp	r1, r24
    1bd4:	19 06       	cpc	r1, r25
    1bd6:	3c f7       	brge	.-50     	; 0x1ba6 <xAreIntegerMathsTaskStillRunning+0x16>
		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
	}

	return xReturn;
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <vListInitialise+0x6>
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	9a 83       	std	Y+2, r25	; 0x02
    1bf2:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf8:	03 96       	adiw	r24, 0x03	; 3
    1bfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1bfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bfe:	92 83       	std	Z+2, r25	; 0x02
    1c00:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1c02:	e9 81       	ldd	r30, Y+1	; 0x01
    1c04:	fa 81       	ldd	r31, Y+2	; 0x02
    1c06:	8f ef       	ldi	r24, 0xFF	; 255
    1c08:	9f ef       	ldi	r25, 0xFF	; 255
    1c0a:	94 83       	std	Z+4, r25	; 0x04
    1c0c:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	9a 81       	ldd	r25, Y+2	; 0x02
    1c12:	03 96       	adiw	r24, 0x03	; 3
    1c14:	e9 81       	ldd	r30, Y+1	; 0x01
    1c16:	fa 81       	ldd	r31, Y+2	; 0x02
    1c18:	96 83       	std	Z+6, r25	; 0x06
    1c1a:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	03 96       	adiw	r24, 0x03	; 3
    1c22:	e9 81       	ldd	r30, Y+1	; 0x01
    1c24:	fa 81       	ldd	r31, Y+2	; 0x02
    1c26:	90 87       	std	Z+8, r25	; 0x08
    1c28:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1c2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2e:	10 82       	st	Z, r1
}
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <vListInitialiseItem+0x6>
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	9a 83       	std	Y+2, r25	; 0x02
    1c46:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1c48:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4c:	11 86       	std	Z+9, r1	; 0x09
    1c4e:	10 86       	std	Z+8, r1	; 0x08
}
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <vListInsertEnd+0x6>
    1c60:	00 d0       	rcall	.+0      	; 0x1c62 <vListInsertEnd+0x8>
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <vListInsertEnd+0xa>
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	9c 83       	std	Y+4, r25	; 0x04
    1c6a:	8b 83       	std	Y+3, r24	; 0x03
    1c6c:	7e 83       	std	Y+6, r23	; 0x06
    1c6e:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    1c70:	eb 81       	ldd	r30, Y+3	; 0x03
    1c72:	fc 81       	ldd	r31, Y+4	; 0x04
    1c74:	81 81       	ldd	r24, Z+1	; 0x01
    1c76:	92 81       	ldd	r25, Z+2	; 0x02
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	89 83       	std	Y+1, r24	; 0x01

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1c7c:	ed 81       	ldd	r30, Y+5	; 0x05
    1c7e:	fe 81       	ldd	r31, Y+6	; 0x06
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	9a 81       	ldd	r25, Y+2	; 0x02
    1c84:	93 83       	std	Z+3, r25	; 0x03
    1c86:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1c88:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8c:	84 81       	ldd	r24, Z+4	; 0x04
    1c8e:	95 81       	ldd	r25, Z+5	; 0x05
    1c90:	ed 81       	ldd	r30, Y+5	; 0x05
    1c92:	fe 81       	ldd	r31, Y+6	; 0x06
    1c94:	95 83       	std	Z+5, r25	; 0x05
    1c96:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1c98:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9c:	04 80       	ldd	r0, Z+4	; 0x04
    1c9e:	f5 81       	ldd	r31, Z+5	; 0x05
    1ca0:	e0 2d       	mov	r30, r0
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca6:	93 83       	std	Z+3, r25	; 0x03
    1ca8:	82 83       	std	Z+2, r24	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    1caa:	e9 81       	ldd	r30, Y+1	; 0x01
    1cac:	fa 81       	ldd	r31, Y+2	; 0x02
    1cae:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb2:	95 83       	std	Z+5, r25	; 0x05
    1cb4:	84 83       	std	Z+4, r24	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1cb6:	ed 81       	ldd	r30, Y+5	; 0x05
    1cb8:	fe 81       	ldd	r31, Y+6	; 0x06
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbe:	91 87       	std	Z+9, r25	; 0x09
    1cc0:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1cc2:	eb 81       	ldd	r30, Y+3	; 0x03
    1cc4:	fc 81       	ldd	r31, Y+4	; 0x04
    1cc6:	80 81       	ld	r24, Z
    1cc8:	8f 5f       	subi	r24, 0xFF	; 255
    1cca:	eb 81       	ldd	r30, Y+3	; 0x03
    1ccc:	fc 81       	ldd	r31, Y+4	; 0x04
    1cce:	80 83       	st	Z, r24
}
    1cd0:	26 96       	adiw	r28, 0x06	; 6
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	28 97       	sbiw	r28, 0x08	; 8
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	cd bf       	out	0x3d, r28	; 61
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
    1cfa:	78 87       	std	Y+8, r23	; 0x08
    1cfc:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1cfe:	ef 81       	ldd	r30, Y+7	; 0x07
    1d00:	f8 85       	ldd	r31, Y+8	; 0x08
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0e:	2f ef       	ldi	r18, 0xFF	; 255
    1d10:	8f 3f       	cpi	r24, 0xFF	; 255
    1d12:	92 07       	cpc	r25, r18
    1d14:	39 f4       	brne	.+14     	; 0x1d24 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1d16:	ed 81       	ldd	r30, Y+5	; 0x05
    1d18:	fe 81       	ldd	r31, Y+6	; 0x06
    1d1a:	87 81       	ldd	r24, Z+7	; 0x07
    1d1c:	90 85       	ldd	r25, Z+8	; 0x08
    1d1e:	9c 83       	std	Y+4, r25	; 0x04
    1d20:	8b 83       	std	Y+3, r24	; 0x03
    1d22:	18 c0       	rjmp	.+48     	; 0x1d54 <vListInsert+0x72>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1d24:	8d 81       	ldd	r24, Y+5	; 0x05
    1d26:	9e 81       	ldd	r25, Y+6	; 0x06
    1d28:	03 96       	adiw	r24, 0x03	; 3
    1d2a:	9c 83       	std	Y+4, r25	; 0x04
    1d2c:	8b 83       	std	Y+3, r24	; 0x03
    1d2e:	06 c0       	rjmp	.+12     	; 0x1d3c <vListInsert+0x5a>
    1d30:	eb 81       	ldd	r30, Y+3	; 0x03
    1d32:	fc 81       	ldd	r31, Y+4	; 0x04
    1d34:	82 81       	ldd	r24, Z+2	; 0x02
    1d36:	93 81       	ldd	r25, Z+3	; 0x03
    1d38:	9c 83       	std	Y+4, r25	; 0x04
    1d3a:	8b 83       	std	Y+3, r24	; 0x03
    1d3c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d3e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d40:	02 80       	ldd	r0, Z+2	; 0x02
    1d42:	f3 81       	ldd	r31, Z+3	; 0x03
    1d44:	e0 2d       	mov	r30, r0
    1d46:	20 81       	ld	r18, Z
    1d48:	31 81       	ldd	r19, Z+1	; 0x01
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4e:	82 17       	cp	r24, r18
    1d50:	93 07       	cpc	r25, r19
    1d52:	70 f7       	brcc	.-36     	; 0x1d30 <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1d54:	eb 81       	ldd	r30, Y+3	; 0x03
    1d56:	fc 81       	ldd	r31, Y+4	; 0x04
    1d58:	82 81       	ldd	r24, Z+2	; 0x02
    1d5a:	93 81       	ldd	r25, Z+3	; 0x03
    1d5c:	ef 81       	ldd	r30, Y+7	; 0x07
    1d5e:	f8 85       	ldd	r31, Y+8	; 0x08
    1d60:	93 83       	std	Z+3, r25	; 0x03
    1d62:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1d64:	ef 81       	ldd	r30, Y+7	; 0x07
    1d66:	f8 85       	ldd	r31, Y+8	; 0x08
    1d68:	02 80       	ldd	r0, Z+2	; 0x02
    1d6a:	f3 81       	ldd	r31, Z+3	; 0x03
    1d6c:	e0 2d       	mov	r30, r0
    1d6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d70:	98 85       	ldd	r25, Y+8	; 0x08
    1d72:	95 83       	std	Z+5, r25	; 0x05
    1d74:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1d76:	ef 81       	ldd	r30, Y+7	; 0x07
    1d78:	f8 85       	ldd	r31, Y+8	; 0x08
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	95 83       	std	Z+5, r25	; 0x05
    1d80:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = pxNewListItem;
    1d82:	eb 81       	ldd	r30, Y+3	; 0x03
    1d84:	fc 81       	ldd	r31, Y+4	; 0x04
    1d86:	8f 81       	ldd	r24, Y+7	; 0x07
    1d88:	98 85       	ldd	r25, Y+8	; 0x08
    1d8a:	93 83       	std	Z+3, r25	; 0x03
    1d8c:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1d8e:	ef 81       	ldd	r30, Y+7	; 0x07
    1d90:	f8 85       	ldd	r31, Y+8	; 0x08
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	9e 81       	ldd	r25, Y+6	; 0x06
    1d96:	91 87       	std	Z+9, r25	; 0x09
    1d98:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1d9a:	ed 81       	ldd	r30, Y+5	; 0x05
    1d9c:	fe 81       	ldd	r31, Y+6	; 0x06
    1d9e:	80 81       	ld	r24, Z
    1da0:	8f 5f       	subi	r24, 0xFF	; 255
    1da2:	ed 81       	ldd	r30, Y+5	; 0x05
    1da4:	fe 81       	ldd	r31, Y+6	; 0x06
    1da6:	80 83       	st	Z, r24
}
    1da8:	28 96       	adiw	r28, 0x08	; 8
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	00 d0       	rcall	.+0      	; 0x1dc0 <uxListRemove+0x6>
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <uxListRemove+0x8>
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	9c 83       	std	Y+4, r25	; 0x04
    1dc8:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1dca:	eb 81       	ldd	r30, Y+3	; 0x03
    1dcc:	fc 81       	ldd	r31, Y+4	; 0x04
    1dce:	80 85       	ldd	r24, Z+8	; 0x08
    1dd0:	91 85       	ldd	r25, Z+9	; 0x09
    1dd2:	9a 83       	std	Y+2, r25	; 0x02
    1dd4:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1dd6:	eb 81       	ldd	r30, Y+3	; 0x03
    1dd8:	fc 81       	ldd	r31, Y+4	; 0x04
    1dda:	a2 81       	ldd	r26, Z+2	; 0x02
    1ddc:	b3 81       	ldd	r27, Z+3	; 0x03
    1dde:	eb 81       	ldd	r30, Y+3	; 0x03
    1de0:	fc 81       	ldd	r31, Y+4	; 0x04
    1de2:	84 81       	ldd	r24, Z+4	; 0x04
    1de4:	95 81       	ldd	r25, Z+5	; 0x05
    1de6:	15 96       	adiw	r26, 0x05	; 5
    1de8:	9c 93       	st	X, r25
    1dea:	8e 93       	st	-X, r24
    1dec:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1dee:	eb 81       	ldd	r30, Y+3	; 0x03
    1df0:	fc 81       	ldd	r31, Y+4	; 0x04
    1df2:	a4 81       	ldd	r26, Z+4	; 0x04
    1df4:	b5 81       	ldd	r27, Z+5	; 0x05
    1df6:	eb 81       	ldd	r30, Y+3	; 0x03
    1df8:	fc 81       	ldd	r31, Y+4	; 0x04
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	13 96       	adiw	r26, 0x03	; 3
    1e00:	9c 93       	st	X, r25
    1e02:	8e 93       	st	-X, r24
    1e04:	12 97       	sbiw	r26, 0x02	; 2

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1e06:	e9 81       	ldd	r30, Y+1	; 0x01
    1e08:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0a:	21 81       	ldd	r18, Z+1	; 0x01
    1e0c:	32 81       	ldd	r19, Z+2	; 0x02
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	9c 81       	ldd	r25, Y+4	; 0x04
    1e12:	28 17       	cp	r18, r24
    1e14:	39 07       	cpc	r19, r25
    1e16:	41 f4       	brne	.+16     	; 0x1e28 <uxListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1e18:	eb 81       	ldd	r30, Y+3	; 0x03
    1e1a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e1c:	84 81       	ldd	r24, Z+4	; 0x04
    1e1e:	95 81       	ldd	r25, Z+5	; 0x05
    1e20:	e9 81       	ldd	r30, Y+1	; 0x01
    1e22:	fa 81       	ldd	r31, Y+2	; 0x02
    1e24:	92 83       	std	Z+2, r25	; 0x02
    1e26:	81 83       	std	Z+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1e28:	eb 81       	ldd	r30, Y+3	; 0x03
    1e2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e2c:	11 86       	std	Z+9, r1	; 0x09
    1e2e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1e30:	e9 81       	ldd	r30, Y+1	; 0x01
    1e32:	fa 81       	ldd	r31, Y+2	; 0x02
    1e34:	80 81       	ld	r24, Z
    1e36:	81 50       	subi	r24, 0x01	; 1
    1e38:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3c:	80 83       	st	Z, r24

	return pxList->uxNumberOfItems;
    1e3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e40:	fa 81       	ldd	r31, Y+2	; 0x02
    1e42:	80 81       	ld	r24, Z
}
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	28 97       	sbiw	r28, 0x08	; 8
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	9c 83       	std	Y+4, r25	; 0x04
    1e68:	8b 83       	std	Y+3, r24	; 0x03
    1e6a:	7e 83       	std	Y+6, r23	; 0x06
    1e6c:	6d 83       	std	Y+5, r22	; 0x05
    1e6e:	58 87       	std	Y+8, r21	; 0x08
    1e70:	4f 83       	std	Y+7, r20	; 0x07
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    1e72:	eb 81       	ldd	r30, Y+3	; 0x03
    1e74:	fc 81       	ldd	r31, Y+4	; 0x04
    1e76:	81 e1       	ldi	r24, 0x11	; 17
    1e78:	80 83       	st	Z, r24
	pxTopOfStack--;
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	9c 83       	std	Y+4, r25	; 0x04
    1e82:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    1e84:	eb 81       	ldd	r30, Y+3	; 0x03
    1e86:	fc 81       	ldd	r31, Y+4	; 0x04
    1e88:	82 e2       	ldi	r24, 0x22	; 34
    1e8a:	80 83       	st	Z, r24
	pxTopOfStack--;
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	9c 83       	std	Y+4, r25	; 0x04
    1e94:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    1e96:	eb 81       	ldd	r30, Y+3	; 0x03
    1e98:	fc 81       	ldd	r31, Y+4	; 0x04
    1e9a:	83 e3       	ldi	r24, 0x33	; 51
    1e9c:	80 83       	st	Z, r24
	pxTopOfStack--;
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	9c 83       	std	Y+4, r25	; 0x04
    1ea6:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
    1ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1eac:	9a 83       	std	Y+2, r25	; 0x02
    1eae:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	eb 81       	ldd	r30, Y+3	; 0x03
    1eb4:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb6:	80 83       	st	Z, r24
	pxTopOfStack--;
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec6:	89 2f       	mov	r24, r25
    1ec8:	99 27       	eor	r25, r25
    1eca:	9a 83       	std	Y+2, r25	; 0x02
    1ecc:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ed2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ed4:	80 83       	st	Z, r24
	pxTopOfStack--;
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	9c 83       	std	Y+4, r25	; 0x04
    1ede:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    1ee0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee4:	10 82       	st	Z, r1
	pxTopOfStack--;
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	9c 83       	std	Y+4, r25	; 0x04
    1eee:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    1ef0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ef2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ef4:	80 e8       	ldi	r24, 0x80	; 128
    1ef6:	80 83       	st	Z, r24
	pxTopOfStack--;
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	9c 81       	ldd	r25, Y+4	; 0x04
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	9c 83       	std	Y+4, r25	; 0x04
    1f00:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    1f02:	eb 81       	ldd	r30, Y+3	; 0x03
    1f04:	fc 81       	ldd	r31, Y+4	; 0x04
    1f06:	10 82       	st	Z, r1
	pxTopOfStack--;
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	9c 83       	std	Y+4, r25	; 0x04
    1f10:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    1f12:	eb 81       	ldd	r30, Y+3	; 0x03
    1f14:	fc 81       	ldd	r31, Y+4	; 0x04
    1f16:	82 e0       	ldi	r24, 0x02	; 2
    1f18:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	9c 83       	std	Y+4, r25	; 0x04
    1f22:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    1f24:	eb 81       	ldd	r30, Y+3	; 0x03
    1f26:	fc 81       	ldd	r31, Y+4	; 0x04
    1f28:	83 e0       	ldi	r24, 0x03	; 3
    1f2a:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	9c 83       	std	Y+4, r25	; 0x04
    1f34:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    1f36:	eb 81       	ldd	r30, Y+3	; 0x03
    1f38:	fc 81       	ldd	r31, Y+4	; 0x04
    1f3a:	84 e0       	ldi	r24, 0x04	; 4
    1f3c:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	9c 81       	ldd	r25, Y+4	; 0x04
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	9c 83       	std	Y+4, r25	; 0x04
    1f46:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    1f48:	eb 81       	ldd	r30, Y+3	; 0x03
    1f4a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f4c:	85 e0       	ldi	r24, 0x05	; 5
    1f4e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	9c 83       	std	Y+4, r25	; 0x04
    1f58:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    1f5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f5e:	86 e0       	ldi	r24, 0x06	; 6
    1f60:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	9c 81       	ldd	r25, Y+4	; 0x04
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	9c 83       	std	Y+4, r25	; 0x04
    1f6a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    1f6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f70:	87 e0       	ldi	r24, 0x07	; 7
    1f72:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	9c 83       	std	Y+4, r25	; 0x04
    1f7c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    1f7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f80:	fc 81       	ldd	r31, Y+4	; 0x04
    1f82:	88 e0       	ldi	r24, 0x08	; 8
    1f84:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	9c 83       	std	Y+4, r25	; 0x04
    1f8e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    1f90:	eb 81       	ldd	r30, Y+3	; 0x03
    1f92:	fc 81       	ldd	r31, Y+4	; 0x04
    1f94:	89 e0       	ldi	r24, 0x09	; 9
    1f96:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	9c 83       	std	Y+4, r25	; 0x04
    1fa0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    1fa2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fa4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fa6:	80 e1       	ldi	r24, 0x10	; 16
    1fa8:	80 83       	st	Z, r24
	pxTopOfStack--;
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	9c 83       	std	Y+4, r25	; 0x04
    1fb2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    1fb4:	eb 81       	ldd	r30, Y+3	; 0x03
    1fb6:	fc 81       	ldd	r31, Y+4	; 0x04
    1fb8:	81 e1       	ldi	r24, 0x11	; 17
    1fba:	80 83       	st	Z, r24
	pxTopOfStack--;
    1fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	9c 83       	std	Y+4, r25	; 0x04
    1fc4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    1fc6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fc8:	fc 81       	ldd	r31, Y+4	; 0x04
    1fca:	82 e1       	ldi	r24, 0x12	; 18
    1fcc:	80 83       	st	Z, r24
	pxTopOfStack--;
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	9c 83       	std	Y+4, r25	; 0x04
    1fd6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    1fd8:	eb 81       	ldd	r30, Y+3	; 0x03
    1fda:	fc 81       	ldd	r31, Y+4	; 0x04
    1fdc:	83 e1       	ldi	r24, 0x13	; 19
    1fde:	80 83       	st	Z, r24
	pxTopOfStack--;
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	9c 83       	std	Y+4, r25	; 0x04
    1fe8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    1fea:	eb 81       	ldd	r30, Y+3	; 0x03
    1fec:	fc 81       	ldd	r31, Y+4	; 0x04
    1fee:	84 e1       	ldi	r24, 0x14	; 20
    1ff0:	80 83       	st	Z, r24
	pxTopOfStack--;
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	9c 83       	std	Y+4, r25	; 0x04
    1ffa:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    1ffc:	eb 81       	ldd	r30, Y+3	; 0x03
    1ffe:	fc 81       	ldd	r31, Y+4	; 0x04
    2000:	85 e1       	ldi	r24, 0x15	; 21
    2002:	80 83       	st	Z, r24
	pxTopOfStack--;
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	9c 81       	ldd	r25, Y+4	; 0x04
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	9c 83       	std	Y+4, r25	; 0x04
    200c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    200e:	eb 81       	ldd	r30, Y+3	; 0x03
    2010:	fc 81       	ldd	r31, Y+4	; 0x04
    2012:	86 e1       	ldi	r24, 0x16	; 22
    2014:	80 83       	st	Z, r24
	pxTopOfStack--;
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	9c 81       	ldd	r25, Y+4	; 0x04
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	9c 83       	std	Y+4, r25	; 0x04
    201e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    2020:	eb 81       	ldd	r30, Y+3	; 0x03
    2022:	fc 81       	ldd	r31, Y+4	; 0x04
    2024:	87 e1       	ldi	r24, 0x17	; 23
    2026:	80 83       	st	Z, r24
	pxTopOfStack--;
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	9c 81       	ldd	r25, Y+4	; 0x04
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	9c 83       	std	Y+4, r25	; 0x04
    2030:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    2032:	eb 81       	ldd	r30, Y+3	; 0x03
    2034:	fc 81       	ldd	r31, Y+4	; 0x04
    2036:	88 e1       	ldi	r24, 0x18	; 24
    2038:	80 83       	st	Z, r24
	pxTopOfStack--;
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	9c 81       	ldd	r25, Y+4	; 0x04
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	9c 83       	std	Y+4, r25	; 0x04
    2042:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    2044:	eb 81       	ldd	r30, Y+3	; 0x03
    2046:	fc 81       	ldd	r31, Y+4	; 0x04
    2048:	89 e1       	ldi	r24, 0x19	; 25
    204a:	80 83       	st	Z, r24
	pxTopOfStack--;
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	9c 81       	ldd	r25, Y+4	; 0x04
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	9c 83       	std	Y+4, r25	; 0x04
    2054:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    2056:	eb 81       	ldd	r30, Y+3	; 0x03
    2058:	fc 81       	ldd	r31, Y+4	; 0x04
    205a:	80 e2       	ldi	r24, 0x20	; 32
    205c:	80 83       	st	Z, r24
	pxTopOfStack--;
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	9c 83       	std	Y+4, r25	; 0x04
    2066:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    2068:	eb 81       	ldd	r30, Y+3	; 0x03
    206a:	fc 81       	ldd	r31, Y+4	; 0x04
    206c:	81 e2       	ldi	r24, 0x21	; 33
    206e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	9c 81       	ldd	r25, Y+4	; 0x04
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	9c 83       	std	Y+4, r25	; 0x04
    2078:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    207a:	eb 81       	ldd	r30, Y+3	; 0x03
    207c:	fc 81       	ldd	r31, Y+4	; 0x04
    207e:	82 e2       	ldi	r24, 0x22	; 34
    2080:	80 83       	st	Z, r24
	pxTopOfStack--;
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	9c 81       	ldd	r25, Y+4	; 0x04
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	9c 83       	std	Y+4, r25	; 0x04
    208a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    208c:	eb 81       	ldd	r30, Y+3	; 0x03
    208e:	fc 81       	ldd	r31, Y+4	; 0x04
    2090:	83 e2       	ldi	r24, 0x23	; 35
    2092:	80 83       	st	Z, r24
	pxTopOfStack--;
    2094:	8b 81       	ldd	r24, Y+3	; 0x03
    2096:	9c 81       	ldd	r25, Y+4	; 0x04
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	9c 83       	std	Y+4, r25	; 0x04
    209c:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
    209e:	8f 81       	ldd	r24, Y+7	; 0x07
    20a0:	98 85       	ldd	r25, Y+8	; 0x08
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	eb 81       	ldd	r30, Y+3	; 0x03
    20aa:	fc 81       	ldd	r31, Y+4	; 0x04
    20ac:	80 83       	st	Z, r24
	pxTopOfStack--;
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	9c 81       	ldd	r25, Y+4	; 0x04
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	9c 83       	std	Y+4, r25	; 0x04
    20b6:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	9a 81       	ldd	r25, Y+2	; 0x02
    20bc:	89 2f       	mov	r24, r25
    20be:	99 27       	eor	r25, r25
    20c0:	9a 83       	std	Y+2, r25	; 0x02
    20c2:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	eb 81       	ldd	r30, Y+3	; 0x03
    20c8:	fc 81       	ldd	r31, Y+4	; 0x04
    20ca:	80 83       	st	Z, r24
	pxTopOfStack--;
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	9c 81       	ldd	r25, Y+4	; 0x04
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	9c 83       	std	Y+4, r25	; 0x04
    20d4:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    20d6:	eb 81       	ldd	r30, Y+3	; 0x03
    20d8:	fc 81       	ldd	r31, Y+4	; 0x04
    20da:	86 e2       	ldi	r24, 0x26	; 38
    20dc:	80 83       	st	Z, r24
	pxTopOfStack--;
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	9c 83       	std	Y+4, r25	; 0x04
    20e6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    20e8:	eb 81       	ldd	r30, Y+3	; 0x03
    20ea:	fc 81       	ldd	r31, Y+4	; 0x04
    20ec:	87 e2       	ldi	r24, 0x27	; 39
    20ee:	80 83       	st	Z, r24
	pxTopOfStack--;
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	9c 83       	std	Y+4, r25	; 0x04
    20f8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    20fa:	eb 81       	ldd	r30, Y+3	; 0x03
    20fc:	fc 81       	ldd	r31, Y+4	; 0x04
    20fe:	88 e2       	ldi	r24, 0x28	; 40
    2100:	80 83       	st	Z, r24
	pxTopOfStack--;
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	9c 81       	ldd	r25, Y+4	; 0x04
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	9c 83       	std	Y+4, r25	; 0x04
    210a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    210c:	eb 81       	ldd	r30, Y+3	; 0x03
    210e:	fc 81       	ldd	r31, Y+4	; 0x04
    2110:	89 e2       	ldi	r24, 0x29	; 41
    2112:	80 83       	st	Z, r24
	pxTopOfStack--;
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	9c 81       	ldd	r25, Y+4	; 0x04
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	9c 83       	std	Y+4, r25	; 0x04
    211c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    211e:	eb 81       	ldd	r30, Y+3	; 0x03
    2120:	fc 81       	ldd	r31, Y+4	; 0x04
    2122:	80 e3       	ldi	r24, 0x30	; 48
    2124:	80 83       	st	Z, r24
	pxTopOfStack--;
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	9c 81       	ldd	r25, Y+4	; 0x04
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	9c 83       	std	Y+4, r25	; 0x04
    212e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    2130:	eb 81       	ldd	r30, Y+3	; 0x03
    2132:	fc 81       	ldd	r31, Y+4	; 0x04
    2134:	81 e3       	ldi	r24, 0x31	; 49
    2136:	80 83       	st	Z, r24
	pxTopOfStack--;
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	9c 81       	ldd	r25, Y+4	; 0x04
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	9c 83       	std	Y+4, r25	; 0x04
    2140:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2146:	28 96       	adiw	r28, 0x08	; 8
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    2160:	0e 94 9e 11 	call	0x233c	; 0x233c <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    2164:	a0 91 11 07 	lds	r26, 0x0711
    2168:	b0 91 12 07 	lds	r27, 0x0712
    216c:	cd 91       	ld	r28, X+
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	dd 91       	ld	r29, X+
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	ff 91       	pop	r31
    2176:	ef 91       	pop	r30
    2178:	df 91       	pop	r29
    217a:	cf 91       	pop	r28
    217c:	bf 91       	pop	r27
    217e:	af 91       	pop	r26
    2180:	9f 91       	pop	r25
    2182:	8f 91       	pop	r24
    2184:	7f 91       	pop	r23
    2186:	6f 91       	pop	r22
    2188:	5f 91       	pop	r21
    218a:	4f 91       	pop	r20
    218c:	3f 91       	pop	r19
    218e:	2f 91       	pop	r18
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	ff 90       	pop	r15
    2196:	ef 90       	pop	r14
    2198:	df 90       	pop	r13
    219a:	cf 90       	pop	r12
    219c:	bf 90       	pop	r11
    219e:	af 90       	pop	r10
    21a0:	9f 90       	pop	r9
    21a2:	8f 90       	pop	r8
    21a4:	7f 90       	pop	r7
    21a6:	6f 90       	pop	r6
    21a8:	5f 90       	pop	r5
    21aa:	4f 90       	pop	r4
    21ac:	3f 90       	pop	r3
    21ae:	2f 90       	pop	r2
    21b0:	1f 90       	pop	r1
    21b2:	0f 90       	pop	r0
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    21b8:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
}
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    21d0:	0f 92       	push	r0
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	0f 92       	push	r0
    21d8:	1f 92       	push	r1
    21da:	11 24       	eor	r1, r1
    21dc:	2f 92       	push	r2
    21de:	3f 92       	push	r3
    21e0:	4f 92       	push	r4
    21e2:	5f 92       	push	r5
    21e4:	6f 92       	push	r6
    21e6:	7f 92       	push	r7
    21e8:	8f 92       	push	r8
    21ea:	9f 92       	push	r9
    21ec:	af 92       	push	r10
    21ee:	bf 92       	push	r11
    21f0:	cf 92       	push	r12
    21f2:	df 92       	push	r13
    21f4:	ef 92       	push	r14
    21f6:	ff 92       	push	r15
    21f8:	0f 93       	push	r16
    21fa:	1f 93       	push	r17
    21fc:	2f 93       	push	r18
    21fe:	3f 93       	push	r19
    2200:	4f 93       	push	r20
    2202:	5f 93       	push	r21
    2204:	6f 93       	push	r22
    2206:	7f 93       	push	r23
    2208:	8f 93       	push	r24
    220a:	9f 93       	push	r25
    220c:	af 93       	push	r26
    220e:	bf 93       	push	r27
    2210:	cf 93       	push	r28
    2212:	df 93       	push	r29
    2214:	ef 93       	push	r30
    2216:	ff 93       	push	r31
    2218:	a0 91 11 07 	lds	r26, 0x0711
    221c:	b0 91 12 07 	lds	r27, 0x0712
    2220:	0d b6       	in	r0, 0x3d	; 61
    2222:	0d 92       	st	X+, r0
    2224:	0e b6       	in	r0, 0x3e	; 62
    2226:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2228:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    222c:	a0 91 11 07 	lds	r26, 0x0711
    2230:	b0 91 12 07 	lds	r27, 0x0712
    2234:	cd 91       	ld	r28, X+
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	dd 91       	ld	r29, X+
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	ff 91       	pop	r31
    223e:	ef 91       	pop	r30
    2240:	df 91       	pop	r29
    2242:	cf 91       	pop	r28
    2244:	bf 91       	pop	r27
    2246:	af 91       	pop	r26
    2248:	9f 91       	pop	r25
    224a:	8f 91       	pop	r24
    224c:	7f 91       	pop	r23
    224e:	6f 91       	pop	r22
    2250:	5f 91       	pop	r21
    2252:	4f 91       	pop	r20
    2254:	3f 91       	pop	r19
    2256:	2f 91       	pop	r18
    2258:	1f 91       	pop	r17
    225a:	0f 91       	pop	r16
    225c:	ff 90       	pop	r15
    225e:	ef 90       	pop	r14
    2260:	df 90       	pop	r13
    2262:	cf 90       	pop	r12
    2264:	bf 90       	pop	r11
    2266:	af 90       	pop	r10
    2268:	9f 90       	pop	r9
    226a:	8f 90       	pop	r8
    226c:	7f 90       	pop	r7
    226e:	6f 90       	pop	r6
    2270:	5f 90       	pop	r5
    2272:	4f 90       	pop	r4
    2274:	3f 90       	pop	r3
    2276:	2f 90       	pop	r2
    2278:	1f 90       	pop	r1
    227a:	0f 90       	pop	r0
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2280:	08 95       	ret

00002282 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2282:	0f 92       	push	r0
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	f8 94       	cli
    2288:	0f 92       	push	r0
    228a:	1f 92       	push	r1
    228c:	11 24       	eor	r1, r1
    228e:	2f 92       	push	r2
    2290:	3f 92       	push	r3
    2292:	4f 92       	push	r4
    2294:	5f 92       	push	r5
    2296:	6f 92       	push	r6
    2298:	7f 92       	push	r7
    229a:	8f 92       	push	r8
    229c:	9f 92       	push	r9
    229e:	af 92       	push	r10
    22a0:	bf 92       	push	r11
    22a2:	cf 92       	push	r12
    22a4:	df 92       	push	r13
    22a6:	ef 92       	push	r14
    22a8:	ff 92       	push	r15
    22aa:	0f 93       	push	r16
    22ac:	1f 93       	push	r17
    22ae:	2f 93       	push	r18
    22b0:	3f 93       	push	r19
    22b2:	4f 93       	push	r20
    22b4:	5f 93       	push	r21
    22b6:	6f 93       	push	r22
    22b8:	7f 93       	push	r23
    22ba:	8f 93       	push	r24
    22bc:	9f 93       	push	r25
    22be:	af 93       	push	r26
    22c0:	bf 93       	push	r27
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	ef 93       	push	r30
    22c8:	ff 93       	push	r31
    22ca:	a0 91 11 07 	lds	r26, 0x0711
    22ce:	b0 91 12 07 	lds	r27, 0x0712
    22d2:	0d b6       	in	r0, 0x3d	; 61
    22d4:	0d 92       	st	X+, r0
    22d6:	0e b6       	in	r0, 0x3e	; 62
    22d8:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    22da:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <xTaskIncrementTick>
    22de:	88 23       	and	r24, r24
    22e0:	11 f0       	breq	.+4      	; 0x22e6 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    22e2:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    22e6:	a0 91 11 07 	lds	r26, 0x0711
    22ea:	b0 91 12 07 	lds	r27, 0x0712
    22ee:	cd 91       	ld	r28, X+
    22f0:	cd bf       	out	0x3d, r28	; 61
    22f2:	dd 91       	ld	r29, X+
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	ff 91       	pop	r31
    22f8:	ef 91       	pop	r30
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	bf 91       	pop	r27
    2300:	af 91       	pop	r26
    2302:	9f 91       	pop	r25
    2304:	8f 91       	pop	r24
    2306:	7f 91       	pop	r23
    2308:	6f 91       	pop	r22
    230a:	5f 91       	pop	r21
    230c:	4f 91       	pop	r20
    230e:	3f 91       	pop	r19
    2310:	2f 91       	pop	r18
    2312:	1f 91       	pop	r17
    2314:	0f 91       	pop	r16
    2316:	ff 90       	pop	r15
    2318:	ef 90       	pop	r14
    231a:	df 90       	pop	r13
    231c:	cf 90       	pop	r12
    231e:	bf 90       	pop	r11
    2320:	af 90       	pop	r10
    2322:	9f 90       	pop	r9
    2324:	8f 90       	pop	r8
    2326:	7f 90       	pop	r7
    2328:	6f 90       	pop	r6
    232a:	5f 90       	pop	r5
    232c:	4f 90       	pop	r4
    232e:	3f 90       	pop	r3
    2330:	2f 90       	pop	r2
    2332:	1f 90       	pop	r1
    2334:	0f 90       	pop	r0
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	0f 90       	pop	r0

	asm volatile ( "ret" );
    233a:	08 95       	ret

0000233c <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	00 d0       	rcall	.+0      	; 0x2342 <prvSetupTimerInterrupt+0x6>
    2342:	00 d0       	rcall	.+0      	; 0x2344 <prvSetupTimerInterrupt+0x8>
    2344:	00 d0       	rcall	.+0      	; 0x2346 <prvSetupTimerInterrupt+0xa>
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    234a:	80 e4       	ldi	r24, 0x40	; 64
    234c:	9f e1       	ldi	r25, 0x1F	; 31
    234e:	a0 e0       	ldi	r26, 0x00	; 0
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	8b 83       	std	Y+3, r24	; 0x03
    2354:	9c 83       	std	Y+4, r25	; 0x04
    2356:	ad 83       	std	Y+5, r26	; 0x05
    2358:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	9c 81       	ldd	r25, Y+4	; 0x04
    235e:	ad 81       	ldd	r26, Y+5	; 0x05
    2360:	be 81       	ldd	r27, Y+6	; 0x06
    2362:	68 94       	set
    2364:	15 f8       	bld	r1, 5
    2366:	b6 95       	lsr	r27
    2368:	a7 95       	ror	r26
    236a:	97 95       	ror	r25
    236c:	87 95       	ror	r24
    236e:	16 94       	lsr	r1
    2370:	d1 f7       	brne	.-12     	; 0x2366 <prvSetupTimerInterrupt+0x2a>
    2372:	8b 83       	std	Y+3, r24	; 0x03
    2374:	9c 83       	std	Y+4, r25	; 0x04
    2376:	ad 83       	std	Y+5, r26	; 0x05
    2378:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    237a:	8b 81       	ldd	r24, Y+3	; 0x03
    237c:	9c 81       	ldd	r25, Y+4	; 0x04
    237e:	ad 81       	ldd	r26, Y+5	; 0x05
    2380:	be 81       	ldd	r27, Y+6	; 0x06
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	a1 09       	sbc	r26, r1
    2386:	b1 09       	sbc	r27, r1
    2388:	8b 83       	std	Y+3, r24	; 0x03
    238a:	9c 83       	std	Y+4, r25	; 0x04
    238c:	ad 83       	std	Y+5, r26	; 0x05
    238e:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	9c 81       	ldd	r25, Y+4	; 0x04
    2398:	ad 81       	ldd	r26, Y+5	; 0x05
    239a:	be 81       	ldd	r27, Y+6	; 0x06
    239c:	89 2f       	mov	r24, r25
    239e:	9a 2f       	mov	r25, r26
    23a0:	ab 2f       	mov	r26, r27
    23a2:	bb 27       	eor	r27, r27
    23a4:	8b 83       	std	Y+3, r24	; 0x03
    23a6:	9c 83       	std	Y+4, r25	; 0x04
    23a8:	ad 83       	std	Y+5, r26	; 0x05
    23aa:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    23b0:	eb e4       	ldi	r30, 0x4B	; 75
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    23b8:	ea e4       	ldi	r30, 0x4A	; 74
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    23c0:	8b e0       	ldi	r24, 0x0B	; 11
    23c2:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    23c4:	ee e4       	ldi	r30, 0x4E	; 78
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    23cc:	e9 e5       	ldi	r30, 0x59	; 89
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	80 61       	ori	r24, 0x10	; 16
    23d8:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    23da:	e9 e5       	ldi	r30, 0x59	; 89
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	80 83       	st	Z, r24
}
    23e2:	26 96       	adiw	r28, 0x06	; 6
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    23f4:	0e 94 41 11 	call	0x2282	; 0x2282 <vPortYieldFromTick>
		asm volatile ( "reti" );
    23f8:	18 95       	reti

000023fa <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	00 d0       	rcall	.+0      	; 0x2400 <xQueueGenericReset+0x6>
    2400:	00 d0       	rcall	.+0      	; 0x2402 <xQueueGenericReset+0x8>
    2402:	0f 92       	push	r0
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	9c 83       	std	Y+4, r25	; 0x04
    240a:	8b 83       	std	Y+3, r24	; 0x03
    240c:	6d 83       	std	Y+5, r22	; 0x05
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	9c 81       	ldd	r25, Y+4	; 0x04
    2412:	9a 83       	std	Y+2, r25	; 0x02
    2414:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    241c:	e9 81       	ldd	r30, Y+1	; 0x01
    241e:	fa 81       	ldd	r31, Y+2	; 0x02
    2420:	40 81       	ld	r20, Z
    2422:	51 81       	ldd	r21, Z+1	; 0x01
    2424:	e9 81       	ldd	r30, Y+1	; 0x01
    2426:	fa 81       	ldd	r31, Y+2	; 0x02
    2428:	83 8d       	ldd	r24, Z+27	; 0x1b
    242a:	28 2f       	mov	r18, r24
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	e9 81       	ldd	r30, Y+1	; 0x01
    2430:	fa 81       	ldd	r31, Y+2	; 0x02
    2432:	84 8d       	ldd	r24, Z+28	; 0x1c
    2434:	88 2f       	mov	r24, r24
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	bc 01       	movw	r22, r24
    243a:	26 9f       	mul	r18, r22
    243c:	c0 01       	movw	r24, r0
    243e:	27 9f       	mul	r18, r23
    2440:	90 0d       	add	r25, r0
    2442:	36 9f       	mul	r19, r22
    2444:	90 0d       	add	r25, r0
    2446:	11 24       	eor	r1, r1
    2448:	84 0f       	add	r24, r20
    244a:	95 1f       	adc	r25, r21
    244c:	e9 81       	ldd	r30, Y+1	; 0x01
    244e:	fa 81       	ldd	r31, Y+2	; 0x02
    2450:	93 83       	std	Z+3, r25	; 0x03
    2452:	82 83       	std	Z+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    2454:	e9 81       	ldd	r30, Y+1	; 0x01
    2456:	fa 81       	ldd	r31, Y+2	; 0x02
    2458:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    245a:	e9 81       	ldd	r30, Y+1	; 0x01
    245c:	fa 81       	ldd	r31, Y+2	; 0x02
    245e:	80 81       	ld	r24, Z
    2460:	91 81       	ldd	r25, Z+1	; 0x01
    2462:	e9 81       	ldd	r30, Y+1	; 0x01
    2464:	fa 81       	ldd	r31, Y+2	; 0x02
    2466:	95 83       	std	Z+5, r25	; 0x05
    2468:	84 83       	std	Z+4, r24	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    246a:	e9 81       	ldd	r30, Y+1	; 0x01
    246c:	fa 81       	ldd	r31, Y+2	; 0x02
    246e:	40 81       	ld	r20, Z
    2470:	51 81       	ldd	r21, Z+1	; 0x01
    2472:	e9 81       	ldd	r30, Y+1	; 0x01
    2474:	fa 81       	ldd	r31, Y+2	; 0x02
    2476:	83 8d       	ldd	r24, Z+27	; 0x1b
    2478:	88 2f       	mov	r24, r24
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	9c 01       	movw	r18, r24
    247e:	21 50       	subi	r18, 0x01	; 1
    2480:	30 40       	sbci	r19, 0x00	; 0
    2482:	e9 81       	ldd	r30, Y+1	; 0x01
    2484:	fa 81       	ldd	r31, Y+2	; 0x02
    2486:	84 8d       	ldd	r24, Z+28	; 0x1c
    2488:	88 2f       	mov	r24, r24
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	bc 01       	movw	r22, r24
    248e:	26 9f       	mul	r18, r22
    2490:	c0 01       	movw	r24, r0
    2492:	27 9f       	mul	r18, r23
    2494:	90 0d       	add	r25, r0
    2496:	36 9f       	mul	r19, r22
    2498:	90 0d       	add	r25, r0
    249a:	11 24       	eor	r1, r1
    249c:	84 0f       	add	r24, r20
    249e:	95 1f       	adc	r25, r21
    24a0:	e9 81       	ldd	r30, Y+1	; 0x01
    24a2:	fa 81       	ldd	r31, Y+2	; 0x02
    24a4:	97 83       	std	Z+7, r25	; 0x07
    24a6:	86 83       	std	Z+6, r24	; 0x06
		pxQueue->xRxLock = queueUNLOCKED;
    24a8:	e9 81       	ldd	r30, Y+1	; 0x01
    24aa:	fa 81       	ldd	r31, Y+2	; 0x02
    24ac:	8f ef       	ldi	r24, 0xFF	; 255
    24ae:	85 8f       	std	Z+29, r24	; 0x1d
		pxQueue->xTxLock = queueUNLOCKED;
    24b0:	e9 81       	ldd	r30, Y+1	; 0x01
    24b2:	fa 81       	ldd	r31, Y+2	; 0x02
    24b4:	8f ef       	ldi	r24, 0xFF	; 255
    24b6:	86 8f       	std	Z+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    24b8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ba:	88 23       	and	r24, r24
    24bc:	79 f4       	brne	.+30     	; 0x24dc <xQueueGenericReset+0xe2>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    24be:	e9 81       	ldd	r30, Y+1	; 0x01
    24c0:	fa 81       	ldd	r31, Y+2	; 0x02
    24c2:	80 85       	ldd	r24, Z+8	; 0x08
    24c4:	88 23       	and	r24, r24
    24c6:	a1 f0       	breq	.+40     	; 0x24f0 <xQueueGenericReset+0xf6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	9a 81       	ldd	r25, Y+2	; 0x02
    24cc:	08 96       	adiw	r24, 0x08	; 8
    24ce:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <xTaskRemoveFromEventList>
    24d2:	81 30       	cpi	r24, 0x01	; 1
    24d4:	69 f4       	brne	.+26     	; 0x24f0 <xQueueGenericReset+0xf6>
				{
					queueYIELD_IF_USING_PREEMPTION();
    24d6:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vPortYield>
    24da:	0a c0       	rjmp	.+20     	; 0x24f0 <xQueueGenericReset+0xf6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	9a 81       	ldd	r25, Y+2	; 0x02
    24e0:	08 96       	adiw	r24, 0x08	; 8
    24e2:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ea:	41 96       	adiw	r24, 0x11	; 17
    24ec:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    24f0:	0f 90       	pop	r0
    24f2:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
}
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	29 97       	sbiw	r28, 0x09	; 9
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	cd bf       	out	0x3d, r28	; 61
    251a:	8f 83       	std	Y+7, r24	; 0x07
    251c:	68 87       	std	Y+8, r22	; 0x08
    251e:	49 87       	std	Y+9, r20	; 0x09
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
    2520:	1a 82       	std	Y+2, r1	; 0x02
    2522:	19 82       	std	Y+1, r1	; 0x01
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    2524:	8f 81       	ldd	r24, Y+7	; 0x07
    2526:	88 23       	and	r24, r24
    2528:	09 f4       	brne	.+2      	; 0x252c <xQueueGenericCreate+0x26>
    252a:	3f c0       	rjmp	.+126    	; 0x25aa <xQueueGenericCreate+0xa4>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    252c:	8f e1       	ldi	r24, 0x1F	; 31
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	0e 94 a5 0c 	call	0x194a	; 0x194a <pvPortMalloc>
    2534:	9e 83       	std	Y+6, r25	; 0x06
    2536:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    2538:	8d 81       	ldd	r24, Y+5	; 0x05
    253a:	9e 81       	ldd	r25, Y+6	; 0x06
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	a9 f1       	breq	.+106    	; 0x25aa <xQueueGenericCreate+0xa4>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2540:	8f 81       	ldd	r24, Y+7	; 0x07
    2542:	28 2f       	mov	r18, r24
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	88 85       	ldd	r24, Y+8	; 0x08
    2548:	88 2f       	mov	r24, r24
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	ac 01       	movw	r20, r24
    254e:	24 9f       	mul	r18, r20
    2550:	c0 01       	movw	r24, r0
    2552:	25 9f       	mul	r18, r21
    2554:	90 0d       	add	r25, r0
    2556:	34 9f       	mul	r19, r20
    2558:	90 0d       	add	r25, r0
    255a:	11 24       	eor	r1, r1
    255c:	01 96       	adiw	r24, 0x01	; 1
    255e:	9c 83       	std	Y+4, r25	; 0x04
    2560:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	9c 81       	ldd	r25, Y+4	; 0x04
    2566:	0e 94 a5 0c 	call	0x194a	; 0x194a <pvPortMalloc>
    256a:	ed 81       	ldd	r30, Y+5	; 0x05
    256c:	fe 81       	ldd	r31, Y+6	; 0x06
    256e:	91 83       	std	Z+1, r25	; 0x01
    2570:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    2572:	ed 81       	ldd	r30, Y+5	; 0x05
    2574:	fe 81       	ldd	r31, Y+6	; 0x06
    2576:	80 81       	ld	r24, Z
    2578:	91 81       	ldd	r25, Z+1	; 0x01
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	91 f0       	breq	.+36     	; 0x25a2 <xQueueGenericCreate+0x9c>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    257e:	ed 81       	ldd	r30, Y+5	; 0x05
    2580:	fe 81       	ldd	r31, Y+6	; 0x06
    2582:	8f 81       	ldd	r24, Y+7	; 0x07
    2584:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    2586:	ed 81       	ldd	r30, Y+5	; 0x05
    2588:	fe 81       	ldd	r31, Y+6	; 0x06
    258a:	88 85       	ldd	r24, Y+8	; 0x08
    258c:	84 8f       	std	Z+28, r24	; 0x1c
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    258e:	8d 81       	ldd	r24, Y+5	; 0x05
    2590:	9e 81       	ldd	r25, Y+6	; 0x06
    2592:	61 e0       	ldi	r22, 0x01	; 1
    2594:	0e 94 fd 11 	call	0x23fa	; 0x23fa <xQueueGenericReset>
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2598:	8d 81       	ldd	r24, Y+5	; 0x05
    259a:	9e 81       	ldd	r25, Y+6	; 0x06
    259c:	9a 83       	std	Y+2, r25	; 0x02
    259e:	89 83       	std	Y+1, r24	; 0x01
    25a0:	04 c0       	rjmp	.+8      	; 0x25aa <xQueueGenericCreate+0xa4>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    25a2:	8d 81       	ldd	r24, Y+5	; 0x05
    25a4:	9e 81       	ldd	r25, Y+6	; 0x06
    25a6:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <vPortFree>
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );

	return xReturn;
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	9a 81       	ldd	r25, Y+2	; 0x02
}
    25ae:	29 96       	adiw	r28, 0x09	; 9
    25b0:	0f b6       	in	r0, 0x3f	; 63
    25b2:	f8 94       	cli
    25b4:	de bf       	out	0x3e, r29	; 62
    25b6:	0f be       	out	0x3f, r0	; 63
    25b8:	cd bf       	out	0x3d, r28	; 61
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <xQueueCreateMutex+0x6>
    25c6:	0f 92       	push	r0
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	8b 83       	std	Y+3, r24	; 0x03
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    25ce:	8f e1       	ldi	r24, 0x1F	; 31
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	0e 94 a5 0c 	call	0x194a	; 0x194a <pvPortMalloc>
    25d6:	9a 83       	std	Y+2, r25	; 0x02
    25d8:	89 83       	std	Y+1, r24	; 0x01
		if( pxNewQueue != NULL )
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	9a 81       	ldd	r25, Y+2	; 0x02
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	a9 f1       	breq	.+106    	; 0x264c <xQueueCreateMutex+0x8c>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    25e2:	e9 81       	ldd	r30, Y+1	; 0x01
    25e4:	fa 81       	ldd	r31, Y+2	; 0x02
    25e6:	13 82       	std	Z+3, r1	; 0x03
    25e8:	12 82       	std	Z+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    25ea:	e9 81       	ldd	r30, Y+1	; 0x01
    25ec:	fa 81       	ldd	r31, Y+2	; 0x02
    25ee:	11 82       	std	Z+1, r1	; 0x01
    25f0:	10 82       	st	Z, r1

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    25f2:	e9 81       	ldd	r30, Y+1	; 0x01
    25f4:	fa 81       	ldd	r31, Y+2	; 0x02
    25f6:	15 82       	std	Z+5, r1	; 0x05
    25f8:	14 82       	std	Z+4, r1	; 0x04
			pxNewQueue->u.pcReadFrom = NULL;
    25fa:	e9 81       	ldd	r30, Y+1	; 0x01
    25fc:	fa 81       	ldd	r31, Y+2	; 0x02
    25fe:	17 82       	std	Z+7, r1	; 0x07
    2600:	16 82       	std	Z+6, r1	; 0x06

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    2602:	e9 81       	ldd	r30, Y+1	; 0x01
    2604:	fa 81       	ldd	r31, Y+2	; 0x02
    2606:	12 8e       	std	Z+26, r1	; 0x1a
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
    2608:	e9 81       	ldd	r30, Y+1	; 0x01
    260a:	fa 81       	ldd	r31, Y+2	; 0x02
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	83 8f       	std	Z+27, r24	; 0x1b
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
    2610:	e9 81       	ldd	r30, Y+1	; 0x01
    2612:	fa 81       	ldd	r31, Y+2	; 0x02
    2614:	14 8e       	std	Z+28, r1	; 0x1c
			pxNewQueue->xRxLock = queueUNLOCKED;
    2616:	e9 81       	ldd	r30, Y+1	; 0x01
    2618:	fa 81       	ldd	r31, Y+2	; 0x02
    261a:	8f ef       	ldi	r24, 0xFF	; 255
    261c:	85 8f       	std	Z+29, r24	; 0x1d
			pxNewQueue->xTxLock = queueUNLOCKED;
    261e:	e9 81       	ldd	r30, Y+1	; 0x01
    2620:	fa 81       	ldd	r31, Y+2	; 0x02
    2622:	8f ef       	ldi	r24, 0xFF	; 255
    2624:	86 8f       	std	Z+30, r24	; 0x1e
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	9a 81       	ldd	r25, Y+2	; 0x02
    262a:	08 96       	adiw	r24, 0x08	; 8
    262c:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	9a 81       	ldd	r25, Y+2	; 0x02
    2634:	41 96       	adiw	r24, 0x11	; 17
    2636:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	9a 81       	ldd	r25, Y+2	; 0x02
    263e:	60 e0       	ldi	r22, 0x00	; 0
    2640:	70 e0       	ldi	r23, 0x00	; 0
    2642:	40 e0       	ldi	r20, 0x00	; 0
    2644:	50 e0       	ldi	r21, 0x00	; 0
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	0e 94 4e 13 	call	0x269c	; 0x269c <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	cf 91       	pop	r28
    2658:	df 91       	pop	r29
    265a:	08 95       	ret

0000265c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
    265c:	df 93       	push	r29
    265e:	cf 93       	push	r28
    2660:	00 d0       	rcall	.+0      	; 0x2662 <xQueueCreateCountingSemaphore+0x6>
    2662:	00 d0       	rcall	.+0      	; 0x2664 <xQueueCreateCountingSemaphore+0x8>
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	8b 83       	std	Y+3, r24	; 0x03
    266a:	6c 83       	std	Y+4, r22	; 0x04
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	60 e0       	ldi	r22, 0x00	; 0
    2670:	42 e0       	ldi	r20, 0x02	; 2
    2672:	0e 94 83 12 	call	0x2506	; 0x2506 <xQueueGenericCreate>
    2676:	9a 83       	std	Y+2, r25	; 0x02
    2678:	89 83       	std	Y+1, r24	; 0x01

		if( xHandle != NULL )
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	9a 81       	ldd	r25, Y+2	; 0x02
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	21 f0       	breq	.+8      	; 0x268a <xQueueCreateCountingSemaphore+0x2e>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
    2682:	e9 81       	ldd	r30, Y+1	; 0x01
    2684:	fa 81       	ldd	r31, Y+2	; 0x02
    2686:	8c 81       	ldd	r24, Y+4	; 0x04
    2688:	82 8f       	std	Z+26, r24	; 0x1a
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
		return xHandle;
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	2f 97       	sbiw	r28, 0x0f	; 15
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	99 87       	std	Y+9, r25	; 0x09
    26b2:	88 87       	std	Y+8, r24	; 0x08
    26b4:	7b 87       	std	Y+11, r23	; 0x0b
    26b6:	6a 87       	std	Y+10, r22	; 0x0a
    26b8:	5d 87       	std	Y+13, r21	; 0x0d
    26ba:	4c 87       	std	Y+12, r20	; 0x0c
    26bc:	2e 87       	std	Y+14, r18	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    26be:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    26c0:	88 85       	ldd	r24, Y+8	; 0x08
    26c2:	99 85       	ldd	r25, Y+9	; 0x09
    26c4:	9a 83       	std	Y+2, r25	; 0x02
    26c6:	89 83       	std	Y+1, r24	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    26ce:	e9 81       	ldd	r30, Y+1	; 0x01
    26d0:	fa 81       	ldd	r31, Y+2	; 0x02
    26d2:	92 8d       	ldd	r25, Z+26	; 0x1a
    26d4:	e9 81       	ldd	r30, Y+1	; 0x01
    26d6:	fa 81       	ldd	r31, Y+2	; 0x02
    26d8:	83 8d       	ldd	r24, Z+27	; 0x1b
    26da:	98 17       	cp	r25, r24
    26dc:	18 f0       	brcs	.+6      	; 0x26e4 <xQueueGenericSend+0x48>
    26de:	8e 85       	ldd	r24, Y+14	; 0x0e
    26e0:	82 30       	cpi	r24, 0x02	; 2
    26e2:	11 f5       	brne	.+68     	; 0x2728 <xQueueGenericSend+0x8c>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	9a 81       	ldd	r25, Y+2	; 0x02
    26e8:	2a 85       	ldd	r18, Y+10	; 0x0a
    26ea:	3b 85       	ldd	r19, Y+11	; 0x0b
    26ec:	b9 01       	movw	r22, r18
    26ee:	4e 85       	ldd	r20, Y+14	; 0x0e
    26f0:	0e 94 40 16 	call	0x2c80	; 0x2c80 <prvCopyDataToQueue>
    26f4:	8b 83       	std	Y+3, r24	; 0x03
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    26f6:	e9 81       	ldd	r30, Y+1	; 0x01
    26f8:	fa 81       	ldd	r31, Y+2	; 0x02
    26fa:	81 89       	ldd	r24, Z+17	; 0x11
    26fc:	88 23       	and	r24, r24
    26fe:	51 f0       	breq	.+20     	; 0x2714 <xQueueGenericSend+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	9a 81       	ldd	r25, Y+2	; 0x02
    2704:	41 96       	adiw	r24, 0x11	; 17
    2706:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <xTaskRemoveFromEventList>
    270a:	81 30       	cpi	r24, 0x01	; 1
    270c:	41 f4       	brne	.+16     	; 0x271e <xQueueGenericSend+0x82>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    270e:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vPortYield>
    2712:	05 c0       	rjmp	.+10     	; 0x271e <xQueueGenericSend+0x82>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	88 23       	and	r24, r24
    2718:	11 f0       	breq	.+4      	; 0x271e <xQueueGenericSend+0x82>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    271a:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    271e:	0f 90       	pop	r0
    2720:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	8f 87       	std	Y+15, r24	; 0x0f
    2726:	5c c0       	rjmp	.+184    	; 0x27e0 <xQueueGenericSend+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2728:	8c 85       	ldd	r24, Y+12	; 0x0c
    272a:	9d 85       	ldd	r25, Y+13	; 0x0d
    272c:	00 97       	sbiw	r24, 0x00	; 0
    272e:	21 f4       	brne	.+8      	; 0x2738 <xQueueGenericSend+0x9c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2730:	0f 90       	pop	r0
    2732:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2734:	1f 86       	std	Y+15, r1	; 0x0f
    2736:	54 c0       	rjmp	.+168    	; 0x27e0 <xQueueGenericSend+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    2738:	8c 81       	ldd	r24, Y+4	; 0x04
    273a:	88 23       	and	r24, r24
    273c:	31 f4       	brne	.+12     	; 0x274a <xQueueGenericSend+0xae>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    273e:	ce 01       	movw	r24, r28
    2740:	05 96       	adiw	r24, 0x05	; 5
    2742:	0e 94 3a 20 	call	0x4074	; 0x4074 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    274a:	0f 90       	pop	r0
    274c:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    274e:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	0f 92       	push	r0
    2758:	e9 81       	ldd	r30, Y+1	; 0x01
    275a:	fa 81       	ldd	r31, Y+2	; 0x02
    275c:	85 8d       	ldd	r24, Z+29	; 0x1d
    275e:	8f 3f       	cpi	r24, 0xFF	; 255
    2760:	19 f4       	brne	.+6      	; 0x2768 <xQueueGenericSend+0xcc>
    2762:	e9 81       	ldd	r30, Y+1	; 0x01
    2764:	fa 81       	ldd	r31, Y+2	; 0x02
    2766:	15 8e       	std	Z+29, r1	; 0x1d
    2768:	e9 81       	ldd	r30, Y+1	; 0x01
    276a:	fa 81       	ldd	r31, Y+2	; 0x02
    276c:	86 8d       	ldd	r24, Z+30	; 0x1e
    276e:	8f 3f       	cpi	r24, 0xFF	; 255
    2770:	19 f4       	brne	.+6      	; 0x2778 <xQueueGenericSend+0xdc>
    2772:	e9 81       	ldd	r30, Y+1	; 0x01
    2774:	fa 81       	ldd	r31, Y+2	; 0x02
    2776:	16 8e       	std	Z+30, r1	; 0x1e
    2778:	0f 90       	pop	r0
    277a:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    277c:	ce 01       	movw	r24, r28
    277e:	05 96       	adiw	r24, 0x05	; 5
    2780:	9e 01       	movw	r18, r28
    2782:	24 5f       	subi	r18, 0xF4	; 244
    2784:	3f 4f       	sbci	r19, 0xFF	; 255
    2786:	b9 01       	movw	r22, r18
    2788:	0e 94 53 20 	call	0x40a6	; 0x40a6 <xTaskCheckForTimeOut>
    278c:	88 23       	and	r24, r24
    278e:	09 f5       	brne	.+66     	; 0x27d2 <xQueueGenericSend+0x136>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	9a 81       	ldd	r25, Y+2	; 0x02
    2794:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <prvIsQueueFull>
    2798:	88 23       	and	r24, r24
    279a:	a1 f0       	breq	.+40     	; 0x27c4 <xQueueGenericSend+0x128>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	9a 81       	ldd	r25, Y+2	; 0x02
    27a0:	08 96       	adiw	r24, 0x08	; 8
    27a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    27a4:	3d 85       	ldd	r19, Y+13	; 0x0d
    27a6:	b9 01       	movw	r22, r18
    27a8:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	9a 81       	ldd	r25, Y+2	; 0x02
    27b0:	0e 94 40 17 	call	0x2e80	; 0x2e80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    27b4:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <xTaskResumeAll>
    27b8:	88 23       	and	r24, r24
    27ba:	09 f0       	breq	.+2      	; 0x27be <xQueueGenericSend+0x122>
    27bc:	85 cf       	rjmp	.-246    	; 0x26c8 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
    27be:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vPortYield>
    27c2:	82 cf       	rjmp	.-252    	; 0x26c8 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	9a 81       	ldd	r25, Y+2	; 0x02
    27c8:	0e 94 40 17 	call	0x2e80	; 0x2e80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    27cc:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <xTaskResumeAll>
    27d0:	7b cf       	rjmp	.-266    	; 0x26c8 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	9a 81       	ldd	r25, Y+2	; 0x02
    27d6:	0e 94 40 17 	call	0x2e80	; 0x2e80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    27da:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    27de:	1f 86       	std	Y+15, r1	; 0x0f
    27e0:	8f 85       	ldd	r24, Y+15	; 0x0f
		}
	}
}
    27e2:	2f 96       	adiw	r28, 0x0f	; 15
    27e4:	0f b6       	in	r0, 0x3f	; 63
    27e6:	f8 94       	cli
    27e8:	de bf       	out	0x3e, r29	; 62
    27ea:	0f be       	out	0x3f, r0	; 63
    27ec:	cd bf       	out	0x3d, r28	; 61
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
    27fc:	2b 97       	sbiw	r28, 0x0b	; 11
    27fe:	0f b6       	in	r0, 0x3f	; 63
    2800:	f8 94       	cli
    2802:	de bf       	out	0x3e, r29	; 62
    2804:	0f be       	out	0x3f, r0	; 63
    2806:	cd bf       	out	0x3d, r28	; 61
    2808:	9e 83       	std	Y+6, r25	; 0x06
    280a:	8d 83       	std	Y+5, r24	; 0x05
    280c:	78 87       	std	Y+8, r23	; 0x08
    280e:	6f 83       	std	Y+7, r22	; 0x07
    2810:	5a 87       	std	Y+10, r21	; 0x0a
    2812:	49 87       	std	Y+9, r20	; 0x09
    2814:	2b 87       	std	Y+11, r18	; 0x0b
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2816:	8d 81       	ldd	r24, Y+5	; 0x05
    2818:	9e 81       	ldd	r25, Y+6	; 0x06
    281a:	9a 83       	std	Y+2, r25	; 0x02
    281c:	89 83       	std	Y+1, r24	; 0x01
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    281e:	1b 82       	std	Y+3, r1	; 0x03
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2820:	e9 81       	ldd	r30, Y+1	; 0x01
    2822:	fa 81       	ldd	r31, Y+2	; 0x02
    2824:	92 8d       	ldd	r25, Z+26	; 0x1a
    2826:	e9 81       	ldd	r30, Y+1	; 0x01
    2828:	fa 81       	ldd	r31, Y+2	; 0x02
    282a:	83 8d       	ldd	r24, Z+27	; 0x1b
    282c:	98 17       	cp	r25, r24
    282e:	18 f0       	brcs	.+6      	; 0x2836 <xQueueGenericSendFromISR+0x42>
    2830:	8b 85       	ldd	r24, Y+11	; 0x0b
    2832:	82 30       	cpi	r24, 0x02	; 2
    2834:	b1 f5       	brne	.+108    	; 0x28a2 <xQueueGenericSendFromISR+0xae>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	9a 81       	ldd	r25, Y+2	; 0x02
    283a:	2f 81       	ldd	r18, Y+7	; 0x07
    283c:	38 85       	ldd	r19, Y+8	; 0x08
    283e:	b9 01       	movw	r22, r18
    2840:	4b 85       	ldd	r20, Y+11	; 0x0b
    2842:	0e 94 40 16 	call	0x2c80	; 0x2c80 <prvCopyDataToQueue>
    2846:	88 23       	and	r24, r24
    2848:	41 f0       	breq	.+16     	; 0x285a <xQueueGenericSendFromISR+0x66>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
    284a:	89 85       	ldd	r24, Y+9	; 0x09
    284c:	9a 85       	ldd	r25, Y+10	; 0x0a
    284e:	00 97       	sbiw	r24, 0x00	; 0
    2850:	21 f0       	breq	.+8      	; 0x285a <xQueueGenericSendFromISR+0x66>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
    2852:	e9 85       	ldd	r30, Y+9	; 0x09
    2854:	fa 85       	ldd	r31, Y+10	; 0x0a
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	80 83       	st	Z, r24
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    285a:	e9 81       	ldd	r30, Y+1	; 0x01
    285c:	fa 81       	ldd	r31, Y+2	; 0x02
    285e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2860:	8f 3f       	cpi	r24, 0xFF	; 255
    2862:	a9 f4       	brne	.+42     	; 0x288e <xQueueGenericSendFromISR+0x9a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2864:	e9 81       	ldd	r30, Y+1	; 0x01
    2866:	fa 81       	ldd	r31, Y+2	; 0x02
    2868:	81 89       	ldd	r24, Z+17	; 0x11
    286a:	88 23       	and	r24, r24
    286c:	b9 f0       	breq	.+46     	; 0x289c <xQueueGenericSendFromISR+0xa8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	9a 81       	ldd	r25, Y+2	; 0x02
    2872:	41 96       	adiw	r24, 0x11	; 17
    2874:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <xTaskRemoveFromEventList>
    2878:	88 23       	and	r24, r24
    287a:	81 f0       	breq	.+32     	; 0x289c <xQueueGenericSendFromISR+0xa8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    287c:	89 85       	ldd	r24, Y+9	; 0x09
    287e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	61 f0       	breq	.+24     	; 0x289c <xQueueGenericSendFromISR+0xa8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2884:	e9 85       	ldd	r30, Y+9	; 0x09
    2886:	fa 85       	ldd	r31, Y+10	; 0x0a
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	80 83       	st	Z, r24
    288c:	07 c0       	rjmp	.+14     	; 0x289c <xQueueGenericSendFromISR+0xa8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    288e:	e9 81       	ldd	r30, Y+1	; 0x01
    2890:	fa 81       	ldd	r31, Y+2	; 0x02
    2892:	86 8d       	ldd	r24, Z+30	; 0x1e
    2894:	8f 5f       	subi	r24, 0xFF	; 255
    2896:	e9 81       	ldd	r30, Y+1	; 0x01
    2898:	fa 81       	ldd	r31, Y+2	; 0x02
    289a:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	8c 83       	std	Y+4, r24	; 0x04
    28a0:	01 c0       	rjmp	.+2      	; 0x28a4 <xQueueGenericSendFromISR+0xb0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    28a2:	1c 82       	std	Y+4, r1	; 0x04
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    28a4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    28a6:	2b 96       	adiw	r28, 0x0b	; 11
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	60 97       	sbiw	r28, 0x10	; 16
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	9a 87       	std	Y+10, r25	; 0x0a
    28ce:	89 87       	std	Y+9, r24	; 0x09
    28d0:	7c 87       	std	Y+12, r23	; 0x0c
    28d2:	6b 87       	std	Y+11, r22	; 0x0b
    28d4:	5e 87       	std	Y+14, r21	; 0x0e
    28d6:	4d 87       	std	Y+13, r20	; 0x0d
    28d8:	2f 87       	std	Y+15, r18	; 0x0f
BaseType_t xEntryTimeSet = pdFALSE;
    28da:	1d 82       	std	Y+5, r1	; 0x05
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    28dc:	89 85       	ldd	r24, Y+9	; 0x09
    28de:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e0:	9a 83       	std	Y+2, r25	; 0x02
    28e2:	89 83       	std	Y+1, r24	; 0x01
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    28ea:	e9 81       	ldd	r30, Y+1	; 0x01
    28ec:	fa 81       	ldd	r31, Y+2	; 0x02
    28ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    28f0:	88 23       	and	r24, r24
    28f2:	09 f4       	brne	.+2      	; 0x28f6 <xQueueGenericReceive+0x3e>
    28f4:	4b c0       	rjmp	.+150    	; 0x298c <xQueueGenericReceive+0xd4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    28f6:	e9 81       	ldd	r30, Y+1	; 0x01
    28f8:	fa 81       	ldd	r31, Y+2	; 0x02
    28fa:	86 81       	ldd	r24, Z+6	; 0x06
    28fc:	97 81       	ldd	r25, Z+7	; 0x07
    28fe:	9c 83       	std	Y+4, r25	; 0x04
    2900:	8b 83       	std	Y+3, r24	; 0x03

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	9a 81       	ldd	r25, Y+2	; 0x02
    2906:	2b 85       	ldd	r18, Y+11	; 0x0b
    2908:	3c 85       	ldd	r19, Y+12	; 0x0c
    290a:	b9 01       	movw	r22, r18
    290c:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2910:	8f 85       	ldd	r24, Y+15	; 0x0f
    2912:	88 23       	and	r24, r24
    2914:	11 f5       	brne	.+68     	; 0x295a <xQueueGenericReceive+0xa2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    2916:	e9 81       	ldd	r30, Y+1	; 0x01
    2918:	fa 81       	ldd	r31, Y+2	; 0x02
    291a:	82 8d       	ldd	r24, Z+26	; 0x1a
    291c:	81 50       	subi	r24, 0x01	; 1
    291e:	e9 81       	ldd	r30, Y+1	; 0x01
    2920:	fa 81       	ldd	r31, Y+2	; 0x02
    2922:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2924:	e9 81       	ldd	r30, Y+1	; 0x01
    2926:	fa 81       	ldd	r31, Y+2	; 0x02
    2928:	80 81       	ld	r24, Z
    292a:	91 81       	ldd	r25, Z+1	; 0x01
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	31 f4       	brne	.+12     	; 0x293c <xQueueGenericReceive+0x84>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    2930:	0e 94 ca 23 	call	0x4794	; 0x4794 <pvTaskIncrementMutexHeldCount>
    2934:	e9 81       	ldd	r30, Y+1	; 0x01
    2936:	fa 81       	ldd	r31, Y+2	; 0x02
    2938:	93 83       	std	Z+3, r25	; 0x03
    293a:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    293c:	e9 81       	ldd	r30, Y+1	; 0x01
    293e:	fa 81       	ldd	r31, Y+2	; 0x02
    2940:	80 85       	ldd	r24, Z+8	; 0x08
    2942:	88 23       	and	r24, r24
    2944:	f1 f0       	breq	.+60     	; 0x2982 <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	9a 81       	ldd	r25, Y+2	; 0x02
    294a:	08 96       	adiw	r24, 0x08	; 8
    294c:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <xTaskRemoveFromEventList>
    2950:	81 30       	cpi	r24, 0x01	; 1
    2952:	b9 f4       	brne	.+46     	; 0x2982 <xQueueGenericReceive+0xca>
						{
							queueYIELD_IF_USING_PREEMPTION();
    2954:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vPortYield>
    2958:	14 c0       	rjmp	.+40     	; 0x2982 <xQueueGenericReceive+0xca>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    295a:	e9 81       	ldd	r30, Y+1	; 0x01
    295c:	fa 81       	ldd	r31, Y+2	; 0x02
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	9c 81       	ldd	r25, Y+4	; 0x04
    2962:	97 83       	std	Z+7, r25	; 0x07
    2964:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2966:	e9 81       	ldd	r30, Y+1	; 0x01
    2968:	fa 81       	ldd	r31, Y+2	; 0x02
    296a:	81 89       	ldd	r24, Z+17	; 0x11
    296c:	88 23       	and	r24, r24
    296e:	49 f0       	breq	.+18     	; 0x2982 <xQueueGenericReceive+0xca>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	9a 81       	ldd	r25, Y+2	; 0x02
    2974:	41 96       	adiw	r24, 0x11	; 17
    2976:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <xTaskRemoveFromEventList>
    297a:	88 23       	and	r24, r24
    297c:	11 f0       	breq	.+4      	; 0x2982 <xQueueGenericReceive+0xca>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    297e:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    2982:	0f 90       	pop	r0
    2984:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	88 8b       	std	Y+16, r24	; 0x10
    298a:	6d c0       	rjmp	.+218    	; 0x2a66 <xQueueGenericReceive+0x1ae>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    298c:	8d 85       	ldd	r24, Y+13	; 0x0d
    298e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2990:	00 97       	sbiw	r24, 0x00	; 0
    2992:	21 f4       	brne	.+8      	; 0x299c <xQueueGenericReceive+0xe4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2994:	0f 90       	pop	r0
    2996:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2998:	18 8a       	std	Y+16, r1	; 0x10
    299a:	65 c0       	rjmp	.+202    	; 0x2a66 <xQueueGenericReceive+0x1ae>
				}
				else if( xEntryTimeSet == pdFALSE )
    299c:	8d 81       	ldd	r24, Y+5	; 0x05
    299e:	88 23       	and	r24, r24
    29a0:	31 f4       	brne	.+12     	; 0x29ae <xQueueGenericReceive+0xf6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    29a2:	ce 01       	movw	r24, r28
    29a4:	06 96       	adiw	r24, 0x06	; 6
    29a6:	0e 94 3a 20 	call	0x4074	; 0x4074 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	8d 83       	std	Y+5, r24	; 0x05
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    29ae:	0f 90       	pop	r0
    29b0:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    29b2:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	0f 92       	push	r0
    29bc:	e9 81       	ldd	r30, Y+1	; 0x01
    29be:	fa 81       	ldd	r31, Y+2	; 0x02
    29c0:	85 8d       	ldd	r24, Z+29	; 0x1d
    29c2:	8f 3f       	cpi	r24, 0xFF	; 255
    29c4:	19 f4       	brne	.+6      	; 0x29cc <xQueueGenericReceive+0x114>
    29c6:	e9 81       	ldd	r30, Y+1	; 0x01
    29c8:	fa 81       	ldd	r31, Y+2	; 0x02
    29ca:	15 8e       	std	Z+29, r1	; 0x1d
    29cc:	e9 81       	ldd	r30, Y+1	; 0x01
    29ce:	fa 81       	ldd	r31, Y+2	; 0x02
    29d0:	86 8d       	ldd	r24, Z+30	; 0x1e
    29d2:	8f 3f       	cpi	r24, 0xFF	; 255
    29d4:	19 f4       	brne	.+6      	; 0x29dc <xQueueGenericReceive+0x124>
    29d6:	e9 81       	ldd	r30, Y+1	; 0x01
    29d8:	fa 81       	ldd	r31, Y+2	; 0x02
    29da:	16 8e       	std	Z+30, r1	; 0x1e
    29dc:	0f 90       	pop	r0
    29de:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    29e0:	ce 01       	movw	r24, r28
    29e2:	06 96       	adiw	r24, 0x06	; 6
    29e4:	9e 01       	movw	r18, r28
    29e6:	23 5f       	subi	r18, 0xF3	; 243
    29e8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ea:	b9 01       	movw	r22, r18
    29ec:	0e 94 53 20 	call	0x40a6	; 0x40a6 <xTaskCheckForTimeOut>
    29f0:	88 23       	and	r24, r24
    29f2:	91 f5       	brne	.+100    	; 0x2a58 <xQueueGenericReceive+0x1a0>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	9a 81       	ldd	r25, Y+2	; 0x02
    29f8:	0e 94 94 17 	call	0x2f28	; 0x2f28 <prvIsQueueEmpty>
    29fc:	88 23       	and	r24, r24
    29fe:	29 f1       	breq	.+74     	; 0x2a4a <xQueueGenericReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2a00:	e9 81       	ldd	r30, Y+1	; 0x01
    2a02:	fa 81       	ldd	r31, Y+2	; 0x02
    2a04:	80 81       	ld	r24, Z
    2a06:	91 81       	ldd	r25, Z+1	; 0x01
    2a08:	00 97       	sbiw	r24, 0x00	; 0
    2a0a:	59 f4       	brne	.+22     	; 0x2a22 <xQueueGenericReceive+0x16a>
					{
						taskENTER_CRITICAL();
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2a12:	e9 81       	ldd	r30, Y+1	; 0x01
    2a14:	fa 81       	ldd	r31, Y+2	; 0x02
    2a16:	82 81       	ldd	r24, Z+2	; 0x02
    2a18:	93 81       	ldd	r25, Z+3	; 0x03
    2a1a:	0e 94 a6 22 	call	0x454c	; 0x454c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    2a1e:	0f 90       	pop	r0
    2a20:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	9a 81       	ldd	r25, Y+2	; 0x02
    2a26:	41 96       	adiw	r24, 0x11	; 17
    2a28:	2d 85       	ldd	r18, Y+13	; 0x0d
    2a2a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2a2c:	b9 01       	movw	r22, r18
    2a2e:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	9a 81       	ldd	r25, Y+2	; 0x02
    2a36:	0e 94 40 17 	call	0x2e80	; 0x2e80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2a3a:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <xTaskResumeAll>
    2a3e:	88 23       	and	r24, r24
    2a40:	09 f0       	breq	.+2      	; 0x2a44 <xQueueGenericReceive+0x18c>
    2a42:	50 cf       	rjmp	.-352    	; 0x28e4 <xQueueGenericReceive+0x2c>
				{
					portYIELD_WITHIN_API();
    2a44:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vPortYield>
    2a48:	4d cf       	rjmp	.-358    	; 0x28e4 <xQueueGenericReceive+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4e:	0e 94 40 17 	call	0x2e80	; 0x2e80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2a52:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <xTaskResumeAll>
    2a56:	46 cf       	rjmp	.-372    	; 0x28e4 <xQueueGenericReceive+0x2c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5c:	0e 94 40 17 	call	0x2e80	; 0x2e80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2a60:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2a64:	18 8a       	std	Y+16, r1	; 0x10
    2a66:	88 89       	ldd	r24, Y+16	; 0x10
		}
	}
}
    2a68:	60 96       	adiw	r28, 0x10	; 16
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
    2a82:	2a 97       	sbiw	r28, 0x0a	; 10
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	9e 83       	std	Y+6, r25	; 0x06
    2a90:	8d 83       	std	Y+5, r24	; 0x05
    2a92:	78 87       	std	Y+8, r23	; 0x08
    2a94:	6f 83       	std	Y+7, r22	; 0x07
    2a96:	5a 87       	std	Y+10, r21	; 0x0a
    2a98:	49 87       	std	Y+9, r20	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9e:	9a 83       	std	Y+2, r25	; 0x02
    2aa0:	89 83       	std	Y+1, r24	; 0x01
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2aa2:	1b 82       	std	Y+3, r1	; 0x03
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2aaa:	88 23       	and	r24, r24
    2aac:	91 f1       	breq	.+100    	; 0x2b12 <xQueueReceiveFromISR+0x98>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab2:	2f 81       	ldd	r18, Y+7	; 0x07
    2ab4:	38 85       	ldd	r19, Y+8	; 0x08
    2ab6:	b9 01       	movw	r22, r18
    2ab8:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    2abc:	e9 81       	ldd	r30, Y+1	; 0x01
    2abe:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ac2:	81 50       	subi	r24, 0x01	; 1
    2ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac8:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    2aca:	e9 81       	ldd	r30, Y+1	; 0x01
    2acc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ace:	85 8d       	ldd	r24, Z+29	; 0x1d
    2ad0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ad2:	a9 f4       	brne	.+42     	; 0x2afe <xQueueReceiveFromISR+0x84>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2ad4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad8:	80 85       	ldd	r24, Z+8	; 0x08
    2ada:	88 23       	and	r24, r24
    2adc:	b9 f0       	breq	.+46     	; 0x2b0c <xQueueReceiveFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae2:	08 96       	adiw	r24, 0x08	; 8
    2ae4:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <xTaskRemoveFromEventList>
    2ae8:	88 23       	and	r24, r24
    2aea:	81 f0       	breq	.+32     	; 0x2b0c <xQueueReceiveFromISR+0x92>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    2aec:	89 85       	ldd	r24, Y+9	; 0x09
    2aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	61 f0       	breq	.+24     	; 0x2b0c <xQueueReceiveFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    2af4:	e9 85       	ldd	r30, Y+9	; 0x09
    2af6:	fa 85       	ldd	r31, Y+10	; 0x0a
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	80 83       	st	Z, r24
    2afc:	07 c0       	rjmp	.+14     	; 0x2b0c <xQueueReceiveFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    2afe:	e9 81       	ldd	r30, Y+1	; 0x01
    2b00:	fa 81       	ldd	r31, Y+2	; 0x02
    2b02:	85 8d       	ldd	r24, Z+29	; 0x1d
    2b04:	8f 5f       	subi	r24, 0xFF	; 255
    2b06:	e9 81       	ldd	r30, Y+1	; 0x01
    2b08:	fa 81       	ldd	r31, Y+2	; 0x02
    2b0a:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	8c 83       	std	Y+4, r24	; 0x04
    2b10:	01 c0       	rjmp	.+2      	; 0x2b14 <xQueueReceiveFromISR+0x9a>
		}
		else
		{
			xReturn = pdFAIL;
    2b12:	1c 82       	std	Y+4, r1	; 0x04
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2b14:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2b16:	2a 96       	adiw	r28, 0x0a	; 10
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	cf 91       	pop	r28
    2b24:	df 91       	pop	r29
    2b26:	08 95       	ret

00002b28 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    2b28:	df 93       	push	r29
    2b2a:	cf 93       	push	r28
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    2b30:	2a 97       	sbiw	r28, 0x0a	; 10
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	cd bf       	out	0x3d, r28	; 61
    2b3c:	98 87       	std	Y+8, r25	; 0x08
    2b3e:	8f 83       	std	Y+7, r24	; 0x07
    2b40:	7a 87       	std	Y+10, r23	; 0x0a
    2b42:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2b44:	8f 81       	ldd	r24, Y+7	; 0x07
    2b46:	98 85       	ldd	r25, Y+8	; 0x08
    2b48:	9a 83       	std	Y+2, r25	; 0x02
    2b4a:	89 83       	std	Y+1, r24	; 0x01
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2b4c:	1d 82       	std	Y+5, r1	; 0x05
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2b4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b50:	fa 81       	ldd	r31, Y+2	; 0x02
    2b52:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b54:	88 23       	and	r24, r24
    2b56:	b1 f0       	breq	.+44     	; 0x2b84 <xQueuePeekFromISR+0x5c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    2b58:	e9 81       	ldd	r30, Y+1	; 0x01
    2b5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b5c:	86 81       	ldd	r24, Z+6	; 0x06
    2b5e:	97 81       	ldd	r25, Z+7	; 0x07
    2b60:	9c 83       	std	Y+4, r25	; 0x04
    2b62:	8b 83       	std	Y+3, r24	; 0x03
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	9a 81       	ldd	r25, Y+2	; 0x02
    2b68:	29 85       	ldd	r18, Y+9	; 0x09
    2b6a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b6c:	b9 01       	movw	r22, r18
    2b6e:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    2b72:	e9 81       	ldd	r30, Y+1	; 0x01
    2b74:	fa 81       	ldd	r31, Y+2	; 0x02
    2b76:	8b 81       	ldd	r24, Y+3	; 0x03
    2b78:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7a:	97 83       	std	Z+7, r25	; 0x07
    2b7c:	86 83       	std	Z+6, r24	; 0x06

			xReturn = pdPASS;
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	8e 83       	std	Y+6, r24	; 0x06
    2b82:	01 c0       	rjmp	.+2      	; 0x2b86 <xQueuePeekFromISR+0x5e>
		}
		else
		{
			xReturn = pdFAIL;
    2b84:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2b86:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2b88:	2a 96       	adiw	r28, 0x0a	; 10
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	de bf       	out	0x3e, r29	; 62
    2b90:	0f be       	out	0x3f, r0	; 63
    2b92:	cd bf       	out	0x3d, r28	; 61
    2b94:	cf 91       	pop	r28
    2b96:	df 91       	pop	r29
    2b98:	08 95       	ret

00002b9a <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    2b9a:	df 93       	push	r29
    2b9c:	cf 93       	push	r28
    2b9e:	00 d0       	rcall	.+0      	; 0x2ba0 <uxQueueMessagesWaiting+0x6>
    2ba0:	0f 92       	push	r0
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	9b 83       	std	Y+3, r25	; 0x03
    2ba8:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	f8 94       	cli
    2bae:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2bb0:	ea 81       	ldd	r30, Y+2	; 0x02
    2bb2:	fb 81       	ldd	r31, Y+3	; 0x03
    2bb4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bb6:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    2bb8:	0f 90       	pop	r0
    2bba:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    2bbc:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	cf 91       	pop	r28
    2bc6:	df 91       	pop	r29
    2bc8:	08 95       	ret

00002bca <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    2bca:	df 93       	push	r29
    2bcc:	cf 93       	push	r28
    2bce:	00 d0       	rcall	.+0      	; 0x2bd0 <uxQueueSpacesAvailable+0x6>
    2bd0:	00 d0       	rcall	.+0      	; 0x2bd2 <uxQueueSpacesAvailable+0x8>
    2bd2:	0f 92       	push	r0
    2bd4:	cd b7       	in	r28, 0x3d	; 61
    2bd6:	de b7       	in	r29, 0x3e	; 62
    2bd8:	9d 83       	std	Y+5, r25	; 0x05
    2bda:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    2bdc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bde:	9d 81       	ldd	r25, Y+5	; 0x05
    2be0:	9a 83       	std	Y+2, r25	; 0x02
    2be2:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    2bea:	e9 81       	ldd	r30, Y+1	; 0x01
    2bec:	fa 81       	ldd	r31, Y+2	; 0x02
    2bee:	93 8d       	ldd	r25, Z+27	; 0x1b
    2bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bf6:	29 2f       	mov	r18, r25
    2bf8:	28 1b       	sub	r18, r24
    2bfa:	82 2f       	mov	r24, r18
    2bfc:	8b 83       	std	Y+3, r24	; 0x03
	}
	taskEXIT_CRITICAL();
    2bfe:	0f 90       	pop	r0
    2c00:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    2c02:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	cf 91       	pop	r28
    2c10:	df 91       	pop	r29
    2c12:	08 95       	ret

00002c14 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    2c14:	df 93       	push	r29
    2c16:	cf 93       	push	r28
    2c18:	00 d0       	rcall	.+0      	; 0x2c1a <uxQueueMessagesWaitingFromISR+0x6>
    2c1a:	0f 92       	push	r0
    2c1c:	cd b7       	in	r28, 0x3d	; 61
    2c1e:	de b7       	in	r29, 0x3e	; 62
    2c20:	9b 83       	std	Y+3, r25	; 0x03
    2c22:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2c24:	ea 81       	ldd	r30, Y+2	; 0x02
    2c26:	fb 81       	ldd	r31, Y+3	; 0x03
    2c28:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c2a:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2c2e:	0f 90       	pop	r0
    2c30:	0f 90       	pop	r0
    2c32:	0f 90       	pop	r0
    2c34:	cf 91       	pop	r28
    2c36:	df 91       	pop	r29
    2c38:	08 95       	ret

00002c3a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    2c3a:	df 93       	push	r29
    2c3c:	cf 93       	push	r28
    2c3e:	00 d0       	rcall	.+0      	; 0x2c40 <vQueueDelete+0x6>
    2c40:	00 d0       	rcall	.+0      	; 0x2c42 <vQueueDelete+0x8>
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    2c46:	9c 83       	std	Y+4, r25	; 0x04
    2c48:	8b 83       	std	Y+3, r24	; 0x03
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4e:	9a 83       	std	Y+2, r25	; 0x02
    2c50:	89 83       	std	Y+1, r24	; 0x01
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	if( pxQueue->pcHead != NULL )
    2c52:	e9 81       	ldd	r30, Y+1	; 0x01
    2c54:	fa 81       	ldd	r31, Y+2	; 0x02
    2c56:	80 81       	ld	r24, Z
    2c58:	91 81       	ldd	r25, Z+1	; 0x01
    2c5a:	00 97       	sbiw	r24, 0x00	; 0
    2c5c:	31 f0       	breq	.+12     	; 0x2c6a <vQueueDelete+0x30>
	{
		vPortFree( pxQueue->pcHead );
    2c5e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c60:	fa 81       	ldd	r31, Y+2	; 0x02
    2c62:	80 81       	ld	r24, Z
    2c64:	91 81       	ldd	r25, Z+1	; 0x01
    2c66:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <vPortFree>
	}
	vPortFree( pxQueue );
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <vPortFree>
}
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	cf 91       	pop	r28
    2c7c:	df 91       	pop	r29
    2c7e:	08 95       	ret

00002c80 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    2c80:	df 93       	push	r29
    2c82:	cf 93       	push	r28
    2c84:	00 d0       	rcall	.+0      	; 0x2c86 <prvCopyDataToQueue+0x6>
    2c86:	00 d0       	rcall	.+0      	; 0x2c88 <prvCopyDataToQueue+0x8>
    2c88:	00 d0       	rcall	.+0      	; 0x2c8a <prvCopyDataToQueue+0xa>
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	9b 83       	std	Y+3, r25	; 0x03
    2c90:	8a 83       	std	Y+2, r24	; 0x02
    2c92:	7d 83       	std	Y+5, r23	; 0x05
    2c94:	6c 83       	std	Y+4, r22	; 0x04
    2c96:	4e 83       	std	Y+6, r20	; 0x06
BaseType_t xReturn = pdFALSE;
    2c98:	19 82       	std	Y+1, r1	; 0x01

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    2c9a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c9c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c9e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2ca0:	88 23       	and	r24, r24
    2ca2:	99 f4       	brne	.+38     	; 0x2cca <prvCopyDataToQueue+0x4a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2ca4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ca6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ca8:	80 81       	ld	r24, Z
    2caa:	91 81       	ldd	r25, Z+1	; 0x01
    2cac:	00 97       	sbiw	r24, 0x00	; 0
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <prvCopyDataToQueue+0x32>
    2cb0:	8f c0       	rjmp	.+286    	; 0x2dd0 <prvCopyDataToQueue+0x150>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    2cb2:	ea 81       	ldd	r30, Y+2	; 0x02
    2cb4:	fb 81       	ldd	r31, Y+3	; 0x03
    2cb6:	82 81       	ldd	r24, Z+2	; 0x02
    2cb8:	93 81       	ldd	r25, Z+3	; 0x03
    2cba:	0e 94 31 23 	call	0x4662	; 0x4662 <xTaskPriorityDisinherit>
    2cbe:	89 83       	std	Y+1, r24	; 0x01
				pxQueue->pxMutexHolder = NULL;
    2cc0:	ea 81       	ldd	r30, Y+2	; 0x02
    2cc2:	fb 81       	ldd	r31, Y+3	; 0x03
    2cc4:	13 82       	std	Z+3, r1	; 0x03
    2cc6:	12 82       	std	Z+2, r1	; 0x02
    2cc8:	83 c0       	rjmp	.+262    	; 0x2dd0 <prvCopyDataToQueue+0x150>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    2cca:	8e 81       	ldd	r24, Y+6	; 0x06
    2ccc:	88 23       	and	r24, r24
    2cce:	99 f5       	brne	.+102    	; 0x2d36 <prvCopyDataToQueue+0xb6>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    2cd0:	ea 81       	ldd	r30, Y+2	; 0x02
    2cd2:	fb 81       	ldd	r31, Y+3	; 0x03
    2cd4:	64 81       	ldd	r22, Z+4	; 0x04
    2cd6:	75 81       	ldd	r23, Z+5	; 0x05
    2cd8:	ea 81       	ldd	r30, Y+2	; 0x02
    2cda:	fb 81       	ldd	r31, Y+3	; 0x03
    2cdc:	84 8d       	ldd	r24, Z+28	; 0x1c
    2cde:	48 2f       	mov	r20, r24
    2ce0:	50 e0       	ldi	r21, 0x00	; 0
    2ce2:	2c 81       	ldd	r18, Y+4	; 0x04
    2ce4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	b9 01       	movw	r22, r18
    2cea:	0e 94 79 32 	call	0x64f2	; 0x64f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2cee:	ea 81       	ldd	r30, Y+2	; 0x02
    2cf0:	fb 81       	ldd	r31, Y+3	; 0x03
    2cf2:	24 81       	ldd	r18, Z+4	; 0x04
    2cf4:	35 81       	ldd	r19, Z+5	; 0x05
    2cf6:	ea 81       	ldd	r30, Y+2	; 0x02
    2cf8:	fb 81       	ldd	r31, Y+3	; 0x03
    2cfa:	84 8d       	ldd	r24, Z+28	; 0x1c
    2cfc:	88 2f       	mov	r24, r24
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	82 0f       	add	r24, r18
    2d02:	93 1f       	adc	r25, r19
    2d04:	ea 81       	ldd	r30, Y+2	; 0x02
    2d06:	fb 81       	ldd	r31, Y+3	; 0x03
    2d08:	95 83       	std	Z+5, r25	; 0x05
    2d0a:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2d0c:	ea 81       	ldd	r30, Y+2	; 0x02
    2d0e:	fb 81       	ldd	r31, Y+3	; 0x03
    2d10:	24 81       	ldd	r18, Z+4	; 0x04
    2d12:	35 81       	ldd	r19, Z+5	; 0x05
    2d14:	ea 81       	ldd	r30, Y+2	; 0x02
    2d16:	fb 81       	ldd	r31, Y+3	; 0x03
    2d18:	82 81       	ldd	r24, Z+2	; 0x02
    2d1a:	93 81       	ldd	r25, Z+3	; 0x03
    2d1c:	28 17       	cp	r18, r24
    2d1e:	39 07       	cpc	r19, r25
    2d20:	08 f4       	brcc	.+2      	; 0x2d24 <prvCopyDataToQueue+0xa4>
    2d22:	56 c0       	rjmp	.+172    	; 0x2dd0 <prvCopyDataToQueue+0x150>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2d24:	ea 81       	ldd	r30, Y+2	; 0x02
    2d26:	fb 81       	ldd	r31, Y+3	; 0x03
    2d28:	80 81       	ld	r24, Z
    2d2a:	91 81       	ldd	r25, Z+1	; 0x01
    2d2c:	ea 81       	ldd	r30, Y+2	; 0x02
    2d2e:	fb 81       	ldd	r31, Y+3	; 0x03
    2d30:	95 83       	std	Z+5, r25	; 0x05
    2d32:	84 83       	std	Z+4, r24	; 0x04
    2d34:	4d c0       	rjmp	.+154    	; 0x2dd0 <prvCopyDataToQueue+0x150>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2d36:	ea 81       	ldd	r30, Y+2	; 0x02
    2d38:	fb 81       	ldd	r31, Y+3	; 0x03
    2d3a:	66 81       	ldd	r22, Z+6	; 0x06
    2d3c:	77 81       	ldd	r23, Z+7	; 0x07
    2d3e:	ea 81       	ldd	r30, Y+2	; 0x02
    2d40:	fb 81       	ldd	r31, Y+3	; 0x03
    2d42:	84 8d       	ldd	r24, Z+28	; 0x1c
    2d44:	48 2f       	mov	r20, r24
    2d46:	50 e0       	ldi	r21, 0x00	; 0
    2d48:	2c 81       	ldd	r18, Y+4	; 0x04
    2d4a:	3d 81       	ldd	r19, Y+5	; 0x05
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	b9 01       	movw	r22, r18
    2d50:	0e 94 79 32 	call	0x64f2	; 0x64f2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    2d54:	ea 81       	ldd	r30, Y+2	; 0x02
    2d56:	fb 81       	ldd	r31, Y+3	; 0x03
    2d58:	26 81       	ldd	r18, Z+6	; 0x06
    2d5a:	37 81       	ldd	r19, Z+7	; 0x07
    2d5c:	ea 81       	ldd	r30, Y+2	; 0x02
    2d5e:	fb 81       	ldd	r31, Y+3	; 0x03
    2d60:	84 8d       	ldd	r24, Z+28	; 0x1c
    2d62:	88 2f       	mov	r24, r24
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	90 95       	com	r25
    2d68:	81 95       	neg	r24
    2d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d6c:	82 0f       	add	r24, r18
    2d6e:	93 1f       	adc	r25, r19
    2d70:	ea 81       	ldd	r30, Y+2	; 0x02
    2d72:	fb 81       	ldd	r31, Y+3	; 0x03
    2d74:	97 83       	std	Z+7, r25	; 0x07
    2d76:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2d78:	ea 81       	ldd	r30, Y+2	; 0x02
    2d7a:	fb 81       	ldd	r31, Y+3	; 0x03
    2d7c:	26 81       	ldd	r18, Z+6	; 0x06
    2d7e:	37 81       	ldd	r19, Z+7	; 0x07
    2d80:	ea 81       	ldd	r30, Y+2	; 0x02
    2d82:	fb 81       	ldd	r31, Y+3	; 0x03
    2d84:	80 81       	ld	r24, Z
    2d86:	91 81       	ldd	r25, Z+1	; 0x01
    2d88:	28 17       	cp	r18, r24
    2d8a:	39 07       	cpc	r19, r25
    2d8c:	90 f4       	brcc	.+36     	; 0x2db2 <prvCopyDataToQueue+0x132>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    2d8e:	ea 81       	ldd	r30, Y+2	; 0x02
    2d90:	fb 81       	ldd	r31, Y+3	; 0x03
    2d92:	22 81       	ldd	r18, Z+2	; 0x02
    2d94:	33 81       	ldd	r19, Z+3	; 0x03
    2d96:	ea 81       	ldd	r30, Y+2	; 0x02
    2d98:	fb 81       	ldd	r31, Y+3	; 0x03
    2d9a:	84 8d       	ldd	r24, Z+28	; 0x1c
    2d9c:	88 2f       	mov	r24, r24
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	90 95       	com	r25
    2da2:	81 95       	neg	r24
    2da4:	9f 4f       	sbci	r25, 0xFF	; 255
    2da6:	82 0f       	add	r24, r18
    2da8:	93 1f       	adc	r25, r19
    2daa:	ea 81       	ldd	r30, Y+2	; 0x02
    2dac:	fb 81       	ldd	r31, Y+3	; 0x03
    2dae:	97 83       	std	Z+7, r25	; 0x07
    2db0:	86 83       	std	Z+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    2db2:	8e 81       	ldd	r24, Y+6	; 0x06
    2db4:	82 30       	cpi	r24, 0x02	; 2
    2db6:	61 f4       	brne	.+24     	; 0x2dd0 <prvCopyDataToQueue+0x150>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2db8:	ea 81       	ldd	r30, Y+2	; 0x02
    2dba:	fb 81       	ldd	r31, Y+3	; 0x03
    2dbc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dbe:	88 23       	and	r24, r24
    2dc0:	39 f0       	breq	.+14     	; 0x2dd0 <prvCopyDataToQueue+0x150>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    2dc2:	ea 81       	ldd	r30, Y+2	; 0x02
    2dc4:	fb 81       	ldd	r31, Y+3	; 0x03
    2dc6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dc8:	81 50       	subi	r24, 0x01	; 1
    2dca:	ea 81       	ldd	r30, Y+2	; 0x02
    2dcc:	fb 81       	ldd	r31, Y+3	; 0x03
    2dce:	82 8f       	std	Z+26, r24	; 0x1a
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    2dd0:	ea 81       	ldd	r30, Y+2	; 0x02
    2dd2:	fb 81       	ldd	r31, Y+3	; 0x03
    2dd4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dd6:	8f 5f       	subi	r24, 0xFF	; 255
    2dd8:	ea 81       	ldd	r30, Y+2	; 0x02
    2dda:	fb 81       	ldd	r31, Y+3	; 0x03
    2ddc:	82 8f       	std	Z+26, r24	; 0x1a

	return xReturn;
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
}
    2de0:	26 96       	adiw	r28, 0x06	; 6
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	08 95       	ret

00002df2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	00 d0       	rcall	.+0      	; 0x2df8 <prvCopyDataFromQueue+0x6>
    2df8:	00 d0       	rcall	.+0      	; 0x2dfa <prvCopyDataFromQueue+0x8>
    2dfa:	cd b7       	in	r28, 0x3d	; 61
    2dfc:	de b7       	in	r29, 0x3e	; 62
    2dfe:	9a 83       	std	Y+2, r25	; 0x02
    2e00:	89 83       	std	Y+1, r24	; 0x01
    2e02:	7c 83       	std	Y+4, r23	; 0x04
    2e04:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    2e06:	e9 81       	ldd	r30, Y+1	; 0x01
    2e08:	fa 81       	ldd	r31, Y+2	; 0x02
    2e0a:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e0c:	88 23       	and	r24, r24
    2e0e:	89 f1       	breq	.+98     	; 0x2e72 <prvCopyDataFromQueue+0x80>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    2e10:	e9 81       	ldd	r30, Y+1	; 0x01
    2e12:	fa 81       	ldd	r31, Y+2	; 0x02
    2e14:	26 81       	ldd	r18, Z+6	; 0x06
    2e16:	37 81       	ldd	r19, Z+7	; 0x07
    2e18:	e9 81       	ldd	r30, Y+1	; 0x01
    2e1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e1c:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e1e:	88 2f       	mov	r24, r24
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	82 0f       	add	r24, r18
    2e24:	93 1f       	adc	r25, r19
    2e26:	e9 81       	ldd	r30, Y+1	; 0x01
    2e28:	fa 81       	ldd	r31, Y+2	; 0x02
    2e2a:	97 83       	std	Z+7, r25	; 0x07
    2e2c:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    2e2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e30:	fa 81       	ldd	r31, Y+2	; 0x02
    2e32:	26 81       	ldd	r18, Z+6	; 0x06
    2e34:	37 81       	ldd	r19, Z+7	; 0x07
    2e36:	e9 81       	ldd	r30, Y+1	; 0x01
    2e38:	fa 81       	ldd	r31, Y+2	; 0x02
    2e3a:	82 81       	ldd	r24, Z+2	; 0x02
    2e3c:	93 81       	ldd	r25, Z+3	; 0x03
    2e3e:	28 17       	cp	r18, r24
    2e40:	39 07       	cpc	r19, r25
    2e42:	40 f0       	brcs	.+16     	; 0x2e54 <prvCopyDataFromQueue+0x62>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    2e44:	e9 81       	ldd	r30, Y+1	; 0x01
    2e46:	fa 81       	ldd	r31, Y+2	; 0x02
    2e48:	80 81       	ld	r24, Z
    2e4a:	91 81       	ldd	r25, Z+1	; 0x01
    2e4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e50:	97 83       	std	Z+7, r25	; 0x07
    2e52:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    2e54:	e9 81       	ldd	r30, Y+1	; 0x01
    2e56:	fa 81       	ldd	r31, Y+2	; 0x02
    2e58:	46 81       	ldd	r20, Z+6	; 0x06
    2e5a:	57 81       	ldd	r21, Z+7	; 0x07
    2e5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e60:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e62:	28 2f       	mov	r18, r24
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	8b 81       	ldd	r24, Y+3	; 0x03
    2e68:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6a:	ba 01       	movw	r22, r20
    2e6c:	a9 01       	movw	r20, r18
    2e6e:	0e 94 79 32 	call	0x64f2	; 0x64f2 <memcpy>
	}
}
    2e72:	0f 90       	pop	r0
    2e74:	0f 90       	pop	r0
    2e76:	0f 90       	pop	r0
    2e78:	0f 90       	pop	r0
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	08 95       	ret

00002e80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	00 d0       	rcall	.+0      	; 0x2e86 <prvUnlockQueue+0x6>
    2e86:	cd b7       	in	r28, 0x3d	; 61
    2e88:	de b7       	in	r29, 0x3e	; 62
    2e8a:	9a 83       	std	Y+2, r25	; 0x02
    2e8c:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	0f 92       	push	r0
    2e94:	15 c0       	rjmp	.+42     	; 0x2ec0 <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2e96:	e9 81       	ldd	r30, Y+1	; 0x01
    2e98:	fa 81       	ldd	r31, Y+2	; 0x02
    2e9a:	81 89       	ldd	r24, Z+17	; 0x11
    2e9c:	88 23       	and	r24, r24
    2e9e:	a9 f0       	breq	.+42     	; 0x2eca <prvUnlockQueue+0x4a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea4:	41 96       	adiw	r24, 0x11	; 17
    2ea6:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <xTaskRemoveFromEventList>
    2eaa:	88 23       	and	r24, r24
    2eac:	11 f0       	breq	.+4      	; 0x2eb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    2eae:	0e 94 b6 20 	call	0x416c	; 0x416c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    2eb2:	e9 81       	ldd	r30, Y+1	; 0x01
    2eb4:	fa 81       	ldd	r31, Y+2	; 0x02
    2eb6:	86 8d       	ldd	r24, Z+30	; 0x1e
    2eb8:	81 50       	subi	r24, 0x01	; 1
    2eba:	e9 81       	ldd	r30, Y+1	; 0x01
    2ebc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ebe:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec4:	86 8d       	ldd	r24, Z+30	; 0x1e
    2ec6:	18 16       	cp	r1, r24
    2ec8:	34 f3       	brlt	.-52     	; 0x2e96 <prvUnlockQueue+0x16>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    2eca:	e9 81       	ldd	r30, Y+1	; 0x01
    2ecc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ece:	8f ef       	ldi	r24, 0xFF	; 255
    2ed0:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    2ed2:	0f 90       	pop	r0
    2ed4:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	f8 94       	cli
    2eda:	0f 92       	push	r0
    2edc:	15 c0       	rjmp	.+42     	; 0x2f08 <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2ede:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ee2:	80 85       	ldd	r24, Z+8	; 0x08
    2ee4:	88 23       	and	r24, r24
    2ee6:	a9 f0       	breq	.+42     	; 0x2f12 <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	9a 81       	ldd	r25, Y+2	; 0x02
    2eec:	08 96       	adiw	r24, 0x08	; 8
    2eee:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <xTaskRemoveFromEventList>
    2ef2:	88 23       	and	r24, r24
    2ef4:	11 f0       	breq	.+4      	; 0x2efa <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    2ef6:	0e 94 b6 20 	call	0x416c	; 0x416c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    2efa:	e9 81       	ldd	r30, Y+1	; 0x01
    2efc:	fa 81       	ldd	r31, Y+2	; 0x02
    2efe:	85 8d       	ldd	r24, Z+29	; 0x1d
    2f00:	81 50       	subi	r24, 0x01	; 1
    2f02:	e9 81       	ldd	r30, Y+1	; 0x01
    2f04:	fa 81       	ldd	r31, Y+2	; 0x02
    2f06:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2f08:	e9 81       	ldd	r30, Y+1	; 0x01
    2f0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f0c:	85 8d       	ldd	r24, Z+29	; 0x1d
    2f0e:	18 16       	cp	r1, r24
    2f10:	34 f3       	brlt	.-52     	; 0x2ede <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2f12:	e9 81       	ldd	r30, Y+1	; 0x01
    2f14:	fa 81       	ldd	r31, Y+2	; 0x02
    2f16:	8f ef       	ldi	r24, 0xFF	; 255
    2f18:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    2f1a:	0f 90       	pop	r0
    2f1c:	0f be       	out	0x3f, r0	; 63
}
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	08 95       	ret

00002f28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	00 d0       	rcall	.+0      	; 0x2f2e <prvIsQueueEmpty+0x6>
    2f2e:	0f 92       	push	r0
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	9b 83       	std	Y+3, r25	; 0x03
    2f36:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2f38:	0f b6       	in	r0, 0x3f	; 63
    2f3a:	f8 94       	cli
    2f3c:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2f3e:	ea 81       	ldd	r30, Y+2	; 0x02
    2f40:	fb 81       	ldd	r31, Y+3	; 0x03
    2f42:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f44:	88 23       	and	r24, r24
    2f46:	19 f4       	brne	.+6      	; 0x2f4e <prvIsQueueEmpty+0x26>
		{
			xReturn = pdTRUE;
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	89 83       	std	Y+1, r24	; 0x01
    2f4c:	01 c0       	rjmp	.+2      	; 0x2f50 <prvIsQueueEmpty+0x28>
		}
		else
		{
			xReturn = pdFALSE;
    2f4e:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2f50:	0f 90       	pop	r0
    2f52:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	cf 91       	pop	r28
    2f5e:	df 91       	pop	r29
    2f60:	08 95       	ret

00002f62 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	00 d0       	rcall	.+0      	; 0x2f68 <xQueueIsQueueEmptyFromISR+0x6>
    2f68:	0f 92       	push	r0
    2f6a:	cd b7       	in	r28, 0x3d	; 61
    2f6c:	de b7       	in	r29, 0x3e	; 62
    2f6e:	9b 83       	std	Y+3, r25	; 0x03
    2f70:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    2f72:	ea 81       	ldd	r30, Y+2	; 0x02
    2f74:	fb 81       	ldd	r31, Y+3	; 0x03
    2f76:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f78:	88 23       	and	r24, r24
    2f7a:	19 f4       	brne	.+6      	; 0x2f82 <xQueueIsQueueEmptyFromISR+0x20>
	{
		xReturn = pdTRUE;
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	89 83       	std	Y+1, r24	; 0x01
    2f80:	01 c0       	rjmp	.+2      	; 0x2f84 <xQueueIsQueueEmptyFromISR+0x22>
	}
	else
	{
		xReturn = pdFALSE;
    2f82:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    2f84:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2f86:	0f 90       	pop	r0
    2f88:	0f 90       	pop	r0
    2f8a:	0f 90       	pop	r0
    2f8c:	cf 91       	pop	r28
    2f8e:	df 91       	pop	r29
    2f90:	08 95       	ret

00002f92 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	00 d0       	rcall	.+0      	; 0x2f98 <prvIsQueueFull+0x6>
    2f98:	0f 92       	push	r0
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
    2f9e:	9b 83       	std	Y+3, r25	; 0x03
    2fa0:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2fa2:	0f b6       	in	r0, 0x3f	; 63
    2fa4:	f8 94       	cli
    2fa6:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2fa8:	ea 81       	ldd	r30, Y+2	; 0x02
    2faa:	fb 81       	ldd	r31, Y+3	; 0x03
    2fac:	92 8d       	ldd	r25, Z+26	; 0x1a
    2fae:	ea 81       	ldd	r30, Y+2	; 0x02
    2fb0:	fb 81       	ldd	r31, Y+3	; 0x03
    2fb2:	83 8d       	ldd	r24, Z+27	; 0x1b
    2fb4:	98 17       	cp	r25, r24
    2fb6:	19 f4       	brne	.+6      	; 0x2fbe <prvIsQueueFull+0x2c>
		{
			xReturn = pdTRUE;
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	89 83       	std	Y+1, r24	; 0x01
    2fbc:	01 c0       	rjmp	.+2      	; 0x2fc0 <prvIsQueueFull+0x2e>
		}
		else
		{
			xReturn = pdFALSE;
    2fbe:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2fc0:	0f 90       	pop	r0
    2fc2:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	cf 91       	pop	r28
    2fce:	df 91       	pop	r29
    2fd0:	08 95       	ret

00002fd2 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    2fd2:	df 93       	push	r29
    2fd4:	cf 93       	push	r28
    2fd6:	00 d0       	rcall	.+0      	; 0x2fd8 <xQueueIsQueueFullFromISR+0x6>
    2fd8:	0f 92       	push	r0
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
    2fde:	9b 83       	std	Y+3, r25	; 0x03
    2fe0:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    2fe2:	ea 81       	ldd	r30, Y+2	; 0x02
    2fe4:	fb 81       	ldd	r31, Y+3	; 0x03
    2fe6:	92 8d       	ldd	r25, Z+26	; 0x1a
    2fe8:	ea 81       	ldd	r30, Y+2	; 0x02
    2fea:	fb 81       	ldd	r31, Y+3	; 0x03
    2fec:	83 8d       	ldd	r24, Z+27	; 0x1b
    2fee:	98 17       	cp	r25, r24
    2ff0:	19 f4       	brne	.+6      	; 0x2ff8 <xQueueIsQueueFullFromISR+0x26>
	{
		xReturn = pdTRUE;
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	89 83       	std	Y+1, r24	; 0x01
    2ff6:	01 c0       	rjmp	.+2      	; 0x2ffa <xQueueIsQueueFullFromISR+0x28>
	}
	else
	{
		xReturn = pdFALSE;
    2ff8:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2ffc:	0f 90       	pop	r0
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	08 95       	ret

00003008 <xQueueCRSend>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait )
	{
    3008:	df 93       	push	r29
    300a:	cf 93       	push	r28
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
    3010:	2a 97       	sbiw	r28, 0x0a	; 10
    3012:	0f b6       	in	r0, 0x3f	; 63
    3014:	f8 94       	cli
    3016:	de bf       	out	0x3e, r29	; 62
    3018:	0f be       	out	0x3f, r0	; 63
    301a:	cd bf       	out	0x3d, r28	; 61
    301c:	9d 83       	std	Y+5, r25	; 0x05
    301e:	8c 83       	std	Y+4, r24	; 0x04
    3020:	7f 83       	std	Y+7, r23	; 0x07
    3022:	6e 83       	std	Y+6, r22	; 0x06
    3024:	59 87       	std	Y+9, r21	; 0x09
    3026:	48 87       	std	Y+8, r20	; 0x08
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    3028:	8c 81       	ldd	r24, Y+4	; 0x04
    302a:	9d 81       	ldd	r25, Y+5	; 0x05
    302c:	9a 83       	std	Y+2, r25	; 0x02
    302e:	89 83       	std	Y+1, r24	; 0x01

		/* If the queue is already full we may have to block.  A critical section
		is required to prevent an interrupt removing something from the queue
		between the check to see if the queue is full and blocking on the queue. */
		portDISABLE_INTERRUPTS();
    3030:	f8 94       	cli
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	9a 81       	ldd	r25, Y+2	; 0x02
    3036:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <prvIsQueueFull>
    303a:	88 23       	and	r24, r24
    303c:	a9 f0       	breq	.+42     	; 0x3068 <xQueueCRSend+0x60>
			{
				/* The queue is full - do we want to block or just leave without
				posting? */
				if( xTicksToWait > ( TickType_t ) 0 )
    303e:	88 85       	ldd	r24, Y+8	; 0x08
    3040:	99 85       	ldd	r25, Y+9	; 0x09
    3042:	00 97       	sbiw	r24, 0x00	; 0
    3044:	71 f0       	breq	.+28     	; 0x3062 <xQueueCRSend+0x5a>
				{
					/* As this is called from a coroutine we cannot block directly, but
					return indicating that we need to block. */
					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
    3046:	89 81       	ldd	r24, Y+1	; 0x01
    3048:	9a 81       	ldd	r25, Y+2	; 0x02
    304a:	9c 01       	movw	r18, r24
    304c:	28 5f       	subi	r18, 0xF8	; 248
    304e:	3f 4f       	sbci	r19, 0xFF	; 255
    3050:	88 85       	ldd	r24, Y+8	; 0x08
    3052:	99 85       	ldd	r25, Y+9	; 0x09
    3054:	b9 01       	movw	r22, r18
    3056:	0e 94 21 07 	call	0xe42	; 0xe42 <vCoRoutineAddToDelayedList>
					portENABLE_INTERRUPTS();
    305a:	78 94       	sei
					return errQUEUE_BLOCKED;
    305c:	8c ef       	ldi	r24, 0xFC	; 252
    305e:	8a 87       	std	Y+10, r24	; 0x0a
    3060:	2a c0       	rjmp	.+84     	; 0x30b6 <xQueueCRSend+0xae>
				}
				else
				{
					portENABLE_INTERRUPTS();
    3062:	78 94       	sei
					return errQUEUE_FULL;
    3064:	1a 86       	std	Y+10, r1	; 0x0a
    3066:	27 c0       	rjmp	.+78     	; 0x30b6 <xQueueCRSend+0xae>
				}
			}
		}
		portENABLE_INTERRUPTS();
    3068:	78 94       	sei

		portDISABLE_INTERRUPTS();
    306a:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    306c:	e9 81       	ldd	r30, Y+1	; 0x01
    306e:	fa 81       	ldd	r31, Y+2	; 0x02
    3070:	92 8d       	ldd	r25, Z+26	; 0x1a
    3072:	e9 81       	ldd	r30, Y+1	; 0x01
    3074:	fa 81       	ldd	r31, Y+2	; 0x02
    3076:	83 8d       	ldd	r24, Z+27	; 0x1b
    3078:	98 17       	cp	r25, r24
    307a:	c8 f4       	brcc	.+50     	; 0x30ae <xQueueCRSend+0xa6>
			{
				/* There is room in the queue, copy the data into the queue. */
				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	9a 81       	ldd	r25, Y+2	; 0x02
    3080:	2e 81       	ldd	r18, Y+6	; 0x06
    3082:	3f 81       	ldd	r19, Y+7	; 0x07
    3084:	b9 01       	movw	r22, r18
    3086:	40 e0       	ldi	r20, 0x00	; 0
    3088:	0e 94 40 16 	call	0x2c80	; 0x2c80 <prvCopyDataToQueue>
				xReturn = pdPASS;
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	8b 83       	std	Y+3, r24	; 0x03

				/* Were any co-routines waiting for data to become available? */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3090:	e9 81       	ldd	r30, Y+1	; 0x01
    3092:	fa 81       	ldd	r31, Y+2	; 0x02
    3094:	81 89       	ldd	r24, Z+17	; 0x11
    3096:	88 23       	and	r24, r24
    3098:	59 f0       	breq	.+22     	; 0x30b0 <xQueueCRSend+0xa8>
				{
					/* In this instance the co-routine could be placed directly
					into the ready list as we are within a critical section.
					Instead the same pending ready list mechanism is used as if
					the event were caused from within an interrupt. */
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	9a 81       	ldd	r25, Y+2	; 0x02
    309e:	41 96       	adiw	r24, 0x11	; 17
    30a0:	0e 94 2d 09 	call	0x125a	; 0x125a <xCoRoutineRemoveFromEventList>
    30a4:	88 23       	and	r24, r24
    30a6:	21 f0       	breq	.+8      	; 0x30b0 <xQueueCRSend+0xa8>
					{
						/* The co-routine waiting has a higher priority so record
						that a yield might be appropriate. */
						xReturn = errQUEUE_YIELD;
    30a8:	8b ef       	ldi	r24, 0xFB	; 251
    30aa:	8b 83       	std	Y+3, r24	; 0x03
    30ac:	01 c0       	rjmp	.+2      	; 0x30b0 <xQueueCRSend+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				xReturn = errQUEUE_FULL;
    30ae:	1b 82       	std	Y+3, r1	; 0x03
			}
		}
		portENABLE_INTERRUPTS();
    30b0:	78 94       	sei

		return xReturn;
    30b2:	8b 81       	ldd	r24, Y+3	; 0x03
    30b4:	8a 87       	std	Y+10, r24	; 0x0a
    30b6:	8a 85       	ldd	r24, Y+10	; 0x0a
	}
    30b8:	2a 96       	adiw	r28, 0x0a	; 10
    30ba:	0f b6       	in	r0, 0x3f	; 63
    30bc:	f8 94       	cli
    30be:	de bf       	out	0x3e, r29	; 62
    30c0:	0f be       	out	0x3f, r0	; 63
    30c2:	cd bf       	out	0x3d, r28	; 61
    30c4:	cf 91       	pop	r28
    30c6:	df 91       	pop	r29
    30c8:	08 95       	ret

000030ca <xQueueCRReceive>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
	{
    30ca:	df 93       	push	r29
    30cc:	cf 93       	push	r28
    30ce:	cd b7       	in	r28, 0x3d	; 61
    30d0:	de b7       	in	r29, 0x3e	; 62
    30d2:	2a 97       	sbiw	r28, 0x0a	; 10
    30d4:	0f b6       	in	r0, 0x3f	; 63
    30d6:	f8 94       	cli
    30d8:	de bf       	out	0x3e, r29	; 62
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	cd bf       	out	0x3d, r28	; 61
    30de:	9d 83       	std	Y+5, r25	; 0x05
    30e0:	8c 83       	std	Y+4, r24	; 0x04
    30e2:	7f 83       	std	Y+7, r23	; 0x07
    30e4:	6e 83       	std	Y+6, r22	; 0x06
    30e6:	59 87       	std	Y+9, r21	; 0x09
    30e8:	48 87       	std	Y+8, r20	; 0x08
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    30ea:	8c 81       	ldd	r24, Y+4	; 0x04
    30ec:	9d 81       	ldd	r25, Y+5	; 0x05
    30ee:	9a 83       	std	Y+2, r25	; 0x02
    30f0:	89 83       	std	Y+1, r24	; 0x01

		/* If the queue is already empty we may have to block.  A critical section
		is required to prevent an interrupt adding something to the queue
		between the check to see if the queue is empty and blocking on the queue. */
		portDISABLE_INTERRUPTS();
    30f2:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    30f4:	e9 81       	ldd	r30, Y+1	; 0x01
    30f6:	fa 81       	ldd	r31, Y+2	; 0x02
    30f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    30fa:	88 23       	and	r24, r24
    30fc:	a9 f4       	brne	.+42     	; 0x3128 <xQueueCRReceive+0x5e>
			{
				/* There are no messages in the queue, do we want to block or just
				leave with nothing? */
				if( xTicksToWait > ( TickType_t ) 0 )
    30fe:	88 85       	ldd	r24, Y+8	; 0x08
    3100:	99 85       	ldd	r25, Y+9	; 0x09
    3102:	00 97       	sbiw	r24, 0x00	; 0
    3104:	71 f0       	breq	.+28     	; 0x3122 <xQueueCRReceive+0x58>
				{
					/* As this is a co-routine we cannot block directly, but return
					indicating that we need to block. */
					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	9a 81       	ldd	r25, Y+2	; 0x02
    310a:	9c 01       	movw	r18, r24
    310c:	2f 5e       	subi	r18, 0xEF	; 239
    310e:	3f 4f       	sbci	r19, 0xFF	; 255
    3110:	88 85       	ldd	r24, Y+8	; 0x08
    3112:	99 85       	ldd	r25, Y+9	; 0x09
    3114:	b9 01       	movw	r22, r18
    3116:	0e 94 21 07 	call	0xe42	; 0xe42 <vCoRoutineAddToDelayedList>
					portENABLE_INTERRUPTS();
    311a:	78 94       	sei
					return errQUEUE_BLOCKED;
    311c:	8c ef       	ldi	r24, 0xFC	; 252
    311e:	8a 87       	std	Y+10, r24	; 0x0a
    3120:	58 c0       	rjmp	.+176    	; 0x31d2 <xQueueCRReceive+0x108>
				}
				else
				{
					portENABLE_INTERRUPTS();
    3122:	78 94       	sei
					return errQUEUE_FULL;
    3124:	1a 86       	std	Y+10, r1	; 0x0a
    3126:	55 c0       	rjmp	.+170    	; 0x31d2 <xQueueCRReceive+0x108>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portENABLE_INTERRUPTS();
    3128:	78 94       	sei

		portDISABLE_INTERRUPTS();
    312a:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    312c:	e9 81       	ldd	r30, Y+1	; 0x01
    312e:	fa 81       	ldd	r31, Y+2	; 0x02
    3130:	82 8d       	ldd	r24, Z+26	; 0x1a
    3132:	88 23       	and	r24, r24
    3134:	09 f4       	brne	.+2      	; 0x3138 <xQueueCRReceive+0x6e>
    3136:	49 c0       	rjmp	.+146    	; 0x31ca <xQueueCRReceive+0x100>
			{
				/* Data is available from the queue. */
				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    3138:	e9 81       	ldd	r30, Y+1	; 0x01
    313a:	fa 81       	ldd	r31, Y+2	; 0x02
    313c:	26 81       	ldd	r18, Z+6	; 0x06
    313e:	37 81       	ldd	r19, Z+7	; 0x07
    3140:	e9 81       	ldd	r30, Y+1	; 0x01
    3142:	fa 81       	ldd	r31, Y+2	; 0x02
    3144:	84 8d       	ldd	r24, Z+28	; 0x1c
    3146:	88 2f       	mov	r24, r24
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	82 0f       	add	r24, r18
    314c:	93 1f       	adc	r25, r19
    314e:	e9 81       	ldd	r30, Y+1	; 0x01
    3150:	fa 81       	ldd	r31, Y+2	; 0x02
    3152:	97 83       	std	Z+7, r25	; 0x07
    3154:	86 83       	std	Z+6, r24	; 0x06
				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
    3156:	e9 81       	ldd	r30, Y+1	; 0x01
    3158:	fa 81       	ldd	r31, Y+2	; 0x02
    315a:	26 81       	ldd	r18, Z+6	; 0x06
    315c:	37 81       	ldd	r19, Z+7	; 0x07
    315e:	e9 81       	ldd	r30, Y+1	; 0x01
    3160:	fa 81       	ldd	r31, Y+2	; 0x02
    3162:	82 81       	ldd	r24, Z+2	; 0x02
    3164:	93 81       	ldd	r25, Z+3	; 0x03
    3166:	28 17       	cp	r18, r24
    3168:	39 07       	cpc	r19, r25
    316a:	40 f0       	brcs	.+16     	; 0x317c <xQueueCRReceive+0xb2>
				{
					pxQueue->u.pcReadFrom = pxQueue->pcHead;
    316c:	e9 81       	ldd	r30, Y+1	; 0x01
    316e:	fa 81       	ldd	r31, Y+2	; 0x02
    3170:	80 81       	ld	r24, Z
    3172:	91 81       	ldd	r25, Z+1	; 0x01
    3174:	e9 81       	ldd	r30, Y+1	; 0x01
    3176:	fa 81       	ldd	r31, Y+2	; 0x02
    3178:	97 83       	std	Z+7, r25	; 0x07
    317a:	86 83       	std	Z+6, r24	; 0x06
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				--( pxQueue->uxMessagesWaiting );
    317c:	e9 81       	ldd	r30, Y+1	; 0x01
    317e:	fa 81       	ldd	r31, Y+2	; 0x02
    3180:	82 8d       	ldd	r24, Z+26	; 0x1a
    3182:	81 50       	subi	r24, 0x01	; 1
    3184:	e9 81       	ldd	r30, Y+1	; 0x01
    3186:	fa 81       	ldd	r31, Y+2	; 0x02
    3188:	82 8f       	std	Z+26, r24	; 0x1a
				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    318a:	e9 81       	ldd	r30, Y+1	; 0x01
    318c:	fa 81       	ldd	r31, Y+2	; 0x02
    318e:	46 81       	ldd	r20, Z+6	; 0x06
    3190:	57 81       	ldd	r21, Z+7	; 0x07
    3192:	e9 81       	ldd	r30, Y+1	; 0x01
    3194:	fa 81       	ldd	r31, Y+2	; 0x02
    3196:	84 8d       	ldd	r24, Z+28	; 0x1c
    3198:	28 2f       	mov	r18, r24
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	8e 81       	ldd	r24, Y+6	; 0x06
    319e:	9f 81       	ldd	r25, Y+7	; 0x07
    31a0:	ba 01       	movw	r22, r20
    31a2:	a9 01       	movw	r20, r18
    31a4:	0e 94 79 32 	call	0x64f2	; 0x64f2 <memcpy>

				xReturn = pdPASS;
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	8b 83       	std	Y+3, r24	; 0x03

				/* Were any co-routines waiting for space to become available? */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    31ac:	e9 81       	ldd	r30, Y+1	; 0x01
    31ae:	fa 81       	ldd	r31, Y+2	; 0x02
    31b0:	80 85       	ldd	r24, Z+8	; 0x08
    31b2:	88 23       	and	r24, r24
    31b4:	59 f0       	breq	.+22     	; 0x31cc <xQueueCRReceive+0x102>
				{
					/* In this instance the co-routine could be placed directly
					into the ready list as we are within a critical section.
					Instead the same pending ready list mechanism is used as if
					the event were caused from within an interrupt. */
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ba:	08 96       	adiw	r24, 0x08	; 8
    31bc:	0e 94 2d 09 	call	0x125a	; 0x125a <xCoRoutineRemoveFromEventList>
    31c0:	88 23       	and	r24, r24
    31c2:	21 f0       	breq	.+8      	; 0x31cc <xQueueCRReceive+0x102>
					{
						xReturn = errQUEUE_YIELD;
    31c4:	8b ef       	ldi	r24, 0xFB	; 251
    31c6:	8b 83       	std	Y+3, r24	; 0x03
    31c8:	01 c0       	rjmp	.+2      	; 0x31cc <xQueueCRReceive+0x102>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				xReturn = pdFAIL;
    31ca:	1b 82       	std	Y+3, r1	; 0x03
			}
		}
		portENABLE_INTERRUPTS();
    31cc:	78 94       	sei

		return xReturn;
    31ce:	8b 81       	ldd	r24, Y+3	; 0x03
    31d0:	8a 87       	std	Y+10, r24	; 0x0a
    31d2:	8a 85       	ldd	r24, Y+10	; 0x0a
	}
    31d4:	2a 96       	adiw	r28, 0x0a	; 10
    31d6:	0f b6       	in	r0, 0x3f	; 63
    31d8:	f8 94       	cli
    31da:	de bf       	out	0x3e, r29	; 62
    31dc:	0f be       	out	0x3f, r0	; 63
    31de:	cd bf       	out	0x3d, r28	; 61
    31e0:	cf 91       	pop	r28
    31e2:	df 91       	pop	r29
    31e4:	08 95       	ret

000031e6 <xQueueCRSendFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRoutinePreviouslyWoken )
	{
    31e6:	df 93       	push	r29
    31e8:	cf 93       	push	r28
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
    31ee:	28 97       	sbiw	r28, 0x08	; 8
    31f0:	0f b6       	in	r0, 0x3f	; 63
    31f2:	f8 94       	cli
    31f4:	de bf       	out	0x3e, r29	; 62
    31f6:	0f be       	out	0x3f, r0	; 63
    31f8:	cd bf       	out	0x3d, r28	; 61
    31fa:	9c 83       	std	Y+4, r25	; 0x04
    31fc:	8b 83       	std	Y+3, r24	; 0x03
    31fe:	7e 83       	std	Y+6, r23	; 0x06
    3200:	6d 83       	std	Y+5, r22	; 0x05
    3202:	4f 83       	std	Y+7, r20	; 0x07
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    3204:	8b 81       	ldd	r24, Y+3	; 0x03
    3206:	9c 81       	ldd	r25, Y+4	; 0x04
    3208:	9a 83       	std	Y+2, r25	; 0x02
    320a:	89 83       	std	Y+1, r24	; 0x01

		/* Cannot block within an ISR so if there is no space on the queue then
		exit without doing anything. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    320c:	e9 81       	ldd	r30, Y+1	; 0x01
    320e:	fa 81       	ldd	r31, Y+2	; 0x02
    3210:	92 8d       	ldd	r25, Z+26	; 0x1a
    3212:	e9 81       	ldd	r30, Y+1	; 0x01
    3214:	fa 81       	ldd	r31, Y+2	; 0x02
    3216:	83 8d       	ldd	r24, Z+27	; 0x1b
    3218:	98 17       	cp	r25, r24
    321a:	d0 f4       	brcc	.+52     	; 0x3250 <xQueueCRSendFromISR+0x6a>
		{
			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	9a 81       	ldd	r25, Y+2	; 0x02
    3220:	2d 81       	ldd	r18, Y+5	; 0x05
    3222:	3e 81       	ldd	r19, Y+6	; 0x06
    3224:	b9 01       	movw	r22, r18
    3226:	40 e0       	ldi	r20, 0x00	; 0
    3228:	0e 94 40 16 	call	0x2c80	; 0x2c80 <prvCopyDataToQueue>

			/* We only want to wake one co-routine per ISR, so check that a
			co-routine has not already been woken. */
			if( xCoRoutinePreviouslyWoken == pdFALSE )
    322c:	8f 81       	ldd	r24, Y+7	; 0x07
    322e:	88 23       	and	r24, r24
    3230:	79 f4       	brne	.+30     	; 0x3250 <xQueueCRSendFromISR+0x6a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3232:	e9 81       	ldd	r30, Y+1	; 0x01
    3234:	fa 81       	ldd	r31, Y+2	; 0x02
    3236:	81 89       	ldd	r24, Z+17	; 0x11
    3238:	88 23       	and	r24, r24
    323a:	51 f0       	breq	.+20     	; 0x3250 <xQueueCRSendFromISR+0x6a>
				{
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	9a 81       	ldd	r25, Y+2	; 0x02
    3240:	41 96       	adiw	r24, 0x11	; 17
    3242:	0e 94 2d 09 	call	0x125a	; 0x125a <xCoRoutineRemoveFromEventList>
    3246:	88 23       	and	r24, r24
    3248:	19 f0       	breq	.+6      	; 0x3250 <xQueueCRSendFromISR+0x6a>
					{
						return pdTRUE;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	88 87       	std	Y+8, r24	; 0x08
    324e:	02 c0       	rjmp	.+4      	; 0x3254 <xQueueCRSendFromISR+0x6e>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xCoRoutinePreviouslyWoken;
    3250:	8f 81       	ldd	r24, Y+7	; 0x07
    3252:	88 87       	std	Y+8, r24	; 0x08
    3254:	88 85       	ldd	r24, Y+8	; 0x08
	}
    3256:	28 96       	adiw	r28, 0x08	; 8
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	f8 94       	cli
    325c:	de bf       	out	0x3e, r29	; 62
    325e:	0f be       	out	0x3f, r0	; 63
    3260:	cd bf       	out	0x3d, r28	; 61
    3262:	cf 91       	pop	r28
    3264:	df 91       	pop	r29
    3266:	08 95       	ret

00003268 <xQueueCRReceiveFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWoken )
	{
    3268:	df 93       	push	r29
    326a:	cf 93       	push	r28
    326c:	cd b7       	in	r28, 0x3d	; 61
    326e:	de b7       	in	r29, 0x3e	; 62
    3270:	29 97       	sbiw	r28, 0x09	; 9
    3272:	0f b6       	in	r0, 0x3f	; 63
    3274:	f8 94       	cli
    3276:	de bf       	out	0x3e, r29	; 62
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	cd bf       	out	0x3d, r28	; 61
    327c:	9d 83       	std	Y+5, r25	; 0x05
    327e:	8c 83       	std	Y+4, r24	; 0x04
    3280:	7f 83       	std	Y+7, r23	; 0x07
    3282:	6e 83       	std	Y+6, r22	; 0x06
    3284:	59 87       	std	Y+9, r21	; 0x09
    3286:	48 87       	std	Y+8, r20	; 0x08
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    3288:	8c 81       	ldd	r24, Y+4	; 0x04
    328a:	9d 81       	ldd	r25, Y+5	; 0x05
    328c:	9a 83       	std	Y+2, r25	; 0x02
    328e:	89 83       	std	Y+1, r24	; 0x01

		/* We cannot block from an ISR, so check there is data available. If
		not then just leave without doing anything. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    3290:	e9 81       	ldd	r30, Y+1	; 0x01
    3292:	fa 81       	ldd	r31, Y+2	; 0x02
    3294:	82 8d       	ldd	r24, Z+26	; 0x1a
    3296:	88 23       	and	r24, r24
    3298:	09 f4       	brne	.+2      	; 0x329c <xQueueCRReceiveFromISR+0x34>
    329a:	50 c0       	rjmp	.+160    	; 0x333c <xQueueCRReceiveFromISR+0xd4>
		{
			/* Copy the data from the queue. */
			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    329c:	e9 81       	ldd	r30, Y+1	; 0x01
    329e:	fa 81       	ldd	r31, Y+2	; 0x02
    32a0:	26 81       	ldd	r18, Z+6	; 0x06
    32a2:	37 81       	ldd	r19, Z+7	; 0x07
    32a4:	e9 81       	ldd	r30, Y+1	; 0x01
    32a6:	fa 81       	ldd	r31, Y+2	; 0x02
    32a8:	84 8d       	ldd	r24, Z+28	; 0x1c
    32aa:	88 2f       	mov	r24, r24
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	82 0f       	add	r24, r18
    32b0:	93 1f       	adc	r25, r19
    32b2:	e9 81       	ldd	r30, Y+1	; 0x01
    32b4:	fa 81       	ldd	r31, Y+2	; 0x02
    32b6:	97 83       	std	Z+7, r25	; 0x07
    32b8:	86 83       	std	Z+6, r24	; 0x06
			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
    32ba:	e9 81       	ldd	r30, Y+1	; 0x01
    32bc:	fa 81       	ldd	r31, Y+2	; 0x02
    32be:	26 81       	ldd	r18, Z+6	; 0x06
    32c0:	37 81       	ldd	r19, Z+7	; 0x07
    32c2:	e9 81       	ldd	r30, Y+1	; 0x01
    32c4:	fa 81       	ldd	r31, Y+2	; 0x02
    32c6:	82 81       	ldd	r24, Z+2	; 0x02
    32c8:	93 81       	ldd	r25, Z+3	; 0x03
    32ca:	28 17       	cp	r18, r24
    32cc:	39 07       	cpc	r19, r25
    32ce:	40 f0       	brcs	.+16     	; 0x32e0 <xQueueCRReceiveFromISR+0x78>
			{
				pxQueue->u.pcReadFrom = pxQueue->pcHead;
    32d0:	e9 81       	ldd	r30, Y+1	; 0x01
    32d2:	fa 81       	ldd	r31, Y+2	; 0x02
    32d4:	80 81       	ld	r24, Z
    32d6:	91 81       	ldd	r25, Z+1	; 0x01
    32d8:	e9 81       	ldd	r30, Y+1	; 0x01
    32da:	fa 81       	ldd	r31, Y+2	; 0x02
    32dc:	97 83       	std	Z+7, r25	; 0x07
    32de:	86 83       	std	Z+6, r24	; 0x06
			}
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
			--( pxQueue->uxMessagesWaiting );
    32e0:	e9 81       	ldd	r30, Y+1	; 0x01
    32e2:	fa 81       	ldd	r31, Y+2	; 0x02
    32e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    32e6:	81 50       	subi	r24, 0x01	; 1
    32e8:	e9 81       	ldd	r30, Y+1	; 0x01
    32ea:	fa 81       	ldd	r31, Y+2	; 0x02
    32ec:	82 8f       	std	Z+26, r24	; 0x1a
			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    32ee:	e9 81       	ldd	r30, Y+1	; 0x01
    32f0:	fa 81       	ldd	r31, Y+2	; 0x02
    32f2:	46 81       	ldd	r20, Z+6	; 0x06
    32f4:	57 81       	ldd	r21, Z+7	; 0x07
    32f6:	e9 81       	ldd	r30, Y+1	; 0x01
    32f8:	fa 81       	ldd	r31, Y+2	; 0x02
    32fa:	84 8d       	ldd	r24, Z+28	; 0x1c
    32fc:	28 2f       	mov	r18, r24
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	8e 81       	ldd	r24, Y+6	; 0x06
    3302:	9f 81       	ldd	r25, Y+7	; 0x07
    3304:	ba 01       	movw	r22, r20
    3306:	a9 01       	movw	r20, r18
    3308:	0e 94 79 32 	call	0x64f2	; 0x64f2 <memcpy>

			if( ( *pxCoRoutineWoken ) == pdFALSE )
    330c:	e8 85       	ldd	r30, Y+8	; 0x08
    330e:	f9 85       	ldd	r31, Y+9	; 0x09
    3310:	80 81       	ld	r24, Z
    3312:	88 23       	and	r24, r24
    3314:	81 f4       	brne	.+32     	; 0x3336 <xQueueCRReceiveFromISR+0xce>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3316:	e9 81       	ldd	r30, Y+1	; 0x01
    3318:	fa 81       	ldd	r31, Y+2	; 0x02
    331a:	80 85       	ldd	r24, Z+8	; 0x08
    331c:	88 23       	and	r24, r24
    331e:	59 f0       	breq	.+22     	; 0x3336 <xQueueCRReceiveFromISR+0xce>
				{
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3320:	89 81       	ldd	r24, Y+1	; 0x01
    3322:	9a 81       	ldd	r25, Y+2	; 0x02
    3324:	08 96       	adiw	r24, 0x08	; 8
    3326:	0e 94 2d 09 	call	0x125a	; 0x125a <xCoRoutineRemoveFromEventList>
    332a:	88 23       	and	r24, r24
    332c:	21 f0       	breq	.+8      	; 0x3336 <xQueueCRReceiveFromISR+0xce>
					{
						*pxCoRoutineWoken = pdTRUE;
    332e:	e8 85       	ldd	r30, Y+8	; 0x08
    3330:	f9 85       	ldd	r31, Y+9	; 0x09
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	80 83       	st	Z, r24
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	8b 83       	std	Y+3, r24	; 0x03
    333a:	01 c0       	rjmp	.+2      	; 0x333e <xQueueCRReceiveFromISR+0xd6>
		}
		else
		{
			xReturn = pdFAIL;
    333c:	1b 82       	std	Y+3, r1	; 0x03
		}

		return xReturn;
    333e:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    3340:	29 96       	adiw	r28, 0x09	; 9
    3342:	0f b6       	in	r0, 0x3f	; 63
    3344:	f8 94       	cli
    3346:	de bf       	out	0x3e, r29	; 62
    3348:	0f be       	out	0x3f, r0	; 63
    334a:	cd bf       	out	0x3d, r28	; 61
    334c:	cf 91       	pop	r28
    334e:	df 91       	pop	r29
    3350:	08 95       	ret

00003352 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    3352:	af 92       	push	r10
    3354:	bf 92       	push	r11
    3356:	cf 92       	push	r12
    3358:	df 92       	push	r13
    335a:	ef 92       	push	r14
    335c:	ff 92       	push	r15
    335e:	0f 93       	push	r16
    3360:	1f 93       	push	r17
    3362:	df 93       	push	r29
    3364:	cf 93       	push	r28
    3366:	cd b7       	in	r28, 0x3d	; 61
    3368:	de b7       	in	r29, 0x3e	; 62
    336a:	64 97       	sbiw	r28, 0x14	; 20
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	f8 94       	cli
    3370:	de bf       	out	0x3e, r29	; 62
    3372:	0f be       	out	0x3f, r0	; 63
    3374:	cd bf       	out	0x3d, r28	; 61
    3376:	9f 83       	std	Y+7, r25	; 0x07
    3378:	8e 83       	std	Y+6, r24	; 0x06
    337a:	79 87       	std	Y+9, r23	; 0x09
    337c:	68 87       	std	Y+8, r22	; 0x08
    337e:	5b 87       	std	Y+11, r21	; 0x0b
    3380:	4a 87       	std	Y+10, r20	; 0x0a
    3382:	3d 87       	std	Y+13, r19	; 0x0d
    3384:	2c 87       	std	Y+12, r18	; 0x0c
    3386:	0e 87       	std	Y+14, r16	; 0x0e
    3388:	f8 8a       	std	Y+16, r15	; 0x10
    338a:	ef 86       	std	Y+15, r14	; 0x0f
    338c:	da 8a       	std	Y+18, r13	; 0x12
    338e:	c9 8a       	std	Y+17, r12	; 0x11
    3390:	bc 8a       	std	Y+20, r11	; 0x14
    3392:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    3394:	8a 85       	ldd	r24, Y+10	; 0x0a
    3396:	9b 85       	ldd	r25, Y+11	; 0x0b
    3398:	29 89       	ldd	r18, Y+17	; 0x11
    339a:	3a 89       	ldd	r19, Y+18	; 0x12
    339c:	b9 01       	movw	r22, r18
    339e:	0e 94 0f 22 	call	0x441e	; 0x441e <prvAllocateTCBAndStack>
    33a2:	9c 83       	std	Y+4, r25	; 0x04
    33a4:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    33a6:	8b 81       	ldd	r24, Y+3	; 0x03
    33a8:	9c 81       	ldd	r25, Y+4	; 0x04
    33aa:	00 97       	sbiw	r24, 0x00	; 0
    33ac:	09 f4       	brne	.+2      	; 0x33b0 <xTaskGenericCreate+0x5e>
    33ae:	8d c0       	rjmp	.+282    	; 0x34ca <xTaskGenericCreate+0x178>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    33b0:	eb 81       	ldd	r30, Y+3	; 0x03
    33b2:	fc 81       	ldd	r31, Y+4	; 0x04
    33b4:	27 89       	ldd	r18, Z+23	; 0x17
    33b6:	30 8d       	ldd	r19, Z+24	; 0x18
    33b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    33ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    33bc:	01 97       	sbiw	r24, 0x01	; 1
    33be:	82 0f       	add	r24, r18
    33c0:	93 1f       	adc	r25, r19
    33c2:	9a 83       	std	Y+2, r25	; 0x02
    33c4:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    33c6:	8b 81       	ldd	r24, Y+3	; 0x03
    33c8:	9c 81       	ldd	r25, Y+4	; 0x04
    33ca:	28 85       	ldd	r18, Y+8	; 0x08
    33cc:	39 85       	ldd	r19, Y+9	; 0x09
    33ce:	eb 89       	ldd	r30, Y+19	; 0x13
    33d0:	fc 89       	ldd	r31, Y+20	; 0x14
    33d2:	aa 85       	ldd	r26, Y+10	; 0x0a
    33d4:	bb 85       	ldd	r27, Y+11	; 0x0b
    33d6:	b9 01       	movw	r22, r18
    33d8:	4e 85       	ldd	r20, Y+14	; 0x0e
    33da:	9f 01       	movw	r18, r30
    33dc:	8d 01       	movw	r16, r26
    33de:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    33e2:	89 81       	ldd	r24, Y+1	; 0x01
    33e4:	9a 81       	ldd	r25, Y+2	; 0x02
    33e6:	2e 81       	ldd	r18, Y+6	; 0x06
    33e8:	3f 81       	ldd	r19, Y+7	; 0x07
    33ea:	4c 85       	ldd	r20, Y+12	; 0x0c
    33ec:	5d 85       	ldd	r21, Y+13	; 0x0d
    33ee:	b9 01       	movw	r22, r18
    33f0:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <pxPortInitialiseStack>
    33f4:	eb 81       	ldd	r30, Y+3	; 0x03
    33f6:	fc 81       	ldd	r31, Y+4	; 0x04
    33f8:	91 83       	std	Z+1, r25	; 0x01
    33fa:	80 83       	st	Z, r24
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    33fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    33fe:	98 89       	ldd	r25, Y+16	; 0x10
    3400:	00 97       	sbiw	r24, 0x00	; 0
    3402:	31 f0       	breq	.+12     	; 0x3410 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    3404:	ef 85       	ldd	r30, Y+15	; 0x0f
    3406:	f8 89       	ldd	r31, Y+16	; 0x10
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	9c 81       	ldd	r25, Y+4	; 0x04
    340c:	91 83       	std	Z+1, r25	; 0x01
    340e:	80 83       	st	Z, r24
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    3410:	0f b6       	in	r0, 0x3f	; 63
    3412:	f8 94       	cli
    3414:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    3416:	80 91 14 07 	lds	r24, 0x0714
    341a:	8f 5f       	subi	r24, 0xFF	; 255
    341c:	80 93 14 07 	sts	0x0714, r24
			if( pxCurrentTCB == NULL )
    3420:	80 91 11 07 	lds	r24, 0x0711
    3424:	90 91 12 07 	lds	r25, 0x0712
    3428:	00 97       	sbiw	r24, 0x00	; 0
    342a:	69 f4       	brne	.+26     	; 0x3446 <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    342c:	8b 81       	ldd	r24, Y+3	; 0x03
    342e:	9c 81       	ldd	r25, Y+4	; 0x04
    3430:	90 93 12 07 	sts	0x0712, r25
    3434:	80 93 11 07 	sts	0x0711, r24

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    3438:	80 91 14 07 	lds	r24, 0x0714
    343c:	81 30       	cpi	r24, 0x01	; 1
    343e:	a9 f4       	brne	.+42     	; 0x346a <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    3440:	0e 94 4a 21 	call	0x4294	; 0x4294 <prvInitialiseTaskLists>
    3444:	12 c0       	rjmp	.+36     	; 0x346a <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    3446:	80 91 18 07 	lds	r24, 0x0718
    344a:	88 23       	and	r24, r24
    344c:	71 f4       	brne	.+28     	; 0x346a <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    344e:	e0 91 11 07 	lds	r30, 0x0711
    3452:	f0 91 12 07 	lds	r31, 0x0712
    3456:	96 89       	ldd	r25, Z+22	; 0x16
    3458:	8e 85       	ldd	r24, Y+14	; 0x0e
    345a:	89 17       	cp	r24, r25
    345c:	30 f0       	brcs	.+12     	; 0x346a <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    345e:	8b 81       	ldd	r24, Y+3	; 0x03
    3460:	9c 81       	ldd	r25, Y+4	; 0x04
    3462:	90 93 12 07 	sts	0x0712, r25
    3466:	80 93 11 07 	sts	0x0711, r24
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    346a:	80 91 1c 07 	lds	r24, 0x071C
    346e:	8f 5f       	subi	r24, 0xFF	; 255
    3470:	80 93 1c 07 	sts	0x071C, r24
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    3474:	eb 81       	ldd	r30, Y+3	; 0x03
    3476:	fc 81       	ldd	r31, Y+4	; 0x04
    3478:	96 89       	ldd	r25, Z+22	; 0x16
    347a:	80 91 17 07 	lds	r24, 0x0717
    347e:	89 17       	cp	r24, r25
    3480:	28 f4       	brcc	.+10     	; 0x348c <xTaskGenericCreate+0x13a>
    3482:	eb 81       	ldd	r30, Y+3	; 0x03
    3484:	fc 81       	ldd	r31, Y+4	; 0x04
    3486:	86 89       	ldd	r24, Z+22	; 0x16
    3488:	80 93 17 07 	sts	0x0717, r24
    348c:	eb 81       	ldd	r30, Y+3	; 0x03
    348e:	fc 81       	ldd	r31, Y+4	; 0x04
    3490:	86 89       	ldd	r24, Z+22	; 0x16
    3492:	28 2f       	mov	r18, r24
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	c9 01       	movw	r24, r18
    3498:	88 0f       	add	r24, r24
    349a:	99 1f       	adc	r25, r25
    349c:	88 0f       	add	r24, r24
    349e:	99 1f       	adc	r25, r25
    34a0:	88 0f       	add	r24, r24
    34a2:	99 1f       	adc	r25, r25
    34a4:	82 0f       	add	r24, r18
    34a6:	93 1f       	adc	r25, r19
    34a8:	ac 01       	movw	r20, r24
    34aa:	42 5e       	subi	r20, 0xE2	; 226
    34ac:	58 4f       	sbci	r21, 0xF8	; 248
    34ae:	8b 81       	ldd	r24, Y+3	; 0x03
    34b0:	9c 81       	ldd	r25, Y+4	; 0x04
    34b2:	9c 01       	movw	r18, r24
    34b4:	2e 5f       	subi	r18, 0xFE	; 254
    34b6:	3f 4f       	sbci	r19, 0xFF	; 255
    34b8:	ca 01       	movw	r24, r20
    34ba:	b9 01       	movw	r22, r18
    34bc:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <vListInsertEnd>

			xReturn = pdPASS;
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	8d 83       	std	Y+5, r24	; 0x05
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    34c4:	0f 90       	pop	r0
    34c6:	0f be       	out	0x3f, r0	; 63
    34c8:	02 c0       	rjmp	.+4      	; 0x34ce <xTaskGenericCreate+0x17c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    34ca:	8f ef       	ldi	r24, 0xFF	; 255
    34cc:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    34ce:	8d 81       	ldd	r24, Y+5	; 0x05
    34d0:	81 30       	cpi	r24, 0x01	; 1
    34d2:	71 f4       	brne	.+28     	; 0x34f0 <xTaskGenericCreate+0x19e>
	{
		if( xSchedulerRunning != pdFALSE )
    34d4:	80 91 18 07 	lds	r24, 0x0718
    34d8:	88 23       	and	r24, r24
    34da:	51 f0       	breq	.+20     	; 0x34f0 <xTaskGenericCreate+0x19e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    34dc:	e0 91 11 07 	lds	r30, 0x0711
    34e0:	f0 91 12 07 	lds	r31, 0x0712
    34e4:	96 89       	ldd	r25, Z+22	; 0x16
    34e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    34e8:	98 17       	cp	r25, r24
    34ea:	10 f4       	brcc	.+4      	; 0x34f0 <xTaskGenericCreate+0x19e>
			{
				taskYIELD_IF_USING_PREEMPTION();
    34ec:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vPortYield>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
    34f0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    34f2:	64 96       	adiw	r28, 0x14	; 20
    34f4:	0f b6       	in	r0, 0x3f	; 63
    34f6:	f8 94       	cli
    34f8:	de bf       	out	0x3e, r29	; 62
    34fa:	0f be       	out	0x3f, r0	; 63
    34fc:	cd bf       	out	0x3d, r28	; 61
    34fe:	cf 91       	pop	r28
    3500:	df 91       	pop	r29
    3502:	1f 91       	pop	r17
    3504:	0f 91       	pop	r16
    3506:	ff 90       	pop	r15
    3508:	ef 90       	pop	r14
    350a:	df 90       	pop	r13
    350c:	cf 90       	pop	r12
    350e:	bf 90       	pop	r11
    3510:	af 90       	pop	r10
    3512:	08 95       	ret

00003514 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    3514:	df 93       	push	r29
    3516:	cf 93       	push	r28
    3518:	00 d0       	rcall	.+0      	; 0x351a <vTaskDelete+0x6>
    351a:	00 d0       	rcall	.+0      	; 0x351c <vTaskDelete+0x8>
    351c:	00 d0       	rcall	.+0      	; 0x351e <vTaskDelete+0xa>
    351e:	cd b7       	in	r28, 0x3d	; 61
    3520:	de b7       	in	r29, 0x3e	; 62
    3522:	9c 83       	std	Y+4, r25	; 0x04
    3524:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    3526:	0f b6       	in	r0, 0x3f	; 63
    3528:	f8 94       	cli
    352a:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    352c:	8b 81       	ldd	r24, Y+3	; 0x03
    352e:	9c 81       	ldd	r25, Y+4	; 0x04
    3530:	00 97       	sbiw	r24, 0x00	; 0
    3532:	39 f4       	brne	.+14     	; 0x3542 <vTaskDelete+0x2e>
    3534:	80 91 11 07 	lds	r24, 0x0711
    3538:	90 91 12 07 	lds	r25, 0x0712
    353c:	9e 83       	std	Y+6, r25	; 0x06
    353e:	8d 83       	std	Y+5, r24	; 0x05
    3540:	04 c0       	rjmp	.+8      	; 0x354a <vTaskDelete+0x36>
    3542:	8b 81       	ldd	r24, Y+3	; 0x03
    3544:	9c 81       	ldd	r25, Y+4	; 0x04
    3546:	9e 83       	std	Y+6, r25	; 0x06
    3548:	8d 83       	std	Y+5, r24	; 0x05
    354a:	8d 81       	ldd	r24, Y+5	; 0x05
    354c:	9e 81       	ldd	r25, Y+6	; 0x06
    354e:	9a 83       	std	Y+2, r25	; 0x02
    3550:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3552:	89 81       	ldd	r24, Y+1	; 0x01
    3554:	9a 81       	ldd	r25, Y+2	; 0x02
    3556:	02 96       	adiw	r24, 0x02	; 2
    3558:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    355c:	e9 81       	ldd	r30, Y+1	; 0x01
    355e:	fa 81       	ldd	r31, Y+2	; 0x02
    3560:	84 89       	ldd	r24, Z+20	; 0x14
    3562:	95 89       	ldd	r25, Z+21	; 0x15
    3564:	00 97       	sbiw	r24, 0x00	; 0
    3566:	29 f0       	breq	.+10     	; 0x3572 <vTaskDelete+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3568:	89 81       	ldd	r24, Y+1	; 0x01
    356a:	9a 81       	ldd	r25, Y+2	; 0x02
    356c:	0c 96       	adiw	r24, 0x0c	; 12
    356e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    3572:	89 81       	ldd	r24, Y+1	; 0x01
    3574:	9a 81       	ldd	r25, Y+2	; 0x02
    3576:	9c 01       	movw	r18, r24
    3578:	2e 5f       	subi	r18, 0xFE	; 254
    357a:	3f 4f       	sbci	r19, 0xFF	; 255
    357c:	83 e7       	ldi	r24, 0x73	; 115
    357e:	97 e0       	ldi	r25, 0x07	; 7
    3580:	b9 01       	movw	r22, r18
    3582:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    3586:	80 91 13 07 	lds	r24, 0x0713
    358a:	8f 5f       	subi	r24, 0xFF	; 255
    358c:	80 93 13 07 	sts	0x0713, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    3590:	80 91 1c 07 	lds	r24, 0x071C
    3594:	8f 5f       	subi	r24, 0xFF	; 255
    3596:	80 93 1c 07 	sts	0x071C, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    359a:	0f 90       	pop	r0
    359c:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    359e:	80 91 18 07 	lds	r24, 0x0718
    35a2:	88 23       	and	r24, r24
    35a4:	99 f0       	breq	.+38     	; 0x35cc <vTaskDelete+0xb8>
		{
			if( pxTCB == pxCurrentTCB )
    35a6:	20 91 11 07 	lds	r18, 0x0711
    35aa:	30 91 12 07 	lds	r19, 0x0712
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
    35b0:	9a 81       	ldd	r25, Y+2	; 0x02
    35b2:	82 17       	cp	r24, r18
    35b4:	93 07       	cpc	r25, r19
    35b6:	19 f4       	brne	.+6      	; 0x35be <vTaskDelete+0xaa>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
    35b8:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vPortYield>
    35bc:	07 c0       	rjmp	.+14     	; 0x35cc <vTaskDelete+0xb8>
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
    35be:	0f b6       	in	r0, 0x3f	; 63
    35c0:	f8 94       	cli
    35c2:	0f 92       	push	r0
				{
					prvResetNextTaskUnblockTime();
    35c4:	0e 94 69 22 	call	0x44d2	; 0x44d2 <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
    35c8:	0f 90       	pop	r0
    35ca:	0f be       	out	0x3f, r0	; 63
			}
		}
	}
    35cc:	26 96       	adiw	r28, 0x06	; 6
    35ce:	0f b6       	in	r0, 0x3f	; 63
    35d0:	f8 94       	cli
    35d2:	de bf       	out	0x3e, r29	; 62
    35d4:	0f be       	out	0x3f, r0	; 63
    35d6:	cd bf       	out	0x3d, r28	; 61
    35d8:	cf 91       	pop	r28
    35da:	df 91       	pop	r29
    35dc:	08 95       	ret

000035de <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    35de:	df 93       	push	r29
    35e0:	cf 93       	push	r28
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
    35e6:	2a 97       	sbiw	r28, 0x0a	; 10
    35e8:	0f b6       	in	r0, 0x3f	; 63
    35ea:	f8 94       	cli
    35ec:	de bf       	out	0x3e, r29	; 62
    35ee:	0f be       	out	0x3f, r0	; 63
    35f0:	cd bf       	out	0x3d, r28	; 61
    35f2:	98 87       	std	Y+8, r25	; 0x08
    35f4:	8f 83       	std	Y+7, r24	; 0x07
    35f6:	7a 87       	std	Y+10, r23	; 0x0a
    35f8:	69 87       	std	Y+9, r22	; 0x09
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    35fa:	1b 82       	std	Y+3, r1	; 0x03

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    35fc:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    3600:	80 91 15 07 	lds	r24, 0x0715
    3604:	90 91 16 07 	lds	r25, 0x0716
    3608:	9a 83       	std	Y+2, r25	; 0x02
    360a:	89 83       	std	Y+1, r24	; 0x01

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    360c:	ef 81       	ldd	r30, Y+7	; 0x07
    360e:	f8 85       	ldd	r31, Y+8	; 0x08
    3610:	20 81       	ld	r18, Z
    3612:	31 81       	ldd	r19, Z+1	; 0x01
    3614:	89 85       	ldd	r24, Y+9	; 0x09
    3616:	9a 85       	ldd	r25, Y+10	; 0x0a
    3618:	82 0f       	add	r24, r18
    361a:	93 1f       	adc	r25, r19
    361c:	9e 83       	std	Y+6, r25	; 0x06
    361e:	8d 83       	std	Y+5, r24	; 0x05

			if( xConstTickCount < *pxPreviousWakeTime )
    3620:	ef 81       	ldd	r30, Y+7	; 0x07
    3622:	f8 85       	ldd	r31, Y+8	; 0x08
    3624:	20 81       	ld	r18, Z
    3626:	31 81       	ldd	r19, Z+1	; 0x01
    3628:	89 81       	ldd	r24, Y+1	; 0x01
    362a:	9a 81       	ldd	r25, Y+2	; 0x02
    362c:	82 17       	cp	r24, r18
    362e:	93 07       	cpc	r25, r19
    3630:	98 f4       	brcc	.+38     	; 0x3658 <vTaskDelayUntil+0x7a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    3632:	ef 81       	ldd	r30, Y+7	; 0x07
    3634:	f8 85       	ldd	r31, Y+8	; 0x08
    3636:	20 81       	ld	r18, Z
    3638:	31 81       	ldd	r19, Z+1	; 0x01
    363a:	8d 81       	ldd	r24, Y+5	; 0x05
    363c:	9e 81       	ldd	r25, Y+6	; 0x06
    363e:	82 17       	cp	r24, r18
    3640:	93 07       	cpc	r25, r19
    3642:	e0 f4       	brcc	.+56     	; 0x367c <vTaskDelayUntil+0x9e>
    3644:	2d 81       	ldd	r18, Y+5	; 0x05
    3646:	3e 81       	ldd	r19, Y+6	; 0x06
    3648:	89 81       	ldd	r24, Y+1	; 0x01
    364a:	9a 81       	ldd	r25, Y+2	; 0x02
    364c:	82 17       	cp	r24, r18
    364e:	93 07       	cpc	r25, r19
    3650:	a8 f4       	brcc	.+42     	; 0x367c <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	8b 83       	std	Y+3, r24	; 0x03
    3656:	12 c0       	rjmp	.+36     	; 0x367c <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    3658:	ef 81       	ldd	r30, Y+7	; 0x07
    365a:	f8 85       	ldd	r31, Y+8	; 0x08
    365c:	20 81       	ld	r18, Z
    365e:	31 81       	ldd	r19, Z+1	; 0x01
    3660:	8d 81       	ldd	r24, Y+5	; 0x05
    3662:	9e 81       	ldd	r25, Y+6	; 0x06
    3664:	82 17       	cp	r24, r18
    3666:	93 07       	cpc	r25, r19
    3668:	38 f0       	brcs	.+14     	; 0x3678 <vTaskDelayUntil+0x9a>
    366a:	2d 81       	ldd	r18, Y+5	; 0x05
    366c:	3e 81       	ldd	r19, Y+6	; 0x06
    366e:	89 81       	ldd	r24, Y+1	; 0x01
    3670:	9a 81       	ldd	r25, Y+2	; 0x02
    3672:	82 17       	cp	r24, r18
    3674:	93 07       	cpc	r25, r19
    3676:	10 f4       	brcc	.+4      	; 0x367c <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	8b 83       	std	Y+3, r24	; 0x03
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    367c:	ef 81       	ldd	r30, Y+7	; 0x07
    367e:	f8 85       	ldd	r31, Y+8	; 0x08
    3680:	8d 81       	ldd	r24, Y+5	; 0x05
    3682:	9e 81       	ldd	r25, Y+6	; 0x06
    3684:	91 83       	std	Z+1, r25	; 0x01
    3686:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    3688:	8b 81       	ldd	r24, Y+3	; 0x03
    368a:	88 23       	and	r24, r24
    368c:	59 f0       	breq	.+22     	; 0x36a4 <vTaskDelayUntil+0xc6>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    368e:	80 91 11 07 	lds	r24, 0x0711
    3692:	90 91 12 07 	lds	r25, 0x0712
    3696:	02 96       	adiw	r24, 0x02	; 2
    3698:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
    369c:	8d 81       	ldd	r24, Y+5	; 0x05
    369e:	9e 81       	ldd	r25, Y+6	; 0x06
    36a0:	0e 94 c6 21 	call	0x438c	; 0x438c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    36a4:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <xTaskResumeAll>
    36a8:	8c 83       	std	Y+4, r24	; 0x04

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    36aa:	8c 81       	ldd	r24, Y+4	; 0x04
    36ac:	88 23       	and	r24, r24
    36ae:	11 f4       	brne	.+4      	; 0x36b4 <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    36b0:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    36b4:	2a 96       	adiw	r28, 0x0a	; 10
    36b6:	0f b6       	in	r0, 0x3f	; 63
    36b8:	f8 94       	cli
    36ba:	de bf       	out	0x3e, r29	; 62
    36bc:	0f be       	out	0x3f, r0	; 63
    36be:	cd bf       	out	0x3d, r28	; 61
    36c0:	cf 91       	pop	r28
    36c2:	df 91       	pop	r29
    36c4:	08 95       	ret

000036c6 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    36c6:	df 93       	push	r29
    36c8:	cf 93       	push	r28
    36ca:	00 d0       	rcall	.+0      	; 0x36cc <vTaskDelay+0x6>
    36cc:	00 d0       	rcall	.+0      	; 0x36ce <vTaskDelay+0x8>
    36ce:	0f 92       	push	r0
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
    36d4:	9d 83       	std	Y+5, r25	; 0x05
    36d6:	8c 83       	std	Y+4, r24	; 0x04
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
    36d8:	19 82       	std	Y+1, r1	; 0x01


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    36da:	8c 81       	ldd	r24, Y+4	; 0x04
    36dc:	9d 81       	ldd	r25, Y+5	; 0x05
    36de:	00 97       	sbiw	r24, 0x00	; 0
    36e0:	d1 f0       	breq	.+52     	; 0x3716 <vTaskDelay+0x50>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    36e2:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    36e6:	20 91 15 07 	lds	r18, 0x0715
    36ea:	30 91 16 07 	lds	r19, 0x0716
    36ee:	8c 81       	ldd	r24, Y+4	; 0x04
    36f0:	9d 81       	ldd	r25, Y+5	; 0x05
    36f2:	82 0f       	add	r24, r18
    36f4:	93 1f       	adc	r25, r19
    36f6:	9b 83       	std	Y+3, r25	; 0x03
    36f8:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    36fa:	80 91 11 07 	lds	r24, 0x0711
    36fe:	90 91 12 07 	lds	r25, 0x0712
    3702:	02 96       	adiw	r24, 0x02	; 2
    3704:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3708:	8a 81       	ldd	r24, Y+2	; 0x02
    370a:	9b 81       	ldd	r25, Y+3	; 0x03
    370c:	0e 94 c6 21 	call	0x438c	; 0x438c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3710:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <xTaskResumeAll>
    3714:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3716:	89 81       	ldd	r24, Y+1	; 0x01
    3718:	88 23       	and	r24, r24
    371a:	11 f4       	brne	.+4      	; 0x3720 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    371c:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3720:	0f 90       	pop	r0
    3722:	0f 90       	pop	r0
    3724:	0f 90       	pop	r0
    3726:	0f 90       	pop	r0
    3728:	0f 90       	pop	r0
    372a:	cf 91       	pop	r28
    372c:	df 91       	pop	r29
    372e:	08 95       	ret

00003730 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
    3730:	df 93       	push	r29
    3732:	cf 93       	push	r28
    3734:	cd b7       	in	r28, 0x3d	; 61
    3736:	de b7       	in	r29, 0x3e	; 62
    3738:	27 97       	sbiw	r28, 0x07	; 7
    373a:	0f b6       	in	r0, 0x3f	; 63
    373c:	f8 94       	cli
    373e:	de bf       	out	0x3e, r29	; 62
    3740:	0f be       	out	0x3f, r0	; 63
    3742:	cd bf       	out	0x3d, r28	; 61
    3744:	9d 83       	std	Y+5, r25	; 0x05
    3746:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
    3748:	0f b6       	in	r0, 0x3f	; 63
    374a:	f8 94       	cli
    374c:	0f 92       	push	r0
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( xTask );
    374e:	8c 81       	ldd	r24, Y+4	; 0x04
    3750:	9d 81       	ldd	r25, Y+5	; 0x05
    3752:	00 97       	sbiw	r24, 0x00	; 0
    3754:	39 f4       	brne	.+14     	; 0x3764 <uxTaskPriorityGet+0x34>
    3756:	80 91 11 07 	lds	r24, 0x0711
    375a:	90 91 12 07 	lds	r25, 0x0712
    375e:	9f 83       	std	Y+7, r25	; 0x07
    3760:	8e 83       	std	Y+6, r24	; 0x06
    3762:	04 c0       	rjmp	.+8      	; 0x376c <uxTaskPriorityGet+0x3c>
    3764:	8c 81       	ldd	r24, Y+4	; 0x04
    3766:	9d 81       	ldd	r25, Y+5	; 0x05
    3768:	9f 83       	std	Y+7, r25	; 0x07
    376a:	8e 83       	std	Y+6, r24	; 0x06
    376c:	8e 81       	ldd	r24, Y+6	; 0x06
    376e:	9f 81       	ldd	r25, Y+7	; 0x07
    3770:	9b 83       	std	Y+3, r25	; 0x03
    3772:	8a 83       	std	Y+2, r24	; 0x02
			uxReturn = pxTCB->uxPriority;
    3774:	ea 81       	ldd	r30, Y+2	; 0x02
    3776:	fb 81       	ldd	r31, Y+3	; 0x03
    3778:	86 89       	ldd	r24, Z+22	; 0x16
    377a:	89 83       	std	Y+1, r24	; 0x01
		}
		taskEXIT_CRITICAL();
    377c:	0f 90       	pop	r0
    377e:	0f be       	out	0x3f, r0	; 63

		return uxReturn;
    3780:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3782:	27 96       	adiw	r28, 0x07	; 7
    3784:	0f b6       	in	r0, 0x3f	; 63
    3786:	f8 94       	cli
    3788:	de bf       	out	0x3e, r29	; 62
    378a:	0f be       	out	0x3f, r0	; 63
    378c:	cd bf       	out	0x3d, r28	; 61
    378e:	cf 91       	pop	r28
    3790:	df 91       	pop	r29
    3792:	08 95       	ret

00003794 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    3794:	df 93       	push	r29
    3796:	cf 93       	push	r28
    3798:	cd b7       	in	r28, 0x3d	; 61
    379a:	de b7       	in	r29, 0x3e	; 62
    379c:	2a 97       	sbiw	r28, 0x0a	; 10
    379e:	0f b6       	in	r0, 0x3f	; 63
    37a0:	f8 94       	cli
    37a2:	de bf       	out	0x3e, r29	; 62
    37a4:	0f be       	out	0x3f, r0	; 63
    37a6:	cd bf       	out	0x3d, r28	; 61
    37a8:	9f 83       	std	Y+7, r25	; 0x07
    37aa:	8e 83       	std	Y+6, r24	; 0x06
    37ac:	68 87       	std	Y+8, r22	; 0x08
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    37ae:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    37b0:	88 85       	ldd	r24, Y+8	; 0x08
    37b2:	86 30       	cpi	r24, 0x06	; 6
    37b4:	10 f0       	brcs	.+4      	; 0x37ba <vTaskPrioritySet+0x26>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    37b6:	85 e0       	ldi	r24, 0x05	; 5
    37b8:	88 87       	std	Y+8, r24	; 0x08
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    37ba:	0f b6       	in	r0, 0x3f	; 63
    37bc:	f8 94       	cli
    37be:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    37c0:	8e 81       	ldd	r24, Y+6	; 0x06
    37c2:	9f 81       	ldd	r25, Y+7	; 0x07
    37c4:	00 97       	sbiw	r24, 0x00	; 0
    37c6:	39 f4       	brne	.+14     	; 0x37d6 <vTaskPrioritySet+0x42>
    37c8:	80 91 11 07 	lds	r24, 0x0711
    37cc:	90 91 12 07 	lds	r25, 0x0712
    37d0:	9a 87       	std	Y+10, r25	; 0x0a
    37d2:	89 87       	std	Y+9, r24	; 0x09
    37d4:	04 c0       	rjmp	.+8      	; 0x37de <vTaskPrioritySet+0x4a>
    37d6:	8e 81       	ldd	r24, Y+6	; 0x06
    37d8:	9f 81       	ldd	r25, Y+7	; 0x07
    37da:	9a 87       	std	Y+10, r25	; 0x0a
    37dc:	89 87       	std	Y+9, r24	; 0x09
    37de:	89 85       	ldd	r24, Y+9	; 0x09
    37e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e2:	9d 83       	std	Y+5, r25	; 0x05
    37e4:	8c 83       	std	Y+4, r24	; 0x04

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    37e6:	ec 81       	ldd	r30, Y+4	; 0x04
    37e8:	fd 81       	ldd	r31, Y+5	; 0x05
    37ea:	85 a5       	ldd	r24, Z+45	; 0x2d
    37ec:	8b 83       	std	Y+3, r24	; 0x03
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    37ee:	9b 81       	ldd	r25, Y+3	; 0x03
    37f0:	88 85       	ldd	r24, Y+8	; 0x08
    37f2:	98 17       	cp	r25, r24
    37f4:	09 f4       	brne	.+2      	; 0x37f8 <vTaskPrioritySet+0x64>
    37f6:	8d c0       	rjmp	.+282    	; 0x3912 <vTaskPrioritySet+0x17e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    37f8:	98 85       	ldd	r25, Y+8	; 0x08
    37fa:	8b 81       	ldd	r24, Y+3	; 0x03
    37fc:	89 17       	cp	r24, r25
    37fe:	a0 f4       	brcc	.+40     	; 0x3828 <vTaskPrioritySet+0x94>
				{
					if( pxTCB != pxCurrentTCB )
    3800:	20 91 11 07 	lds	r18, 0x0711
    3804:	30 91 12 07 	lds	r19, 0x0712
    3808:	8c 81       	ldd	r24, Y+4	; 0x04
    380a:	9d 81       	ldd	r25, Y+5	; 0x05
    380c:	82 17       	cp	r24, r18
    380e:	93 07       	cpc	r25, r19
    3810:	b1 f0       	breq	.+44     	; 0x383e <vTaskPrioritySet+0xaa>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    3812:	e0 91 11 07 	lds	r30, 0x0711
    3816:	f0 91 12 07 	lds	r31, 0x0712
    381a:	96 89       	ldd	r25, Z+22	; 0x16
    381c:	88 85       	ldd	r24, Y+8	; 0x08
    381e:	89 17       	cp	r24, r25
    3820:	70 f0       	brcs	.+28     	; 0x383e <vTaskPrioritySet+0xaa>
						{
							xYieldRequired = pdTRUE;
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	89 83       	std	Y+1, r24	; 0x01
    3826:	0b c0       	rjmp	.+22     	; 0x383e <vTaskPrioritySet+0xaa>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    3828:	20 91 11 07 	lds	r18, 0x0711
    382c:	30 91 12 07 	lds	r19, 0x0712
    3830:	8c 81       	ldd	r24, Y+4	; 0x04
    3832:	9d 81       	ldd	r25, Y+5	; 0x05
    3834:	82 17       	cp	r24, r18
    3836:	93 07       	cpc	r25, r19
    3838:	11 f4       	brne	.+4      	; 0x383e <vTaskPrioritySet+0xaa>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
    383a:	81 e0       	ldi	r24, 0x01	; 1
    383c:	89 83       	std	Y+1, r24	; 0x01
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    383e:	ec 81       	ldd	r30, Y+4	; 0x04
    3840:	fd 81       	ldd	r31, Y+5	; 0x05
    3842:	86 89       	ldd	r24, Z+22	; 0x16
    3844:	8a 83       	std	Y+2, r24	; 0x02

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3846:	ec 81       	ldd	r30, Y+4	; 0x04
    3848:	fd 81       	ldd	r31, Y+5	; 0x05
    384a:	95 a5       	ldd	r25, Z+45	; 0x2d
    384c:	ec 81       	ldd	r30, Y+4	; 0x04
    384e:	fd 81       	ldd	r31, Y+5	; 0x05
    3850:	86 89       	ldd	r24, Z+22	; 0x16
    3852:	98 17       	cp	r25, r24
    3854:	21 f4       	brne	.+8      	; 0x385e <vTaskPrioritySet+0xca>
					{
						pxTCB->uxPriority = uxNewPriority;
    3856:	ec 81       	ldd	r30, Y+4	; 0x04
    3858:	fd 81       	ldd	r31, Y+5	; 0x05
    385a:	88 85       	ldd	r24, Y+8	; 0x08
    385c:	86 8b       	std	Z+22, r24	; 0x16
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    385e:	ec 81       	ldd	r30, Y+4	; 0x04
    3860:	fd 81       	ldd	r31, Y+5	; 0x05
    3862:	88 85       	ldd	r24, Y+8	; 0x08
    3864:	85 a7       	std	Z+45, r24	; 0x2d
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3866:	ec 81       	ldd	r30, Y+4	; 0x04
    3868:	fd 81       	ldd	r31, Y+5	; 0x05
    386a:	84 85       	ldd	r24, Z+12	; 0x0c
    386c:	95 85       	ldd	r25, Z+13	; 0x0d
    386e:	99 23       	and	r25, r25
    3870:	5c f0       	brlt	.+22     	; 0x3888 <vTaskPrioritySet+0xf4>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3872:	88 85       	ldd	r24, Y+8	; 0x08
    3874:	28 2f       	mov	r18, r24
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	86 e0       	ldi	r24, 0x06	; 6
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	82 1b       	sub	r24, r18
    387e:	93 0b       	sbc	r25, r19
    3880:	ec 81       	ldd	r30, Y+4	; 0x04
    3882:	fd 81       	ldd	r31, Y+5	; 0x05
    3884:	95 87       	std	Z+13, r25	; 0x0d
    3886:	84 87       	std	Z+12, r24	; 0x0c

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3888:	ec 81       	ldd	r30, Y+4	; 0x04
    388a:	fd 81       	ldd	r31, Y+5	; 0x05
    388c:	42 85       	ldd	r20, Z+10	; 0x0a
    388e:	53 85       	ldd	r21, Z+11	; 0x0b
    3890:	8a 81       	ldd	r24, Y+2	; 0x02
    3892:	28 2f       	mov	r18, r24
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	c9 01       	movw	r24, r18
    3898:	88 0f       	add	r24, r24
    389a:	99 1f       	adc	r25, r25
    389c:	88 0f       	add	r24, r24
    389e:	99 1f       	adc	r25, r25
    38a0:	88 0f       	add	r24, r24
    38a2:	99 1f       	adc	r25, r25
    38a4:	82 0f       	add	r24, r18
    38a6:	93 1f       	adc	r25, r19
    38a8:	82 5e       	subi	r24, 0xE2	; 226
    38aa:	98 4f       	sbci	r25, 0xF8	; 248
    38ac:	48 17       	cp	r20, r24
    38ae:	59 07       	cpc	r21, r25
    38b0:	59 f5       	brne	.+86     	; 0x3908 <vTaskPrioritySet+0x174>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    38b2:	8c 81       	ldd	r24, Y+4	; 0x04
    38b4:	9d 81       	ldd	r25, Y+5	; 0x05
    38b6:	02 96       	adiw	r24, 0x02	; 2
    38b8:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    38bc:	ec 81       	ldd	r30, Y+4	; 0x04
    38be:	fd 81       	ldd	r31, Y+5	; 0x05
    38c0:	96 89       	ldd	r25, Z+22	; 0x16
    38c2:	80 91 17 07 	lds	r24, 0x0717
    38c6:	89 17       	cp	r24, r25
    38c8:	28 f4       	brcc	.+10     	; 0x38d4 <vTaskPrioritySet+0x140>
    38ca:	ec 81       	ldd	r30, Y+4	; 0x04
    38cc:	fd 81       	ldd	r31, Y+5	; 0x05
    38ce:	86 89       	ldd	r24, Z+22	; 0x16
    38d0:	80 93 17 07 	sts	0x0717, r24
    38d4:	ec 81       	ldd	r30, Y+4	; 0x04
    38d6:	fd 81       	ldd	r31, Y+5	; 0x05
    38d8:	86 89       	ldd	r24, Z+22	; 0x16
    38da:	28 2f       	mov	r18, r24
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	c9 01       	movw	r24, r18
    38e0:	88 0f       	add	r24, r24
    38e2:	99 1f       	adc	r25, r25
    38e4:	88 0f       	add	r24, r24
    38e6:	99 1f       	adc	r25, r25
    38e8:	88 0f       	add	r24, r24
    38ea:	99 1f       	adc	r25, r25
    38ec:	82 0f       	add	r24, r18
    38ee:	93 1f       	adc	r25, r19
    38f0:	ac 01       	movw	r20, r24
    38f2:	42 5e       	subi	r20, 0xE2	; 226
    38f4:	58 4f       	sbci	r21, 0xF8	; 248
    38f6:	8c 81       	ldd	r24, Y+4	; 0x04
    38f8:	9d 81       	ldd	r25, Y+5	; 0x05
    38fa:	9c 01       	movw	r18, r24
    38fc:	2e 5f       	subi	r18, 0xFE	; 254
    38fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3900:	ca 01       	movw	r24, r20
    3902:	b9 01       	movw	r22, r18
    3904:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
    3908:	89 81       	ldd	r24, Y+1	; 0x01
    390a:	81 30       	cpi	r24, 0x01	; 1
    390c:	11 f4       	brne	.+4      	; 0x3912 <vTaskPrioritySet+0x17e>
				{
					taskYIELD_IF_USING_PREEMPTION();
    390e:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    3912:	0f 90       	pop	r0
    3914:	0f be       	out	0x3f, r0	; 63
	}
    3916:	2a 96       	adiw	r28, 0x0a	; 10
    3918:	0f b6       	in	r0, 0x3f	; 63
    391a:	f8 94       	cli
    391c:	de bf       	out	0x3e, r29	; 62
    391e:	0f be       	out	0x3f, r0	; 63
    3920:	cd bf       	out	0x3d, r28	; 61
    3922:	cf 91       	pop	r28
    3924:	df 91       	pop	r29
    3926:	08 95       	ret

00003928 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    3928:	af 92       	push	r10
    392a:	bf 92       	push	r11
    392c:	cf 92       	push	r12
    392e:	df 92       	push	r13
    3930:	ef 92       	push	r14
    3932:	ff 92       	push	r15
    3934:	0f 93       	push	r16
    3936:	df 93       	push	r29
    3938:	cf 93       	push	r28
    393a:	0f 92       	push	r0
    393c:	cd b7       	in	r28, 0x3d	; 61
    393e:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    3940:	80 ec       	ldi	r24, 0xC0	; 192
    3942:	90 e2       	ldi	r25, 0x20	; 32
    3944:	28 e7       	ldi	r18, 0x78	; 120
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	b9 01       	movw	r22, r18
    394a:	45 e5       	ldi	r20, 0x55	; 85
    394c:	50 e0       	ldi	r21, 0x00	; 0
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	00 e0       	ldi	r16, 0x00	; 0
    3954:	ee 24       	eor	r14, r14
    3956:	ff 24       	eor	r15, r15
    3958:	cc 24       	eor	r12, r12
    395a:	dd 24       	eor	r13, r13
    395c:	aa 24       	eor	r10, r10
    395e:	bb 24       	eor	r11, r11
    3960:	0e 94 a9 19 	call	0x3352	; 0x3352 <xTaskGenericCreate>
    3964:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    3966:	89 81       	ldd	r24, Y+1	; 0x01
    3968:	81 30       	cpi	r24, 0x01	; 1
    396a:	51 f4       	brne	.+20     	; 0x3980 <vTaskStartScheduler+0x58>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    396c:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	80 93 18 07 	sts	0x0718, r24
		xTickCount = ( TickType_t ) 0U;
    3974:	10 92 16 07 	sts	0x0716, r1
    3978:	10 92 15 07 	sts	0x0715, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    397c:	0e 94 ac 10 	call	0x2158	; 0x2158 <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
    3980:	0f 90       	pop	r0
    3982:	cf 91       	pop	r28
    3984:	df 91       	pop	r29
    3986:	0f 91       	pop	r16
    3988:	ff 90       	pop	r15
    398a:	ef 90       	pop	r14
    398c:	df 90       	pop	r13
    398e:	cf 90       	pop	r12
    3990:	bf 90       	pop	r11
    3992:	af 90       	pop	r10
    3994:	08 95       	ret

00003996 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3996:	df 93       	push	r29
    3998:	cf 93       	push	r28
    399a:	cd b7       	in	r28, 0x3d	; 61
    399c:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    399e:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    39a0:	10 92 18 07 	sts	0x0718, r1
	vPortEndScheduler();
    39a4:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <vPortEndScheduler>
}
    39a8:	cf 91       	pop	r28
    39aa:	df 91       	pop	r29
    39ac:	08 95       	ret

000039ae <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    39ae:	df 93       	push	r29
    39b0:	cf 93       	push	r28
    39b2:	cd b7       	in	r28, 0x3d	; 61
    39b4:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    39b6:	80 91 1d 07 	lds	r24, 0x071D
    39ba:	8f 5f       	subi	r24, 0xFF	; 255
    39bc:	80 93 1d 07 	sts	0x071D, r24
}
    39c0:	cf 91       	pop	r28
    39c2:	df 91       	pop	r29
    39c4:	08 95       	ret

000039c6 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    39c6:	df 93       	push	r29
    39c8:	cf 93       	push	r28
    39ca:	00 d0       	rcall	.+0      	; 0x39cc <xTaskResumeAll+0x6>
    39cc:	0f 92       	push	r0
    39ce:	cd b7       	in	r28, 0x3d	; 61
    39d0:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    39d2:	19 82       	std	Y+1, r1	; 0x01
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    39d4:	0f b6       	in	r0, 0x3f	; 63
    39d6:	f8 94       	cli
    39d8:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    39da:	80 91 1d 07 	lds	r24, 0x071D
    39de:	81 50       	subi	r24, 0x01	; 1
    39e0:	80 93 1d 07 	sts	0x071D, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    39e4:	80 91 1d 07 	lds	r24, 0x071D
    39e8:	88 23       	and	r24, r24
    39ea:	09 f0       	breq	.+2      	; 0x39ee <xTaskResumeAll+0x28>
    39ec:	6d c0       	rjmp	.+218    	; 0x3ac8 <xTaskResumeAll+0x102>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    39ee:	80 91 14 07 	lds	r24, 0x0714
    39f2:	88 23       	and	r24, r24
    39f4:	09 f4       	brne	.+2      	; 0x39f8 <xTaskResumeAll+0x32>
    39f6:	68 c0       	rjmp	.+208    	; 0x3ac8 <xTaskResumeAll+0x102>
    39f8:	45 c0       	rjmp	.+138    	; 0x3a84 <xTaskResumeAll+0xbe>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    39fa:	e0 91 6f 07 	lds	r30, 0x076F
    39fe:	f0 91 70 07 	lds	r31, 0x0770
    3a02:	86 81       	ldd	r24, Z+6	; 0x06
    3a04:	97 81       	ldd	r25, Z+7	; 0x07
    3a06:	9b 83       	std	Y+3, r25	; 0x03
    3a08:	8a 83       	std	Y+2, r24	; 0x02
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a0e:	0c 96       	adiw	r24, 0x0c	; 12
    3a10:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3a14:	8a 81       	ldd	r24, Y+2	; 0x02
    3a16:	9b 81       	ldd	r25, Y+3	; 0x03
    3a18:	02 96       	adiw	r24, 0x02	; 2
    3a1a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3a1e:	ea 81       	ldd	r30, Y+2	; 0x02
    3a20:	fb 81       	ldd	r31, Y+3	; 0x03
    3a22:	96 89       	ldd	r25, Z+22	; 0x16
    3a24:	80 91 17 07 	lds	r24, 0x0717
    3a28:	89 17       	cp	r24, r25
    3a2a:	28 f4       	brcc	.+10     	; 0x3a36 <xTaskResumeAll+0x70>
    3a2c:	ea 81       	ldd	r30, Y+2	; 0x02
    3a2e:	fb 81       	ldd	r31, Y+3	; 0x03
    3a30:	86 89       	ldd	r24, Z+22	; 0x16
    3a32:	80 93 17 07 	sts	0x0717, r24
    3a36:	ea 81       	ldd	r30, Y+2	; 0x02
    3a38:	fb 81       	ldd	r31, Y+3	; 0x03
    3a3a:	86 89       	ldd	r24, Z+22	; 0x16
    3a3c:	28 2f       	mov	r18, r24
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	c9 01       	movw	r24, r18
    3a42:	88 0f       	add	r24, r24
    3a44:	99 1f       	adc	r25, r25
    3a46:	88 0f       	add	r24, r24
    3a48:	99 1f       	adc	r25, r25
    3a4a:	88 0f       	add	r24, r24
    3a4c:	99 1f       	adc	r25, r25
    3a4e:	82 0f       	add	r24, r18
    3a50:	93 1f       	adc	r25, r19
    3a52:	ac 01       	movw	r20, r24
    3a54:	42 5e       	subi	r20, 0xE2	; 226
    3a56:	58 4f       	sbci	r21, 0xF8	; 248
    3a58:	8a 81       	ldd	r24, Y+2	; 0x02
    3a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a5c:	9c 01       	movw	r18, r24
    3a5e:	2e 5f       	subi	r18, 0xFE	; 254
    3a60:	3f 4f       	sbci	r19, 0xFF	; 255
    3a62:	ca 01       	movw	r24, r20
    3a64:	b9 01       	movw	r22, r18
    3a66:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3a6a:	ea 81       	ldd	r30, Y+2	; 0x02
    3a6c:	fb 81       	ldd	r31, Y+3	; 0x03
    3a6e:	96 89       	ldd	r25, Z+22	; 0x16
    3a70:	e0 91 11 07 	lds	r30, 0x0711
    3a74:	f0 91 12 07 	lds	r31, 0x0712
    3a78:	86 89       	ldd	r24, Z+22	; 0x16
    3a7a:	98 17       	cp	r25, r24
    3a7c:	18 f0       	brcs	.+6      	; 0x3a84 <xTaskResumeAll+0xbe>
					{
						xYieldPending = pdTRUE;
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	80 93 1a 07 	sts	0x071A, r24
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3a84:	80 91 6a 07 	lds	r24, 0x076A
    3a88:	88 23       	and	r24, r24
    3a8a:	09 f0       	breq	.+2      	; 0x3a8e <xTaskResumeAll+0xc8>
    3a8c:	b6 cf       	rjmp	.-148    	; 0x39fa <xTaskResumeAll+0x34>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    3a8e:	80 91 19 07 	lds	r24, 0x0719
    3a92:	88 23       	and	r24, r24
    3a94:	89 f0       	breq	.+34     	; 0x3ab8 <xTaskResumeAll+0xf2>
    3a96:	0c c0       	rjmp	.+24     	; 0x3ab0 <xTaskResumeAll+0xea>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
    3a98:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <xTaskIncrementTick>
    3a9c:	88 23       	and	r24, r24
    3a9e:	19 f0       	breq	.+6      	; 0x3aa6 <xTaskResumeAll+0xe0>
						{
							xYieldPending = pdTRUE;
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
    3aa2:	80 93 1a 07 	sts	0x071A, r24
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    3aa6:	80 91 19 07 	lds	r24, 0x0719
    3aaa:	81 50       	subi	r24, 0x01	; 1
    3aac:	80 93 19 07 	sts	0x0719, r24
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    3ab0:	80 91 19 07 	lds	r24, 0x0719
    3ab4:	88 23       	and	r24, r24
    3ab6:	81 f7       	brne	.-32     	; 0x3a98 <xTaskResumeAll+0xd2>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    3ab8:	80 91 1a 07 	lds	r24, 0x071A
    3abc:	81 30       	cpi	r24, 0x01	; 1
    3abe:	21 f4       	brne	.+8      	; 0x3ac8 <xTaskResumeAll+0x102>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    3ac4:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    3ac8:	0f 90       	pop	r0
    3aca:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    3acc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ace:	0f 90       	pop	r0
    3ad0:	0f 90       	pop	r0
    3ad2:	0f 90       	pop	r0
    3ad4:	cf 91       	pop	r28
    3ad6:	df 91       	pop	r29
    3ad8:	08 95       	ret

00003ada <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    3ada:	df 93       	push	r29
    3adc:	cf 93       	push	r28
    3ade:	00 d0       	rcall	.+0      	; 0x3ae0 <xTaskGetTickCount+0x6>
    3ae0:	cd b7       	in	r28, 0x3d	; 61
    3ae2:	de b7       	in	r29, 0x3e	; 62
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3ae4:	0f b6       	in	r0, 0x3f	; 63
    3ae6:	f8 94       	cli
    3ae8:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    3aea:	80 91 15 07 	lds	r24, 0x0715
    3aee:	90 91 16 07 	lds	r25, 0x0716
    3af2:	9a 83       	std	Y+2, r25	; 0x02
    3af4:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    3af6:	0f 90       	pop	r0
    3af8:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    3afa:	89 81       	ldd	r24, Y+1	; 0x01
    3afc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3afe:	0f 90       	pop	r0
    3b00:	0f 90       	pop	r0
    3b02:	cf 91       	pop	r28
    3b04:	df 91       	pop	r29
    3b06:	08 95       	ret

00003b08 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    3b08:	df 93       	push	r29
    3b0a:	cf 93       	push	r28
    3b0c:	00 d0       	rcall	.+0      	; 0x3b0e <xTaskGetTickCountFromISR+0x6>
    3b0e:	0f 92       	push	r0
    3b10:	cd b7       	in	r28, 0x3d	; 61
    3b12:	de b7       	in	r29, 0x3e	; 62
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3b14:	19 82       	std	Y+1, r1	; 0x01
	{
		xReturn = xTickCount;
    3b16:	80 91 15 07 	lds	r24, 0x0715
    3b1a:	90 91 16 07 	lds	r25, 0x0716
    3b1e:	9b 83       	std	Y+3, r25	; 0x03
    3b20:	8a 83       	std	Y+2, r24	; 0x02
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3b22:	8a 81       	ldd	r24, Y+2	; 0x02
    3b24:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3b26:	0f 90       	pop	r0
    3b28:	0f 90       	pop	r0
    3b2a:	0f 90       	pop	r0
    3b2c:	cf 91       	pop	r28
    3b2e:	df 91       	pop	r29
    3b30:	08 95       	ret

00003b32 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    3b32:	df 93       	push	r29
    3b34:	cf 93       	push	r28
    3b36:	cd b7       	in	r28, 0x3d	; 61
    3b38:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    3b3a:	80 91 14 07 	lds	r24, 0x0714
}
    3b3e:	cf 91       	pop	r28
    3b40:	df 91       	pop	r29
    3b42:	08 95       	ret

00003b44 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    3b44:	df 93       	push	r29
    3b46:	cf 93       	push	r28
    3b48:	cd b7       	in	r28, 0x3d	; 61
    3b4a:	de b7       	in	r29, 0x3e	; 62
    3b4c:	29 97       	sbiw	r28, 0x09	; 9
    3b4e:	0f b6       	in	r0, 0x3f	; 63
    3b50:	f8 94       	cli
    3b52:	de bf       	out	0x3e, r29	; 62
    3b54:	0f be       	out	0x3f, r0	; 63
    3b56:	cd bf       	out	0x3d, r28	; 61
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    3b58:	1d 82       	std	Y+5, r1	; 0x05

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3b5a:	80 91 1d 07 	lds	r24, 0x071D
    3b5e:	88 23       	and	r24, r24
    3b60:	09 f0       	breq	.+2      	; 0x3b64 <xTaskIncrementTick+0x20>
    3b62:	c2 c0       	rjmp	.+388    	; 0x3ce8 <xTaskIncrementTick+0x1a4>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    3b64:	80 91 15 07 	lds	r24, 0x0715
    3b68:	90 91 16 07 	lds	r25, 0x0716
    3b6c:	01 96       	adiw	r24, 0x01	; 1
    3b6e:	90 93 16 07 	sts	0x0716, r25
    3b72:	80 93 15 07 	sts	0x0715, r24

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    3b76:	80 91 15 07 	lds	r24, 0x0715
    3b7a:	90 91 16 07 	lds	r25, 0x0716
    3b7e:	9c 83       	std	Y+4, r25	; 0x04
    3b80:	8b 83       	std	Y+3, r24	; 0x03

			if( xConstTickCount == ( TickType_t ) 0U )
    3b82:	8b 81       	ldd	r24, Y+3	; 0x03
    3b84:	9c 81       	ldd	r25, Y+4	; 0x04
    3b86:	00 97       	sbiw	r24, 0x00	; 0
    3b88:	d9 f4       	brne	.+54     	; 0x3bc0 <xTaskIncrementTick+0x7c>
			{
				taskSWITCH_DELAYED_LISTS();
    3b8a:	80 91 66 07 	lds	r24, 0x0766
    3b8e:	90 91 67 07 	lds	r25, 0x0767
    3b92:	9a 83       	std	Y+2, r25	; 0x02
    3b94:	89 83       	std	Y+1, r24	; 0x01
    3b96:	80 91 68 07 	lds	r24, 0x0768
    3b9a:	90 91 69 07 	lds	r25, 0x0769
    3b9e:	90 93 67 07 	sts	0x0767, r25
    3ba2:	80 93 66 07 	sts	0x0766, r24
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
    3ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    3baa:	90 93 69 07 	sts	0x0769, r25
    3bae:	80 93 68 07 	sts	0x0768, r24
    3bb2:	80 91 1b 07 	lds	r24, 0x071B
    3bb6:	8f 5f       	subi	r24, 0xFF	; 255
    3bb8:	80 93 1b 07 	sts	0x071B, r24
    3bbc:	0e 94 69 22 	call	0x44d2	; 0x44d2 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    3bc0:	20 91 ed 00 	lds	r18, 0x00ED
    3bc4:	30 91 ee 00 	lds	r19, 0x00EE
    3bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bca:	9c 81       	ldd	r25, Y+4	; 0x04
    3bcc:	82 17       	cp	r24, r18
    3bce:	93 07       	cpc	r25, r19
    3bd0:	08 f4       	brcc	.+2      	; 0x3bd4 <xTaskIncrementTick+0x90>
    3bd2:	71 c0       	rjmp	.+226    	; 0x3cb6 <xTaskIncrementTick+0x172>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3bd4:	e0 91 66 07 	lds	r30, 0x0766
    3bd8:	f0 91 67 07 	lds	r31, 0x0767
    3bdc:	80 81       	ld	r24, Z
    3bde:	88 23       	and	r24, r24
    3be0:	39 f4       	brne	.+14     	; 0x3bf0 <xTaskIncrementTick+0xac>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    3be2:	8f ef       	ldi	r24, 0xFF	; 255
    3be4:	9f ef       	ldi	r25, 0xFF	; 255
    3be6:	90 93 ee 00 	sts	0x00EE, r25
    3bea:	80 93 ed 00 	sts	0x00ED, r24
    3bee:	63 c0       	rjmp	.+198    	; 0x3cb6 <xTaskIncrementTick+0x172>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3bf0:	e0 91 66 07 	lds	r30, 0x0766
    3bf4:	f0 91 67 07 	lds	r31, 0x0767
    3bf8:	05 80       	ldd	r0, Z+5	; 0x05
    3bfa:	f6 81       	ldd	r31, Z+6	; 0x06
    3bfc:	e0 2d       	mov	r30, r0
    3bfe:	86 81       	ldd	r24, Z+6	; 0x06
    3c00:	97 81       	ldd	r25, Z+7	; 0x07
    3c02:	99 87       	std	Y+9, r25	; 0x09
    3c04:	88 87       	std	Y+8, r24	; 0x08
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3c06:	e8 85       	ldd	r30, Y+8	; 0x08
    3c08:	f9 85       	ldd	r31, Y+9	; 0x09
    3c0a:	82 81       	ldd	r24, Z+2	; 0x02
    3c0c:	93 81       	ldd	r25, Z+3	; 0x03
    3c0e:	9f 83       	std	Y+7, r25	; 0x07
    3c10:	8e 83       	std	Y+6, r24	; 0x06

						if( xConstTickCount < xItemValue )
    3c12:	2b 81       	ldd	r18, Y+3	; 0x03
    3c14:	3c 81       	ldd	r19, Y+4	; 0x04
    3c16:	8e 81       	ldd	r24, Y+6	; 0x06
    3c18:	9f 81       	ldd	r25, Y+7	; 0x07
    3c1a:	28 17       	cp	r18, r24
    3c1c:	39 07       	cpc	r19, r25
    3c1e:	38 f4       	brcc	.+14     	; 0x3c2e <xTaskIncrementTick+0xea>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    3c20:	8e 81       	ldd	r24, Y+6	; 0x06
    3c22:	9f 81       	ldd	r25, Y+7	; 0x07
    3c24:	90 93 ee 00 	sts	0x00EE, r25
    3c28:	80 93 ed 00 	sts	0x00ED, r24
    3c2c:	44 c0       	rjmp	.+136    	; 0x3cb6 <xTaskIncrementTick+0x172>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3c2e:	88 85       	ldd	r24, Y+8	; 0x08
    3c30:	99 85       	ldd	r25, Y+9	; 0x09
    3c32:	02 96       	adiw	r24, 0x02	; 2
    3c34:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3c38:	e8 85       	ldd	r30, Y+8	; 0x08
    3c3a:	f9 85       	ldd	r31, Y+9	; 0x09
    3c3c:	84 89       	ldd	r24, Z+20	; 0x14
    3c3e:	95 89       	ldd	r25, Z+21	; 0x15
    3c40:	00 97       	sbiw	r24, 0x00	; 0
    3c42:	29 f0       	breq	.+10     	; 0x3c4e <xTaskIncrementTick+0x10a>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3c44:	88 85       	ldd	r24, Y+8	; 0x08
    3c46:	99 85       	ldd	r25, Y+9	; 0x09
    3c48:	0c 96       	adiw	r24, 0x0c	; 12
    3c4a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    3c4e:	e8 85       	ldd	r30, Y+8	; 0x08
    3c50:	f9 85       	ldd	r31, Y+9	; 0x09
    3c52:	96 89       	ldd	r25, Z+22	; 0x16
    3c54:	80 91 17 07 	lds	r24, 0x0717
    3c58:	89 17       	cp	r24, r25
    3c5a:	28 f4       	brcc	.+10     	; 0x3c66 <xTaskIncrementTick+0x122>
    3c5c:	e8 85       	ldd	r30, Y+8	; 0x08
    3c5e:	f9 85       	ldd	r31, Y+9	; 0x09
    3c60:	86 89       	ldd	r24, Z+22	; 0x16
    3c62:	80 93 17 07 	sts	0x0717, r24
    3c66:	e8 85       	ldd	r30, Y+8	; 0x08
    3c68:	f9 85       	ldd	r31, Y+9	; 0x09
    3c6a:	86 89       	ldd	r24, Z+22	; 0x16
    3c6c:	28 2f       	mov	r18, r24
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	c9 01       	movw	r24, r18
    3c72:	88 0f       	add	r24, r24
    3c74:	99 1f       	adc	r25, r25
    3c76:	88 0f       	add	r24, r24
    3c78:	99 1f       	adc	r25, r25
    3c7a:	88 0f       	add	r24, r24
    3c7c:	99 1f       	adc	r25, r25
    3c7e:	82 0f       	add	r24, r18
    3c80:	93 1f       	adc	r25, r19
    3c82:	ac 01       	movw	r20, r24
    3c84:	42 5e       	subi	r20, 0xE2	; 226
    3c86:	58 4f       	sbci	r21, 0xF8	; 248
    3c88:	88 85       	ldd	r24, Y+8	; 0x08
    3c8a:	99 85       	ldd	r25, Y+9	; 0x09
    3c8c:	9c 01       	movw	r18, r24
    3c8e:	2e 5f       	subi	r18, 0xFE	; 254
    3c90:	3f 4f       	sbci	r19, 0xFF	; 255
    3c92:	ca 01       	movw	r24, r20
    3c94:	b9 01       	movw	r22, r18
    3c96:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3c9a:	e8 85       	ldd	r30, Y+8	; 0x08
    3c9c:	f9 85       	ldd	r31, Y+9	; 0x09
    3c9e:	96 89       	ldd	r25, Z+22	; 0x16
    3ca0:	e0 91 11 07 	lds	r30, 0x0711
    3ca4:	f0 91 12 07 	lds	r31, 0x0712
    3ca8:	86 89       	ldd	r24, Z+22	; 0x16
    3caa:	98 17       	cp	r25, r24
    3cac:	08 f4       	brcc	.+2      	; 0x3cb0 <xTaskIncrementTick+0x16c>
    3cae:	92 cf       	rjmp	.-220    	; 0x3bd4 <xTaskIncrementTick+0x90>
							{
								xSwitchRequired = pdTRUE;
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	8d 83       	std	Y+5, r24	; 0x05
    3cb4:	8f cf       	rjmp	.-226    	; 0x3bd4 <xTaskIncrementTick+0x90>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    3cb6:	e0 91 11 07 	lds	r30, 0x0711
    3cba:	f0 91 12 07 	lds	r31, 0x0712
    3cbe:	86 89       	ldd	r24, Z+22	; 0x16
    3cc0:	28 2f       	mov	r18, r24
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	c9 01       	movw	r24, r18
    3cc6:	88 0f       	add	r24, r24
    3cc8:	99 1f       	adc	r25, r25
    3cca:	88 0f       	add	r24, r24
    3ccc:	99 1f       	adc	r25, r25
    3cce:	88 0f       	add	r24, r24
    3cd0:	99 1f       	adc	r25, r25
    3cd2:	82 0f       	add	r24, r18
    3cd4:	93 1f       	adc	r25, r19
    3cd6:	fc 01       	movw	r30, r24
    3cd8:	e2 5e       	subi	r30, 0xE2	; 226
    3cda:	f8 4f       	sbci	r31, 0xF8	; 248
    3cdc:	80 81       	ld	r24, Z
    3cde:	82 30       	cpi	r24, 0x02	; 2
    3ce0:	40 f0       	brcs	.+16     	; 0x3cf2 <xTaskIncrementTick+0x1ae>
			{
				xSwitchRequired = pdTRUE;
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	8d 83       	std	Y+5, r24	; 0x05
    3ce6:	05 c0       	rjmp	.+10     	; 0x3cf2 <xTaskIncrementTick+0x1ae>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    3ce8:	80 91 19 07 	lds	r24, 0x0719
    3cec:	8f 5f       	subi	r24, 0xFF	; 255
    3cee:	80 93 19 07 	sts	0x0719, r24
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    3cf2:	80 91 1a 07 	lds	r24, 0x071A
    3cf6:	88 23       	and	r24, r24
    3cf8:	11 f0       	breq	.+4      	; 0x3cfe <xTaskIncrementTick+0x1ba>
		{
			xSwitchRequired = pdTRUE;
    3cfa:	81 e0       	ldi	r24, 0x01	; 1
    3cfc:	8d 83       	std	Y+5, r24	; 0x05
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    3cfe:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3d00:	29 96       	adiw	r28, 0x09	; 9
    3d02:	0f b6       	in	r0, 0x3f	; 63
    3d04:	f8 94       	cli
    3d06:	de bf       	out	0x3e, r29	; 62
    3d08:	0f be       	out	0x3f, r0	; 63
    3d0a:	cd bf       	out	0x3d, r28	; 61
    3d0c:	cf 91       	pop	r28
    3d0e:	df 91       	pop	r29
    3d10:	08 95       	ret

00003d12 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3d12:	df 93       	push	r29
    3d14:	cf 93       	push	r28
    3d16:	00 d0       	rcall	.+0      	; 0x3d18 <vTaskSwitchContext+0x6>
    3d18:	cd b7       	in	r28, 0x3d	; 61
    3d1a:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    3d1c:	80 91 1d 07 	lds	r24, 0x071D
    3d20:	88 23       	and	r24, r24
    3d22:	21 f0       	breq	.+8      	; 0x3d2c <vTaskSwitchContext+0x1a>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	80 93 1a 07 	sts	0x071A, r24
    3d2a:	57 c0       	rjmp	.+174    	; 0x3dda <vTaskSwitchContext+0xc8>
	}
	else
	{
		xYieldPending = pdFALSE;
    3d2c:	10 92 1a 07 	sts	0x071A, r1
    3d30:	05 c0       	rjmp	.+10     	; 0x3d3c <vTaskSwitchContext+0x2a>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3d32:	80 91 17 07 	lds	r24, 0x0717
    3d36:	81 50       	subi	r24, 0x01	; 1
    3d38:	80 93 17 07 	sts	0x0717, r24
    3d3c:	80 91 17 07 	lds	r24, 0x0717
    3d40:	28 2f       	mov	r18, r24
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	c9 01       	movw	r24, r18
    3d46:	88 0f       	add	r24, r24
    3d48:	99 1f       	adc	r25, r25
    3d4a:	88 0f       	add	r24, r24
    3d4c:	99 1f       	adc	r25, r25
    3d4e:	88 0f       	add	r24, r24
    3d50:	99 1f       	adc	r25, r25
    3d52:	82 0f       	add	r24, r18
    3d54:	93 1f       	adc	r25, r19
    3d56:	fc 01       	movw	r30, r24
    3d58:	e2 5e       	subi	r30, 0xE2	; 226
    3d5a:	f8 4f       	sbci	r31, 0xF8	; 248
    3d5c:	80 81       	ld	r24, Z
    3d5e:	88 23       	and	r24, r24
    3d60:	41 f3       	breq	.-48     	; 0x3d32 <vTaskSwitchContext+0x20>
    3d62:	80 91 17 07 	lds	r24, 0x0717
    3d66:	28 2f       	mov	r18, r24
    3d68:	30 e0       	ldi	r19, 0x00	; 0
    3d6a:	c9 01       	movw	r24, r18
    3d6c:	88 0f       	add	r24, r24
    3d6e:	99 1f       	adc	r25, r25
    3d70:	88 0f       	add	r24, r24
    3d72:	99 1f       	adc	r25, r25
    3d74:	88 0f       	add	r24, r24
    3d76:	99 1f       	adc	r25, r25
    3d78:	82 0f       	add	r24, r18
    3d7a:	93 1f       	adc	r25, r19
    3d7c:	82 5e       	subi	r24, 0xE2	; 226
    3d7e:	98 4f       	sbci	r25, 0xF8	; 248
    3d80:	9a 83       	std	Y+2, r25	; 0x02
    3d82:	89 83       	std	Y+1, r24	; 0x01
    3d84:	e9 81       	ldd	r30, Y+1	; 0x01
    3d86:	fa 81       	ldd	r31, Y+2	; 0x02
    3d88:	01 80       	ldd	r0, Z+1	; 0x01
    3d8a:	f2 81       	ldd	r31, Z+2	; 0x02
    3d8c:	e0 2d       	mov	r30, r0
    3d8e:	82 81       	ldd	r24, Z+2	; 0x02
    3d90:	93 81       	ldd	r25, Z+3	; 0x03
    3d92:	e9 81       	ldd	r30, Y+1	; 0x01
    3d94:	fa 81       	ldd	r31, Y+2	; 0x02
    3d96:	92 83       	std	Z+2, r25	; 0x02
    3d98:	81 83       	std	Z+1, r24	; 0x01
    3d9a:	e9 81       	ldd	r30, Y+1	; 0x01
    3d9c:	fa 81       	ldd	r31, Y+2	; 0x02
    3d9e:	21 81       	ldd	r18, Z+1	; 0x01
    3da0:	32 81       	ldd	r19, Z+2	; 0x02
    3da2:	89 81       	ldd	r24, Y+1	; 0x01
    3da4:	9a 81       	ldd	r25, Y+2	; 0x02
    3da6:	03 96       	adiw	r24, 0x03	; 3
    3da8:	28 17       	cp	r18, r24
    3daa:	39 07       	cpc	r19, r25
    3dac:	59 f4       	brne	.+22     	; 0x3dc4 <vTaskSwitchContext+0xb2>
    3dae:	e9 81       	ldd	r30, Y+1	; 0x01
    3db0:	fa 81       	ldd	r31, Y+2	; 0x02
    3db2:	01 80       	ldd	r0, Z+1	; 0x01
    3db4:	f2 81       	ldd	r31, Z+2	; 0x02
    3db6:	e0 2d       	mov	r30, r0
    3db8:	82 81       	ldd	r24, Z+2	; 0x02
    3dba:	93 81       	ldd	r25, Z+3	; 0x03
    3dbc:	e9 81       	ldd	r30, Y+1	; 0x01
    3dbe:	fa 81       	ldd	r31, Y+2	; 0x02
    3dc0:	92 83       	std	Z+2, r25	; 0x02
    3dc2:	81 83       	std	Z+1, r24	; 0x01
    3dc4:	e9 81       	ldd	r30, Y+1	; 0x01
    3dc6:	fa 81       	ldd	r31, Y+2	; 0x02
    3dc8:	01 80       	ldd	r0, Z+1	; 0x01
    3dca:	f2 81       	ldd	r31, Z+2	; 0x02
    3dcc:	e0 2d       	mov	r30, r0
    3dce:	86 81       	ldd	r24, Z+6	; 0x06
    3dd0:	97 81       	ldd	r25, Z+7	; 0x07
    3dd2:	90 93 12 07 	sts	0x0712, r25
    3dd6:	80 93 11 07 	sts	0x0711, r24
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    3dda:	0f 90       	pop	r0
    3ddc:	0f 90       	pop	r0
    3dde:	cf 91       	pop	r28
    3de0:	df 91       	pop	r29
    3de2:	08 95       	ret

00003de4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    3de4:	df 93       	push	r29
    3de6:	cf 93       	push	r28
    3de8:	00 d0       	rcall	.+0      	; 0x3dea <vTaskPlaceOnEventList+0x6>
    3dea:	00 d0       	rcall	.+0      	; 0x3dec <vTaskPlaceOnEventList+0x8>
    3dec:	00 d0       	rcall	.+0      	; 0x3dee <vTaskPlaceOnEventList+0xa>
    3dee:	cd b7       	in	r28, 0x3d	; 61
    3df0:	de b7       	in	r29, 0x3e	; 62
    3df2:	9c 83       	std	Y+4, r25	; 0x04
    3df4:	8b 83       	std	Y+3, r24	; 0x03
    3df6:	7e 83       	std	Y+6, r23	; 0x06
    3df8:	6d 83       	std	Y+5, r22	; 0x05

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3dfa:	80 91 11 07 	lds	r24, 0x0711
    3dfe:	90 91 12 07 	lds	r25, 0x0712
    3e02:	9c 01       	movw	r18, r24
    3e04:	24 5f       	subi	r18, 0xF4	; 244
    3e06:	3f 4f       	sbci	r19, 0xFF	; 255
    3e08:	8b 81       	ldd	r24, Y+3	; 0x03
    3e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e0c:	b9 01       	movw	r22, r18
    3e0e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3e12:	80 91 11 07 	lds	r24, 0x0711
    3e16:	90 91 12 07 	lds	r25, 0x0712
    3e1a:	02 96       	adiw	r24, 0x02	; 2
    3e1c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter, the scheduler
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    3e20:	20 91 15 07 	lds	r18, 0x0715
    3e24:	30 91 16 07 	lds	r19, 0x0716
    3e28:	8d 81       	ldd	r24, Y+5	; 0x05
    3e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e2c:	82 0f       	add	r24, r18
    3e2e:	93 1f       	adc	r25, r19
    3e30:	9a 83       	std	Y+2, r25	; 0x02
    3e32:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3e34:	89 81       	ldd	r24, Y+1	; 0x01
    3e36:	9a 81       	ldd	r25, Y+2	; 0x02
    3e38:	0e 94 c6 21 	call	0x438c	; 0x438c <prvAddCurrentTaskToDelayedList>
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3e3c:	26 96       	adiw	r28, 0x06	; 6
    3e3e:	0f b6       	in	r0, 0x3f	; 63
    3e40:	f8 94       	cli
    3e42:	de bf       	out	0x3e, r29	; 62
    3e44:	0f be       	out	0x3f, r0	; 63
    3e46:	cd bf       	out	0x3d, r28	; 61
    3e48:	cf 91       	pop	r28
    3e4a:	df 91       	pop	r29
    3e4c:	08 95       	ret

00003e4e <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    3e4e:	df 93       	push	r29
    3e50:	cf 93       	push	r28
    3e52:	cd b7       	in	r28, 0x3d	; 61
    3e54:	de b7       	in	r29, 0x3e	; 62
    3e56:	28 97       	sbiw	r28, 0x08	; 8
    3e58:	0f b6       	in	r0, 0x3f	; 63
    3e5a:	f8 94       	cli
    3e5c:	de bf       	out	0x3e, r29	; 62
    3e5e:	0f be       	out	0x3f, r0	; 63
    3e60:	cd bf       	out	0x3d, r28	; 61
    3e62:	9c 83       	std	Y+4, r25	; 0x04
    3e64:	8b 83       	std	Y+3, r24	; 0x03
    3e66:	7e 83       	std	Y+6, r23	; 0x06
    3e68:	6d 83       	std	Y+5, r22	; 0x05
    3e6a:	58 87       	std	Y+8, r21	; 0x08
    3e6c:	4f 83       	std	Y+7, r20	; 0x07
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3e6e:	e0 91 11 07 	lds	r30, 0x0711
    3e72:	f0 91 12 07 	lds	r31, 0x0712
    3e76:	8d 81       	ldd	r24, Y+5	; 0x05
    3e78:	9e 81       	ldd	r25, Y+6	; 0x06
    3e7a:	90 68       	ori	r25, 0x80	; 128
    3e7c:	95 87       	std	Z+13, r25	; 0x0d
    3e7e:	84 87       	std	Z+12, r24	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3e80:	80 91 11 07 	lds	r24, 0x0711
    3e84:	90 91 12 07 	lds	r25, 0x0712
    3e88:	9c 01       	movw	r18, r24
    3e8a:	24 5f       	subi	r18, 0xF4	; 244
    3e8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e90:	9c 81       	ldd	r25, Y+4	; 0x04
    3e92:	b9 01       	movw	r22, r18
    3e94:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3e98:	80 91 11 07 	lds	r24, 0x0711
    3e9c:	90 91 12 07 	lds	r25, 0x0712
    3ea0:	02 96       	adiw	r24, 0x02	; 2
    3ea2:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter, the kernel
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
    3ea6:	20 91 15 07 	lds	r18, 0x0715
    3eaa:	30 91 16 07 	lds	r19, 0x0716
    3eae:	8f 81       	ldd	r24, Y+7	; 0x07
    3eb0:	98 85       	ldd	r25, Y+8	; 0x08
    3eb2:	82 0f       	add	r24, r18
    3eb4:	93 1f       	adc	r25, r19
    3eb6:	9a 83       	std	Y+2, r25	; 0x02
    3eb8:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3eba:	89 81       	ldd	r24, Y+1	; 0x01
    3ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ebe:	0e 94 c6 21 	call	0x438c	; 0x438c <prvAddCurrentTaskToDelayedList>
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3ec2:	28 96       	adiw	r28, 0x08	; 8
    3ec4:	0f b6       	in	r0, 0x3f	; 63
    3ec6:	f8 94       	cli
    3ec8:	de bf       	out	0x3e, r29	; 62
    3eca:	0f be       	out	0x3f, r0	; 63
    3ecc:	cd bf       	out	0x3d, r28	; 61
    3ece:	cf 91       	pop	r28
    3ed0:	df 91       	pop	r29
    3ed2:	08 95       	ret

00003ed4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    3ed4:	df 93       	push	r29
    3ed6:	cf 93       	push	r28
    3ed8:	00 d0       	rcall	.+0      	; 0x3eda <xTaskRemoveFromEventList+0x6>
    3eda:	00 d0       	rcall	.+0      	; 0x3edc <xTaskRemoveFromEventList+0x8>
    3edc:	0f 92       	push	r0
    3ede:	cd b7       	in	r28, 0x3d	; 61
    3ee0:	de b7       	in	r29, 0x3e	; 62
    3ee2:	9d 83       	std	Y+5, r25	; 0x05
    3ee4:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3ee6:	ec 81       	ldd	r30, Y+4	; 0x04
    3ee8:	fd 81       	ldd	r31, Y+5	; 0x05
    3eea:	05 80       	ldd	r0, Z+5	; 0x05
    3eec:	f6 81       	ldd	r31, Z+6	; 0x06
    3eee:	e0 2d       	mov	r30, r0
    3ef0:	86 81       	ldd	r24, Z+6	; 0x06
    3ef2:	97 81       	ldd	r25, Z+7	; 0x07
    3ef4:	9b 83       	std	Y+3, r25	; 0x03
    3ef6:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    3efa:	9b 81       	ldd	r25, Y+3	; 0x03
    3efc:	0c 96       	adiw	r24, 0x0c	; 12
    3efe:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3f02:	80 91 1d 07 	lds	r24, 0x071D
    3f06:	88 23       	and	r24, r24
    3f08:	61 f5       	brne	.+88     	; 0x3f62 <xTaskRemoveFromEventList+0x8e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f0c:	9b 81       	ldd	r25, Y+3	; 0x03
    3f0e:	02 96       	adiw	r24, 0x02	; 2
    3f10:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    3f14:	ea 81       	ldd	r30, Y+2	; 0x02
    3f16:	fb 81       	ldd	r31, Y+3	; 0x03
    3f18:	96 89       	ldd	r25, Z+22	; 0x16
    3f1a:	80 91 17 07 	lds	r24, 0x0717
    3f1e:	89 17       	cp	r24, r25
    3f20:	28 f4       	brcc	.+10     	; 0x3f2c <xTaskRemoveFromEventList+0x58>
    3f22:	ea 81       	ldd	r30, Y+2	; 0x02
    3f24:	fb 81       	ldd	r31, Y+3	; 0x03
    3f26:	86 89       	ldd	r24, Z+22	; 0x16
    3f28:	80 93 17 07 	sts	0x0717, r24
    3f2c:	ea 81       	ldd	r30, Y+2	; 0x02
    3f2e:	fb 81       	ldd	r31, Y+3	; 0x03
    3f30:	86 89       	ldd	r24, Z+22	; 0x16
    3f32:	28 2f       	mov	r18, r24
    3f34:	30 e0       	ldi	r19, 0x00	; 0
    3f36:	c9 01       	movw	r24, r18
    3f38:	88 0f       	add	r24, r24
    3f3a:	99 1f       	adc	r25, r25
    3f3c:	88 0f       	add	r24, r24
    3f3e:	99 1f       	adc	r25, r25
    3f40:	88 0f       	add	r24, r24
    3f42:	99 1f       	adc	r25, r25
    3f44:	82 0f       	add	r24, r18
    3f46:	93 1f       	adc	r25, r19
    3f48:	ac 01       	movw	r20, r24
    3f4a:	42 5e       	subi	r20, 0xE2	; 226
    3f4c:	58 4f       	sbci	r21, 0xF8	; 248
    3f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f50:	9b 81       	ldd	r25, Y+3	; 0x03
    3f52:	9c 01       	movw	r18, r24
    3f54:	2e 5f       	subi	r18, 0xFE	; 254
    3f56:	3f 4f       	sbci	r19, 0xFF	; 255
    3f58:	ca 01       	movw	r24, r20
    3f5a:	b9 01       	movw	r22, r18
    3f5c:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <vListInsertEnd>
    3f60:	0a c0       	rjmp	.+20     	; 0x3f76 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3f62:	8a 81       	ldd	r24, Y+2	; 0x02
    3f64:	9b 81       	ldd	r25, Y+3	; 0x03
    3f66:	9c 01       	movw	r18, r24
    3f68:	24 5f       	subi	r18, 0xF4	; 244
    3f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f6c:	8a e6       	ldi	r24, 0x6A	; 106
    3f6e:	97 e0       	ldi	r25, 0x07	; 7
    3f70:	b9 01       	movw	r22, r18
    3f72:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3f76:	ea 81       	ldd	r30, Y+2	; 0x02
    3f78:	fb 81       	ldd	r31, Y+3	; 0x03
    3f7a:	96 89       	ldd	r25, Z+22	; 0x16
    3f7c:	e0 91 11 07 	lds	r30, 0x0711
    3f80:	f0 91 12 07 	lds	r31, 0x0712
    3f84:	86 89       	ldd	r24, Z+22	; 0x16
    3f86:	89 17       	cp	r24, r25
    3f88:	30 f4       	brcc	.+12     	; 0x3f96 <xTaskRemoveFromEventList+0xc2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    3f8a:	81 e0       	ldi	r24, 0x01	; 1
    3f8c:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    3f8e:	81 e0       	ldi	r24, 0x01	; 1
    3f90:	80 93 1a 07 	sts	0x071A, r24
    3f94:	01 c0       	rjmp	.+2      	; 0x3f98 <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		xReturn = pdFALSE;
    3f96:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    3f98:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f9a:	0f 90       	pop	r0
    3f9c:	0f 90       	pop	r0
    3f9e:	0f 90       	pop	r0
    3fa0:	0f 90       	pop	r0
    3fa2:	0f 90       	pop	r0
    3fa4:	cf 91       	pop	r28
    3fa6:	df 91       	pop	r29
    3fa8:	08 95       	ret

00003faa <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    3faa:	df 93       	push	r29
    3fac:	cf 93       	push	r28
    3fae:	cd b7       	in	r28, 0x3d	; 61
    3fb0:	de b7       	in	r29, 0x3e	; 62
    3fb2:	27 97       	sbiw	r28, 0x07	; 7
    3fb4:	0f b6       	in	r0, 0x3f	; 63
    3fb6:	f8 94       	cli
    3fb8:	de bf       	out	0x3e, r29	; 62
    3fba:	0f be       	out	0x3f, r0	; 63
    3fbc:	cd bf       	out	0x3d, r28	; 61
    3fbe:	9d 83       	std	Y+5, r25	; 0x05
    3fc0:	8c 83       	std	Y+4, r24	; 0x04
    3fc2:	7f 83       	std	Y+7, r23	; 0x07
    3fc4:	6e 83       	std	Y+6, r22	; 0x06
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3fc6:	8e 81       	ldd	r24, Y+6	; 0x06
    3fc8:	9f 81       	ldd	r25, Y+7	; 0x07
    3fca:	90 68       	ori	r25, 0x80	; 128
    3fcc:	ec 81       	ldd	r30, Y+4	; 0x04
    3fce:	fd 81       	ldd	r31, Y+5	; 0x05
    3fd0:	91 83       	std	Z+1, r25	; 0x01
    3fd2:	80 83       	st	Z, r24

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    3fd4:	ec 81       	ldd	r30, Y+4	; 0x04
    3fd6:	fd 81       	ldd	r31, Y+5	; 0x05
    3fd8:	86 81       	ldd	r24, Z+6	; 0x06
    3fda:	97 81       	ldd	r25, Z+7	; 0x07
    3fdc:	9b 83       	std	Y+3, r25	; 0x03
    3fde:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    3fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    3fe2:	9d 81       	ldd	r25, Y+5	; 0x05
    3fe4:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fea:	9b 81       	ldd	r25, Y+3	; 0x03
    3fec:	02 96       	adiw	r24, 0x02	; 2
    3fee:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    3ff2:	ea 81       	ldd	r30, Y+2	; 0x02
    3ff4:	fb 81       	ldd	r31, Y+3	; 0x03
    3ff6:	96 89       	ldd	r25, Z+22	; 0x16
    3ff8:	80 91 17 07 	lds	r24, 0x0717
    3ffc:	89 17       	cp	r24, r25
    3ffe:	28 f4       	brcc	.+10     	; 0x400a <xTaskRemoveFromUnorderedEventList+0x60>
    4000:	ea 81       	ldd	r30, Y+2	; 0x02
    4002:	fb 81       	ldd	r31, Y+3	; 0x03
    4004:	86 89       	ldd	r24, Z+22	; 0x16
    4006:	80 93 17 07 	sts	0x0717, r24
    400a:	ea 81       	ldd	r30, Y+2	; 0x02
    400c:	fb 81       	ldd	r31, Y+3	; 0x03
    400e:	86 89       	ldd	r24, Z+22	; 0x16
    4010:	28 2f       	mov	r18, r24
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	c9 01       	movw	r24, r18
    4016:	88 0f       	add	r24, r24
    4018:	99 1f       	adc	r25, r25
    401a:	88 0f       	add	r24, r24
    401c:	99 1f       	adc	r25, r25
    401e:	88 0f       	add	r24, r24
    4020:	99 1f       	adc	r25, r25
    4022:	82 0f       	add	r24, r18
    4024:	93 1f       	adc	r25, r19
    4026:	ac 01       	movw	r20, r24
    4028:	42 5e       	subi	r20, 0xE2	; 226
    402a:	58 4f       	sbci	r21, 0xF8	; 248
    402c:	8a 81       	ldd	r24, Y+2	; 0x02
    402e:	9b 81       	ldd	r25, Y+3	; 0x03
    4030:	9c 01       	movw	r18, r24
    4032:	2e 5f       	subi	r18, 0xFE	; 254
    4034:	3f 4f       	sbci	r19, 0xFF	; 255
    4036:	ca 01       	movw	r24, r20
    4038:	b9 01       	movw	r22, r18
    403a:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    403e:	ea 81       	ldd	r30, Y+2	; 0x02
    4040:	fb 81       	ldd	r31, Y+3	; 0x03
    4042:	96 89       	ldd	r25, Z+22	; 0x16
    4044:	e0 91 11 07 	lds	r30, 0x0711
    4048:	f0 91 12 07 	lds	r31, 0x0712
    404c:	86 89       	ldd	r24, Z+22	; 0x16
    404e:	89 17       	cp	r24, r25
    4050:	30 f4       	brcc	.+12     	; 0x405e <xTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    4052:	81 e0       	ldi	r24, 0x01	; 1
    4054:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    4056:	81 e0       	ldi	r24, 0x01	; 1
    4058:	80 93 1a 07 	sts	0x071A, r24
    405c:	01 c0       	rjmp	.+2      	; 0x4060 <xTaskRemoveFromUnorderedEventList+0xb6>
	}
	else
	{
		xReturn = pdFALSE;
    405e:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    4060:	89 81       	ldd	r24, Y+1	; 0x01
}
    4062:	27 96       	adiw	r28, 0x07	; 7
    4064:	0f b6       	in	r0, 0x3f	; 63
    4066:	f8 94       	cli
    4068:	de bf       	out	0x3e, r29	; 62
    406a:	0f be       	out	0x3f, r0	; 63
    406c:	cd bf       	out	0x3d, r28	; 61
    406e:	cf 91       	pop	r28
    4070:	df 91       	pop	r29
    4072:	08 95       	ret

00004074 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    4074:	df 93       	push	r29
    4076:	cf 93       	push	r28
    4078:	00 d0       	rcall	.+0      	; 0x407a <vTaskSetTimeOutState+0x6>
    407a:	cd b7       	in	r28, 0x3d	; 61
    407c:	de b7       	in	r29, 0x3e	; 62
    407e:	9a 83       	std	Y+2, r25	; 0x02
    4080:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4082:	80 91 1b 07 	lds	r24, 0x071B
    4086:	e9 81       	ldd	r30, Y+1	; 0x01
    4088:	fa 81       	ldd	r31, Y+2	; 0x02
    408a:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    408c:	80 91 15 07 	lds	r24, 0x0715
    4090:	90 91 16 07 	lds	r25, 0x0716
    4094:	e9 81       	ldd	r30, Y+1	; 0x01
    4096:	fa 81       	ldd	r31, Y+2	; 0x02
    4098:	92 83       	std	Z+2, r25	; 0x02
    409a:	81 83       	std	Z+1, r24	; 0x01
}
    409c:	0f 90       	pop	r0
    409e:	0f 90       	pop	r0
    40a0:	cf 91       	pop	r28
    40a2:	df 91       	pop	r29
    40a4:	08 95       	ret

000040a6 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    40a6:	df 93       	push	r29
    40a8:	cf 93       	push	r28
    40aa:	cd b7       	in	r28, 0x3d	; 61
    40ac:	de b7       	in	r29, 0x3e	; 62
    40ae:	27 97       	sbiw	r28, 0x07	; 7
    40b0:	0f b6       	in	r0, 0x3f	; 63
    40b2:	f8 94       	cli
    40b4:	de bf       	out	0x3e, r29	; 62
    40b6:	0f be       	out	0x3f, r0	; 63
    40b8:	cd bf       	out	0x3d, r28	; 61
    40ba:	9d 83       	std	Y+5, r25	; 0x05
    40bc:	8c 83       	std	Y+4, r24	; 0x04
    40be:	7f 83       	std	Y+7, r23	; 0x07
    40c0:	6e 83       	std	Y+6, r22	; 0x06
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    40c2:	0f b6       	in	r0, 0x3f	; 63
    40c4:	f8 94       	cli
    40c6:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    40c8:	80 91 15 07 	lds	r24, 0x0715
    40cc:	90 91 16 07 	lds	r25, 0x0716
    40d0:	9a 83       	std	Y+2, r25	; 0x02
    40d2:	89 83       	std	Y+1, r24	; 0x01
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    40d4:	ec 81       	ldd	r30, Y+4	; 0x04
    40d6:	fd 81       	ldd	r31, Y+5	; 0x05
    40d8:	90 81       	ld	r25, Z
    40da:	80 91 1b 07 	lds	r24, 0x071B
    40de:	98 17       	cp	r25, r24
    40e0:	61 f0       	breq	.+24     	; 0x40fa <xTaskCheckForTimeOut+0x54>
    40e2:	ec 81       	ldd	r30, Y+4	; 0x04
    40e4:	fd 81       	ldd	r31, Y+5	; 0x05
    40e6:	21 81       	ldd	r18, Z+1	; 0x01
    40e8:	32 81       	ldd	r19, Z+2	; 0x02
    40ea:	89 81       	ldd	r24, Y+1	; 0x01
    40ec:	9a 81       	ldd	r25, Y+2	; 0x02
    40ee:	82 17       	cp	r24, r18
    40f0:	93 07       	cpc	r25, r19
    40f2:	18 f0       	brcs	.+6      	; 0x40fa <xTaskCheckForTimeOut+0x54>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    40f4:	81 e0       	ldi	r24, 0x01	; 1
    40f6:	8b 83       	std	Y+3, r24	; 0x03
    40f8:	2d c0       	rjmp	.+90     	; 0x4154 <xTaskCheckForTimeOut+0xae>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    40fa:	ec 81       	ldd	r30, Y+4	; 0x04
    40fc:	fd 81       	ldd	r31, Y+5	; 0x05
    40fe:	21 81       	ldd	r18, Z+1	; 0x01
    4100:	32 81       	ldd	r19, Z+2	; 0x02
    4102:	89 81       	ldd	r24, Y+1	; 0x01
    4104:	9a 81       	ldd	r25, Y+2	; 0x02
    4106:	ac 01       	movw	r20, r24
    4108:	42 1b       	sub	r20, r18
    410a:	53 0b       	sbc	r21, r19
    410c:	9a 01       	movw	r18, r20
    410e:	ee 81       	ldd	r30, Y+6	; 0x06
    4110:	ff 81       	ldd	r31, Y+7	; 0x07
    4112:	80 81       	ld	r24, Z
    4114:	91 81       	ldd	r25, Z+1	; 0x01
    4116:	28 17       	cp	r18, r24
    4118:	39 07       	cpc	r19, r25
    411a:	d0 f4       	brcc	.+52     	; 0x4150 <xTaskCheckForTimeOut+0xaa>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    411c:	ee 81       	ldd	r30, Y+6	; 0x06
    411e:	ff 81       	ldd	r31, Y+7	; 0x07
    4120:	40 81       	ld	r20, Z
    4122:	51 81       	ldd	r21, Z+1	; 0x01
    4124:	ec 81       	ldd	r30, Y+4	; 0x04
    4126:	fd 81       	ldd	r31, Y+5	; 0x05
    4128:	21 81       	ldd	r18, Z+1	; 0x01
    412a:	32 81       	ldd	r19, Z+2	; 0x02
    412c:	89 81       	ldd	r24, Y+1	; 0x01
    412e:	9a 81       	ldd	r25, Y+2	; 0x02
    4130:	b9 01       	movw	r22, r18
    4132:	68 1b       	sub	r22, r24
    4134:	79 0b       	sbc	r23, r25
    4136:	cb 01       	movw	r24, r22
    4138:	84 0f       	add	r24, r20
    413a:	95 1f       	adc	r25, r21
    413c:	ee 81       	ldd	r30, Y+6	; 0x06
    413e:	ff 81       	ldd	r31, Y+7	; 0x07
    4140:	91 83       	std	Z+1, r25	; 0x01
    4142:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    4144:	8c 81       	ldd	r24, Y+4	; 0x04
    4146:	9d 81       	ldd	r25, Y+5	; 0x05
    4148:	0e 94 3a 20 	call	0x4074	; 0x4074 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    414c:	1b 82       	std	Y+3, r1	; 0x03
    414e:	02 c0       	rjmp	.+4      	; 0x4154 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			xReturn = pdTRUE;
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	8b 83       	std	Y+3, r24	; 0x03
		}
	}
	taskEXIT_CRITICAL();
    4154:	0f 90       	pop	r0
    4156:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    4158:	8b 81       	ldd	r24, Y+3	; 0x03
}
    415a:	27 96       	adiw	r28, 0x07	; 7
    415c:	0f b6       	in	r0, 0x3f	; 63
    415e:	f8 94       	cli
    4160:	de bf       	out	0x3e, r29	; 62
    4162:	0f be       	out	0x3f, r0	; 63
    4164:	cd bf       	out	0x3d, r28	; 61
    4166:	cf 91       	pop	r28
    4168:	df 91       	pop	r29
    416a:	08 95       	ret

0000416c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    416c:	df 93       	push	r29
    416e:	cf 93       	push	r28
    4170:	cd b7       	in	r28, 0x3d	; 61
    4172:	de b7       	in	r29, 0x3e	; 62
	xYieldPending = pdTRUE;
    4174:	81 e0       	ldi	r24, 0x01	; 1
    4176:	80 93 1a 07 	sts	0x071A, r24
}
    417a:	cf 91       	pop	r28
    417c:	df 91       	pop	r29
    417e:	08 95       	ret

00004180 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4180:	df 93       	push	r29
    4182:	cf 93       	push	r28
    4184:	00 d0       	rcall	.+0      	; 0x4186 <prvIdleTask+0x6>
    4186:	cd b7       	in	r28, 0x3d	; 61
    4188:	de b7       	in	r29, 0x3e	; 62
    418a:	9a 83       	std	Y+2, r25	; 0x02
    418c:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    418e:	0e 94 87 21 	call	0x430e	; 0x430e <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    4192:	80 91 1e 07 	lds	r24, 0x071E
    4196:	82 30       	cpi	r24, 0x02	; 2
    4198:	d0 f3       	brcs	.-12     	; 0x418e <prvIdleTask+0xe>
			{
				taskYIELD();
    419a:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <vPortYield>
    419e:	f7 cf       	rjmp	.-18     	; 0x418e <prvIdleTask+0xe>

000041a0 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    41a0:	0f 93       	push	r16
    41a2:	1f 93       	push	r17
    41a4:	df 93       	push	r29
    41a6:	cf 93       	push	r28
    41a8:	cd b7       	in	r28, 0x3d	; 61
    41aa:	de b7       	in	r29, 0x3e	; 62
    41ac:	2a 97       	sbiw	r28, 0x0a	; 10
    41ae:	0f b6       	in	r0, 0x3f	; 63
    41b0:	f8 94       	cli
    41b2:	de bf       	out	0x3e, r29	; 62
    41b4:	0f be       	out	0x3f, r0	; 63
    41b6:	cd bf       	out	0x3d, r28	; 61
    41b8:	9b 83       	std	Y+3, r25	; 0x03
    41ba:	8a 83       	std	Y+2, r24	; 0x02
    41bc:	7d 83       	std	Y+5, r23	; 0x05
    41be:	6c 83       	std	Y+4, r22	; 0x04
    41c0:	4e 83       	std	Y+6, r20	; 0x06
    41c2:	38 87       	std	Y+8, r19	; 0x08
    41c4:	2f 83       	std	Y+7, r18	; 0x07
    41c6:	1a 87       	std	Y+10, r17	; 0x0a
    41c8:	09 87       	std	Y+9, r16	; 0x09
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    41ca:	19 82       	std	Y+1, r1	; 0x01
    41cc:	21 c0       	rjmp	.+66     	; 0x4210 <prvInitialiseTCBVariables+0x70>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    41ce:	89 81       	ldd	r24, Y+1	; 0x01
    41d0:	48 2f       	mov	r20, r24
    41d2:	50 e0       	ldi	r21, 0x00	; 0
    41d4:	89 81       	ldd	r24, Y+1	; 0x01
    41d6:	28 2f       	mov	r18, r24
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	8c 81       	ldd	r24, Y+4	; 0x04
    41dc:	9d 81       	ldd	r25, Y+5	; 0x05
    41de:	fc 01       	movw	r30, r24
    41e0:	e2 0f       	add	r30, r18
    41e2:	f3 1f       	adc	r31, r19
    41e4:	20 81       	ld	r18, Z
    41e6:	8a 81       	ldd	r24, Y+2	; 0x02
    41e8:	9b 81       	ldd	r25, Y+3	; 0x03
    41ea:	84 0f       	add	r24, r20
    41ec:	95 1f       	adc	r25, r21
    41ee:	fc 01       	movw	r30, r24
    41f0:	79 96       	adiw	r30, 0x19	; 25
    41f2:	20 83       	st	Z, r18

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    41f4:	89 81       	ldd	r24, Y+1	; 0x01
    41f6:	28 2f       	mov	r18, r24
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	8c 81       	ldd	r24, Y+4	; 0x04
    41fc:	9d 81       	ldd	r25, Y+5	; 0x05
    41fe:	fc 01       	movw	r30, r24
    4200:	e2 0f       	add	r30, r18
    4202:	f3 1f       	adc	r31, r19
    4204:	80 81       	ld	r24, Z
    4206:	88 23       	and	r24, r24
    4208:	31 f0       	breq	.+12     	; 0x4216 <prvInitialiseTCBVariables+0x76>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    420a:	89 81       	ldd	r24, Y+1	; 0x01
    420c:	8f 5f       	subi	r24, 0xFF	; 255
    420e:	89 83       	std	Y+1, r24	; 0x01
    4210:	89 81       	ldd	r24, Y+1	; 0x01
    4212:	84 31       	cpi	r24, 0x14	; 20
    4214:	e0 f2       	brcs	.-72     	; 0x41ce <prvInitialiseTCBVariables+0x2e>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    4216:	ea 81       	ldd	r30, Y+2	; 0x02
    4218:	fb 81       	ldd	r31, Y+3	; 0x03
    421a:	14 a6       	std	Z+44, r1	; 0x2c

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    421c:	8e 81       	ldd	r24, Y+6	; 0x06
    421e:	86 30       	cpi	r24, 0x06	; 6
    4220:	10 f0       	brcs	.+4      	; 0x4226 <prvInitialiseTCBVariables+0x86>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    4222:	85 e0       	ldi	r24, 0x05	; 5
    4224:	8e 83       	std	Y+6, r24	; 0x06
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    4226:	ea 81       	ldd	r30, Y+2	; 0x02
    4228:	fb 81       	ldd	r31, Y+3	; 0x03
    422a:	8e 81       	ldd	r24, Y+6	; 0x06
    422c:	86 8b       	std	Z+22, r24	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    422e:	ea 81       	ldd	r30, Y+2	; 0x02
    4230:	fb 81       	ldd	r31, Y+3	; 0x03
    4232:	8e 81       	ldd	r24, Y+6	; 0x06
    4234:	85 a7       	std	Z+45, r24	; 0x2d
		pxTCB->uxMutexesHeld = 0;
    4236:	ea 81       	ldd	r30, Y+2	; 0x02
    4238:	fb 81       	ldd	r31, Y+3	; 0x03
    423a:	16 a6       	std	Z+46, r1	; 0x2e
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    423c:	8a 81       	ldd	r24, Y+2	; 0x02
    423e:	9b 81       	ldd	r25, Y+3	; 0x03
    4240:	02 96       	adiw	r24, 0x02	; 2
    4242:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    4246:	8a 81       	ldd	r24, Y+2	; 0x02
    4248:	9b 81       	ldd	r25, Y+3	; 0x03
    424a:	0c 96       	adiw	r24, 0x0c	; 12
    424c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    4250:	ea 81       	ldd	r30, Y+2	; 0x02
    4252:	fb 81       	ldd	r31, Y+3	; 0x03
    4254:	8a 81       	ldd	r24, Y+2	; 0x02
    4256:	9b 81       	ldd	r25, Y+3	; 0x03
    4258:	91 87       	std	Z+9, r25	; 0x09
    425a:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    425c:	8e 81       	ldd	r24, Y+6	; 0x06
    425e:	28 2f       	mov	r18, r24
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	86 e0       	ldi	r24, 0x06	; 6
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	82 1b       	sub	r24, r18
    4268:	93 0b       	sbc	r25, r19
    426a:	ea 81       	ldd	r30, Y+2	; 0x02
    426c:	fb 81       	ldd	r31, Y+3	; 0x03
    426e:	95 87       	std	Z+13, r25	; 0x0d
    4270:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    4272:	ea 81       	ldd	r30, Y+2	; 0x02
    4274:	fb 81       	ldd	r31, Y+3	; 0x03
    4276:	8a 81       	ldd	r24, Y+2	; 0x02
    4278:	9b 81       	ldd	r25, Y+3	; 0x03
    427a:	93 8b       	std	Z+19, r25	; 0x13
    427c:	82 8b       	std	Z+18, r24	; 0x12
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
    427e:	2a 96       	adiw	r28, 0x0a	; 10
    4280:	0f b6       	in	r0, 0x3f	; 63
    4282:	f8 94       	cli
    4284:	de bf       	out	0x3e, r29	; 62
    4286:	0f be       	out	0x3f, r0	; 63
    4288:	cd bf       	out	0x3d, r28	; 61
    428a:	cf 91       	pop	r28
    428c:	df 91       	pop	r29
    428e:	1f 91       	pop	r17
    4290:	0f 91       	pop	r16
    4292:	08 95       	ret

00004294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    4294:	df 93       	push	r29
    4296:	cf 93       	push	r28
    4298:	0f 92       	push	r0
    429a:	cd b7       	in	r28, 0x3d	; 61
    429c:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    429e:	19 82       	std	Y+1, r1	; 0x01
    42a0:	13 c0       	rjmp	.+38     	; 0x42c8 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    42a2:	89 81       	ldd	r24, Y+1	; 0x01
    42a4:	28 2f       	mov	r18, r24
    42a6:	30 e0       	ldi	r19, 0x00	; 0
    42a8:	c9 01       	movw	r24, r18
    42aa:	88 0f       	add	r24, r24
    42ac:	99 1f       	adc	r25, r25
    42ae:	88 0f       	add	r24, r24
    42b0:	99 1f       	adc	r25, r25
    42b2:	88 0f       	add	r24, r24
    42b4:	99 1f       	adc	r25, r25
    42b6:	82 0f       	add	r24, r18
    42b8:	93 1f       	adc	r25, r19
    42ba:	82 5e       	subi	r24, 0xE2	; 226
    42bc:	98 4f       	sbci	r25, 0xF8	; 248
    42be:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    42c2:	89 81       	ldd	r24, Y+1	; 0x01
    42c4:	8f 5f       	subi	r24, 0xFF	; 255
    42c6:	89 83       	std	Y+1, r24	; 0x01
    42c8:	89 81       	ldd	r24, Y+1	; 0x01
    42ca:	86 30       	cpi	r24, 0x06	; 6
    42cc:	50 f3       	brcs	.-44     	; 0x42a2 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    42ce:	84 e5       	ldi	r24, 0x54	; 84
    42d0:	97 e0       	ldi	r25, 0x07	; 7
    42d2:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    42d6:	8d e5       	ldi	r24, 0x5D	; 93
    42d8:	97 e0       	ldi	r25, 0x07	; 7
    42da:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    42de:	8a e6       	ldi	r24, 0x6A	; 106
    42e0:	97 e0       	ldi	r25, 0x07	; 7
    42e2:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    42e6:	83 e7       	ldi	r24, 0x73	; 115
    42e8:	97 e0       	ldi	r25, 0x07	; 7
    42ea:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    42ee:	84 e5       	ldi	r24, 0x54	; 84
    42f0:	97 e0       	ldi	r25, 0x07	; 7
    42f2:	90 93 67 07 	sts	0x0767, r25
    42f6:	80 93 66 07 	sts	0x0766, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    42fa:	8d e5       	ldi	r24, 0x5D	; 93
    42fc:	97 e0       	ldi	r25, 0x07	; 7
    42fe:	90 93 69 07 	sts	0x0769, r25
    4302:	80 93 68 07 	sts	0x0768, r24
}
    4306:	0f 90       	pop	r0
    4308:	cf 91       	pop	r28
    430a:	df 91       	pop	r29
    430c:	08 95       	ret

0000430e <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    430e:	df 93       	push	r29
    4310:	cf 93       	push	r28
    4312:	00 d0       	rcall	.+0      	; 0x4314 <prvCheckTasksWaitingTermination+0x6>
    4314:	0f 92       	push	r0
    4316:	cd b7       	in	r28, 0x3d	; 61
    4318:	de b7       	in	r29, 0x3e	; 62
    431a:	2e c0       	rjmp	.+92     	; 0x4378 <prvCheckTasksWaitingTermination+0x6a>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    431c:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4320:	80 91 73 07 	lds	r24, 0x0773
    4324:	1b 82       	std	Y+3, r1	; 0x03
    4326:	88 23       	and	r24, r24
    4328:	11 f4       	brne	.+4      	; 0x432e <prvCheckTasksWaitingTermination+0x20>
    432a:	81 e0       	ldi	r24, 0x01	; 1
    432c:	8b 83       	std	Y+3, r24	; 0x03
			}
			( void ) xTaskResumeAll();
    432e:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    4332:	8b 81       	ldd	r24, Y+3	; 0x03
    4334:	88 23       	and	r24, r24
    4336:	01 f5       	brne	.+64     	; 0x4378 <prvCheckTasksWaitingTermination+0x6a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    4338:	0f b6       	in	r0, 0x3f	; 63
    433a:	f8 94       	cli
    433c:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    433e:	e0 91 78 07 	lds	r30, 0x0778
    4342:	f0 91 79 07 	lds	r31, 0x0779
    4346:	86 81       	ldd	r24, Z+6	; 0x06
    4348:	97 81       	ldd	r25, Z+7	; 0x07
    434a:	9a 83       	std	Y+2, r25	; 0x02
    434c:	89 83       	std	Y+1, r24	; 0x01
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    434e:	89 81       	ldd	r24, Y+1	; 0x01
    4350:	9a 81       	ldd	r25, Y+2	; 0x02
    4352:	02 96       	adiw	r24, 0x02	; 2
    4354:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
					--uxCurrentNumberOfTasks;
    4358:	80 91 14 07 	lds	r24, 0x0714
    435c:	81 50       	subi	r24, 0x01	; 1
    435e:	80 93 14 07 	sts	0x0714, r24
					--uxTasksDeleted;
    4362:	80 91 13 07 	lds	r24, 0x0713
    4366:	81 50       	subi	r24, 0x01	; 1
    4368:	80 93 13 07 	sts	0x0713, r24
				}
				taskEXIT_CRITICAL();
    436c:	0f 90       	pop	r0
    436e:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    4370:	89 81       	ldd	r24, Y+1	; 0x01
    4372:	9a 81       	ldd	r25, Y+2	; 0x02
    4374:	0e 94 53 22 	call	0x44a6	; 0x44a6 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    4378:	80 91 13 07 	lds	r24, 0x0713
    437c:	88 23       	and	r24, r24
    437e:	71 f6       	brne	.-100    	; 0x431c <prvCheckTasksWaitingTermination+0xe>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
    4380:	0f 90       	pop	r0
    4382:	0f 90       	pop	r0
    4384:	0f 90       	pop	r0
    4386:	cf 91       	pop	r28
    4388:	df 91       	pop	r29
    438a:	08 95       	ret

0000438c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    438c:	df 93       	push	r29
    438e:	cf 93       	push	r28
    4390:	00 d0       	rcall	.+0      	; 0x4392 <prvAddCurrentTaskToDelayedList+0x6>
    4392:	cd b7       	in	r28, 0x3d	; 61
    4394:	de b7       	in	r29, 0x3e	; 62
    4396:	9a 83       	std	Y+2, r25	; 0x02
    4398:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    439a:	e0 91 11 07 	lds	r30, 0x0711
    439e:	f0 91 12 07 	lds	r31, 0x0712
    43a2:	89 81       	ldd	r24, Y+1	; 0x01
    43a4:	9a 81       	ldd	r25, Y+2	; 0x02
    43a6:	93 83       	std	Z+3, r25	; 0x03
    43a8:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    43aa:	20 91 15 07 	lds	r18, 0x0715
    43ae:	30 91 16 07 	lds	r19, 0x0716
    43b2:	89 81       	ldd	r24, Y+1	; 0x01
    43b4:	9a 81       	ldd	r25, Y+2	; 0x02
    43b6:	82 17       	cp	r24, r18
    43b8:	93 07       	cpc	r25, r19
    43ba:	70 f4       	brcc	.+28     	; 0x43d8 <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    43bc:	80 91 68 07 	lds	r24, 0x0768
    43c0:	90 91 69 07 	lds	r25, 0x0769
    43c4:	20 91 11 07 	lds	r18, 0x0711
    43c8:	30 91 12 07 	lds	r19, 0x0712
    43cc:	2e 5f       	subi	r18, 0xFE	; 254
    43ce:	3f 4f       	sbci	r19, 0xFF	; 255
    43d0:	b9 01       	movw	r22, r18
    43d2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <vListInsert>
    43d6:	1e c0       	rjmp	.+60     	; 0x4414 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    43d8:	40 91 66 07 	lds	r20, 0x0766
    43dc:	50 91 67 07 	lds	r21, 0x0767
    43e0:	80 91 11 07 	lds	r24, 0x0711
    43e4:	90 91 12 07 	lds	r25, 0x0712
    43e8:	9c 01       	movw	r18, r24
    43ea:	2e 5f       	subi	r18, 0xFE	; 254
    43ec:	3f 4f       	sbci	r19, 0xFF	; 255
    43ee:	ca 01       	movw	r24, r20
    43f0:	b9 01       	movw	r22, r18
    43f2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    43f6:	20 91 ed 00 	lds	r18, 0x00ED
    43fa:	30 91 ee 00 	lds	r19, 0x00EE
    43fe:	89 81       	ldd	r24, Y+1	; 0x01
    4400:	9a 81       	ldd	r25, Y+2	; 0x02
    4402:	82 17       	cp	r24, r18
    4404:	93 07       	cpc	r25, r19
    4406:	30 f4       	brcc	.+12     	; 0x4414 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    4408:	89 81       	ldd	r24, Y+1	; 0x01
    440a:	9a 81       	ldd	r25, Y+2	; 0x02
    440c:	90 93 ee 00 	sts	0x00EE, r25
    4410:	80 93 ed 00 	sts	0x00ED, r24
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    4414:	0f 90       	pop	r0
    4416:	0f 90       	pop	r0
    4418:	cf 91       	pop	r28
    441a:	df 91       	pop	r29
    441c:	08 95       	ret

0000441e <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
    441e:	df 93       	push	r29
    4420:	cf 93       	push	r28
    4422:	cd b7       	in	r28, 0x3d	; 61
    4424:	de b7       	in	r29, 0x3e	; 62
    4426:	28 97       	sbiw	r28, 0x08	; 8
    4428:	0f b6       	in	r0, 0x3f	; 63
    442a:	f8 94       	cli
    442c:	de bf       	out	0x3e, r29	; 62
    442e:	0f be       	out	0x3f, r0	; 63
    4430:	cd bf       	out	0x3d, r28	; 61
    4432:	9c 83       	std	Y+4, r25	; 0x04
    4434:	8b 83       	std	Y+3, r24	; 0x03
    4436:	7e 83       	std	Y+6, r23	; 0x06
    4438:	6d 83       	std	Y+5, r22	; 0x05
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    443a:	8f e2       	ldi	r24, 0x2F	; 47
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	0e 94 a5 0c 	call	0x194a	; 0x194a <pvPortMalloc>
    4442:	9a 83       	std	Y+2, r25	; 0x02
    4444:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    4446:	89 81       	ldd	r24, Y+1	; 0x01
    4448:	9a 81       	ldd	r25, Y+2	; 0x02
    444a:	00 97       	sbiw	r24, 0x00	; 0
    444c:	09 f1       	breq	.+66     	; 0x4490 <prvAllocateTCBAndStack+0x72>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    444e:	8d 81       	ldd	r24, Y+5	; 0x05
    4450:	9e 81       	ldd	r25, Y+6	; 0x06
    4452:	00 97       	sbiw	r24, 0x00	; 0
    4454:	39 f4       	brne	.+14     	; 0x4464 <prvAllocateTCBAndStack+0x46>
    4456:	8b 81       	ldd	r24, Y+3	; 0x03
    4458:	9c 81       	ldd	r25, Y+4	; 0x04
    445a:	0e 94 a5 0c 	call	0x194a	; 0x194a <pvPortMalloc>
    445e:	98 87       	std	Y+8, r25	; 0x08
    4460:	8f 83       	std	Y+7, r24	; 0x07
    4462:	04 c0       	rjmp	.+8      	; 0x446c <prvAllocateTCBAndStack+0x4e>
    4464:	8d 81       	ldd	r24, Y+5	; 0x05
    4466:	9e 81       	ldd	r25, Y+6	; 0x06
    4468:	98 87       	std	Y+8, r25	; 0x08
    446a:	8f 83       	std	Y+7, r24	; 0x07
    446c:	e9 81       	ldd	r30, Y+1	; 0x01
    446e:	fa 81       	ldd	r31, Y+2	; 0x02
    4470:	8f 81       	ldd	r24, Y+7	; 0x07
    4472:	98 85       	ldd	r25, Y+8	; 0x08
    4474:	90 8f       	std	Z+24, r25	; 0x18
    4476:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    4478:	e9 81       	ldd	r30, Y+1	; 0x01
    447a:	fa 81       	ldd	r31, Y+2	; 0x02
    447c:	87 89       	ldd	r24, Z+23	; 0x17
    447e:	90 8d       	ldd	r25, Z+24	; 0x18
    4480:	00 97       	sbiw	r24, 0x00	; 0
    4482:	31 f4       	brne	.+12     	; 0x4490 <prvAllocateTCBAndStack+0x72>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    4484:	89 81       	ldd	r24, Y+1	; 0x01
    4486:	9a 81       	ldd	r25, Y+2	; 0x02
    4488:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <vPortFree>
			pxNewTCB = NULL;
    448c:	1a 82       	std	Y+2, r1	; 0x02
    448e:	19 82       	std	Y+1, r1	; 0x01
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
    4490:	89 81       	ldd	r24, Y+1	; 0x01
    4492:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4494:	28 96       	adiw	r28, 0x08	; 8
    4496:	0f b6       	in	r0, 0x3f	; 63
    4498:	f8 94       	cli
    449a:	de bf       	out	0x3e, r29	; 62
    449c:	0f be       	out	0x3f, r0	; 63
    449e:	cd bf       	out	0x3d, r28	; 61
    44a0:	cf 91       	pop	r28
    44a2:	df 91       	pop	r29
    44a4:	08 95       	ret

000044a6 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    44a6:	df 93       	push	r29
    44a8:	cf 93       	push	r28
    44aa:	00 d0       	rcall	.+0      	; 0x44ac <prvDeleteTCB+0x6>
    44ac:	cd b7       	in	r28, 0x3d	; 61
    44ae:	de b7       	in	r29, 0x3e	; 62
    44b0:	9a 83       	std	Y+2, r25	; 0x02
    44b2:	89 83       	std	Y+1, r24	; 0x01
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    44b4:	e9 81       	ldd	r30, Y+1	; 0x01
    44b6:	fa 81       	ldd	r31, Y+2	; 0x02
    44b8:	87 89       	ldd	r24, Z+23	; 0x17
    44ba:	90 8d       	ldd	r25, Z+24	; 0x18
    44bc:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <vPortFree>
		vPortFree( pxTCB );
    44c0:	89 81       	ldd	r24, Y+1	; 0x01
    44c2:	9a 81       	ldd	r25, Y+2	; 0x02
    44c4:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <vPortFree>
	}
    44c8:	0f 90       	pop	r0
    44ca:	0f 90       	pop	r0
    44cc:	cf 91       	pop	r28
    44ce:	df 91       	pop	r29
    44d0:	08 95       	ret

000044d2 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    44d2:	df 93       	push	r29
    44d4:	cf 93       	push	r28
    44d6:	00 d0       	rcall	.+0      	; 0x44d8 <prvResetNextTaskUnblockTime+0x6>
    44d8:	cd b7       	in	r28, 0x3d	; 61
    44da:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    44dc:	e0 91 66 07 	lds	r30, 0x0766
    44e0:	f0 91 67 07 	lds	r31, 0x0767
    44e4:	80 81       	ld	r24, Z
    44e6:	88 23       	and	r24, r24
    44e8:	39 f4       	brne	.+14     	; 0x44f8 <prvResetNextTaskUnblockTime+0x26>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    44ea:	8f ef       	ldi	r24, 0xFF	; 255
    44ec:	9f ef       	ldi	r25, 0xFF	; 255
    44ee:	90 93 ee 00 	sts	0x00EE, r25
    44f2:	80 93 ed 00 	sts	0x00ED, r24
    44f6:	13 c0       	rjmp	.+38     	; 0x451e <prvResetNextTaskUnblockTime+0x4c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    44f8:	e0 91 66 07 	lds	r30, 0x0766
    44fc:	f0 91 67 07 	lds	r31, 0x0767
    4500:	05 80       	ldd	r0, Z+5	; 0x05
    4502:	f6 81       	ldd	r31, Z+6	; 0x06
    4504:	e0 2d       	mov	r30, r0
    4506:	86 81       	ldd	r24, Z+6	; 0x06
    4508:	97 81       	ldd	r25, Z+7	; 0x07
    450a:	9a 83       	std	Y+2, r25	; 0x02
    450c:	89 83       	std	Y+1, r24	; 0x01
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    450e:	e9 81       	ldd	r30, Y+1	; 0x01
    4510:	fa 81       	ldd	r31, Y+2	; 0x02
    4512:	82 81       	ldd	r24, Z+2	; 0x02
    4514:	93 81       	ldd	r25, Z+3	; 0x03
    4516:	90 93 ee 00 	sts	0x00EE, r25
    451a:	80 93 ed 00 	sts	0x00ED, r24
	}
}
    451e:	0f 90       	pop	r0
    4520:	0f 90       	pop	r0
    4522:	cf 91       	pop	r28
    4524:	df 91       	pop	r29
    4526:	08 95       	ret

00004528 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    4528:	df 93       	push	r29
    452a:	cf 93       	push	r28
    452c:	00 d0       	rcall	.+0      	; 0x452e <xTaskGetCurrentTaskHandle+0x6>
    452e:	cd b7       	in	r28, 0x3d	; 61
    4530:	de b7       	in	r29, 0x3e	; 62
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    4532:	80 91 11 07 	lds	r24, 0x0711
    4536:	90 91 12 07 	lds	r25, 0x0712
    453a:	9a 83       	std	Y+2, r25	; 0x02
    453c:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    453e:	89 81       	ldd	r24, Y+1	; 0x01
    4540:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    4542:	0f 90       	pop	r0
    4544:	0f 90       	pop	r0
    4546:	cf 91       	pop	r28
    4548:	df 91       	pop	r29
    454a:	08 95       	ret

0000454c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    454c:	df 93       	push	r29
    454e:	cf 93       	push	r28
    4550:	00 d0       	rcall	.+0      	; 0x4552 <vTaskPriorityInherit+0x6>
    4552:	00 d0       	rcall	.+0      	; 0x4554 <vTaskPriorityInherit+0x8>
    4554:	cd b7       	in	r28, 0x3d	; 61
    4556:	de b7       	in	r29, 0x3e	; 62
    4558:	9c 83       	std	Y+4, r25	; 0x04
    455a:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    455c:	8b 81       	ldd	r24, Y+3	; 0x03
    455e:	9c 81       	ldd	r25, Y+4	; 0x04
    4560:	9a 83       	std	Y+2, r25	; 0x02
    4562:	89 83       	std	Y+1, r24	; 0x01

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    4564:	8b 81       	ldd	r24, Y+3	; 0x03
    4566:	9c 81       	ldd	r25, Y+4	; 0x04
    4568:	00 97       	sbiw	r24, 0x00	; 0
    456a:	09 f4       	brne	.+2      	; 0x456e <vTaskPriorityInherit+0x22>
    456c:	73 c0       	rjmp	.+230    	; 0x4654 <vTaskPriorityInherit+0x108>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    456e:	e9 81       	ldd	r30, Y+1	; 0x01
    4570:	fa 81       	ldd	r31, Y+2	; 0x02
    4572:	96 89       	ldd	r25, Z+22	; 0x16
    4574:	e0 91 11 07 	lds	r30, 0x0711
    4578:	f0 91 12 07 	lds	r31, 0x0712
    457c:	86 89       	ldd	r24, Z+22	; 0x16
    457e:	98 17       	cp	r25, r24
    4580:	08 f0       	brcs	.+2      	; 0x4584 <vTaskPriorityInherit+0x38>
    4582:	68 c0       	rjmp	.+208    	; 0x4654 <vTaskPriorityInherit+0x108>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    4584:	e9 81       	ldd	r30, Y+1	; 0x01
    4586:	fa 81       	ldd	r31, Y+2	; 0x02
    4588:	84 85       	ldd	r24, Z+12	; 0x0c
    458a:	95 85       	ldd	r25, Z+13	; 0x0d
    458c:	99 23       	and	r25, r25
    458e:	7c f0       	brlt	.+30     	; 0x45ae <vTaskPriorityInherit+0x62>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4590:	e0 91 11 07 	lds	r30, 0x0711
    4594:	f0 91 12 07 	lds	r31, 0x0712
    4598:	86 89       	ldd	r24, Z+22	; 0x16
    459a:	28 2f       	mov	r18, r24
    459c:	30 e0       	ldi	r19, 0x00	; 0
    459e:	86 e0       	ldi	r24, 0x06	; 6
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	82 1b       	sub	r24, r18
    45a4:	93 0b       	sbc	r25, r19
    45a6:	e9 81       	ldd	r30, Y+1	; 0x01
    45a8:	fa 81       	ldd	r31, Y+2	; 0x02
    45aa:	95 87       	std	Z+13, r25	; 0x0d
    45ac:	84 87       	std	Z+12, r24	; 0x0c
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    45ae:	e9 81       	ldd	r30, Y+1	; 0x01
    45b0:	fa 81       	ldd	r31, Y+2	; 0x02
    45b2:	42 85       	ldd	r20, Z+10	; 0x0a
    45b4:	53 85       	ldd	r21, Z+11	; 0x0b
    45b6:	e9 81       	ldd	r30, Y+1	; 0x01
    45b8:	fa 81       	ldd	r31, Y+2	; 0x02
    45ba:	86 89       	ldd	r24, Z+22	; 0x16
    45bc:	28 2f       	mov	r18, r24
    45be:	30 e0       	ldi	r19, 0x00	; 0
    45c0:	c9 01       	movw	r24, r18
    45c2:	88 0f       	add	r24, r24
    45c4:	99 1f       	adc	r25, r25
    45c6:	88 0f       	add	r24, r24
    45c8:	99 1f       	adc	r25, r25
    45ca:	88 0f       	add	r24, r24
    45cc:	99 1f       	adc	r25, r25
    45ce:	82 0f       	add	r24, r18
    45d0:	93 1f       	adc	r25, r19
    45d2:	82 5e       	subi	r24, 0xE2	; 226
    45d4:	98 4f       	sbci	r25, 0xF8	; 248
    45d6:	48 17       	cp	r20, r24
    45d8:	59 07       	cpc	r21, r25
    45da:	a1 f5       	brne	.+104    	; 0x4644 <vTaskPriorityInherit+0xf8>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    45dc:	89 81       	ldd	r24, Y+1	; 0x01
    45de:	9a 81       	ldd	r25, Y+2	; 0x02
    45e0:	02 96       	adiw	r24, 0x02	; 2
    45e2:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    45e6:	e0 91 11 07 	lds	r30, 0x0711
    45ea:	f0 91 12 07 	lds	r31, 0x0712
    45ee:	86 89       	ldd	r24, Z+22	; 0x16
    45f0:	e9 81       	ldd	r30, Y+1	; 0x01
    45f2:	fa 81       	ldd	r31, Y+2	; 0x02
    45f4:	86 8b       	std	Z+22, r24	; 0x16
					prvAddTaskToReadyList( pxTCB );
    45f6:	e9 81       	ldd	r30, Y+1	; 0x01
    45f8:	fa 81       	ldd	r31, Y+2	; 0x02
    45fa:	96 89       	ldd	r25, Z+22	; 0x16
    45fc:	80 91 17 07 	lds	r24, 0x0717
    4600:	89 17       	cp	r24, r25
    4602:	28 f4       	brcc	.+10     	; 0x460e <vTaskPriorityInherit+0xc2>
    4604:	e9 81       	ldd	r30, Y+1	; 0x01
    4606:	fa 81       	ldd	r31, Y+2	; 0x02
    4608:	86 89       	ldd	r24, Z+22	; 0x16
    460a:	80 93 17 07 	sts	0x0717, r24
    460e:	e9 81       	ldd	r30, Y+1	; 0x01
    4610:	fa 81       	ldd	r31, Y+2	; 0x02
    4612:	86 89       	ldd	r24, Z+22	; 0x16
    4614:	28 2f       	mov	r18, r24
    4616:	30 e0       	ldi	r19, 0x00	; 0
    4618:	c9 01       	movw	r24, r18
    461a:	88 0f       	add	r24, r24
    461c:	99 1f       	adc	r25, r25
    461e:	88 0f       	add	r24, r24
    4620:	99 1f       	adc	r25, r25
    4622:	88 0f       	add	r24, r24
    4624:	99 1f       	adc	r25, r25
    4626:	82 0f       	add	r24, r18
    4628:	93 1f       	adc	r25, r19
    462a:	ac 01       	movw	r20, r24
    462c:	42 5e       	subi	r20, 0xE2	; 226
    462e:	58 4f       	sbci	r21, 0xF8	; 248
    4630:	89 81       	ldd	r24, Y+1	; 0x01
    4632:	9a 81       	ldd	r25, Y+2	; 0x02
    4634:	9c 01       	movw	r18, r24
    4636:	2e 5f       	subi	r18, 0xFE	; 254
    4638:	3f 4f       	sbci	r19, 0xFF	; 255
    463a:	ca 01       	movw	r24, r20
    463c:	b9 01       	movw	r22, r18
    463e:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <vListInsertEnd>
    4642:	08 c0       	rjmp	.+16     	; 0x4654 <vTaskPriorityInherit+0x108>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4644:	e0 91 11 07 	lds	r30, 0x0711
    4648:	f0 91 12 07 	lds	r31, 0x0712
    464c:	86 89       	ldd	r24, Z+22	; 0x16
    464e:	e9 81       	ldd	r30, Y+1	; 0x01
    4650:	fa 81       	ldd	r31, Y+2	; 0x02
    4652:	86 8b       	std	Z+22, r24	; 0x16
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4654:	0f 90       	pop	r0
    4656:	0f 90       	pop	r0
    4658:	0f 90       	pop	r0
    465a:	0f 90       	pop	r0
    465c:	cf 91       	pop	r28
    465e:	df 91       	pop	r29
    4660:	08 95       	ret

00004662 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    4662:	df 93       	push	r29
    4664:	cf 93       	push	r28
    4666:	00 d0       	rcall	.+0      	; 0x4668 <xTaskPriorityDisinherit+0x6>
    4668:	00 d0       	rcall	.+0      	; 0x466a <xTaskPriorityDisinherit+0x8>
    466a:	0f 92       	push	r0
    466c:	cd b7       	in	r28, 0x3d	; 61
    466e:	de b7       	in	r29, 0x3e	; 62
    4670:	9d 83       	std	Y+5, r25	; 0x05
    4672:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    4674:	8c 81       	ldd	r24, Y+4	; 0x04
    4676:	9d 81       	ldd	r25, Y+5	; 0x05
    4678:	9b 83       	std	Y+3, r25	; 0x03
    467a:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xReturn = pdFALSE;
    467c:	19 82       	std	Y+1, r1	; 0x01

		if( pxMutexHolder != NULL )
    467e:	8c 81       	ldd	r24, Y+4	; 0x04
    4680:	9d 81       	ldd	r25, Y+5	; 0x05
    4682:	00 97       	sbiw	r24, 0x00	; 0
    4684:	09 f4       	brne	.+2      	; 0x4688 <xTaskPriorityDisinherit+0x26>
    4686:	56 c0       	rjmp	.+172    	; 0x4734 <xTaskPriorityDisinherit+0xd2>
		{
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    4688:	ea 81       	ldd	r30, Y+2	; 0x02
    468a:	fb 81       	ldd	r31, Y+3	; 0x03
    468c:	86 a5       	ldd	r24, Z+46	; 0x2e
    468e:	81 50       	subi	r24, 0x01	; 1
    4690:	ea 81       	ldd	r30, Y+2	; 0x02
    4692:	fb 81       	ldd	r31, Y+3	; 0x03
    4694:	86 a7       	std	Z+46, r24	; 0x2e

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4696:	ea 81       	ldd	r30, Y+2	; 0x02
    4698:	fb 81       	ldd	r31, Y+3	; 0x03
    469a:	96 89       	ldd	r25, Z+22	; 0x16
    469c:	ea 81       	ldd	r30, Y+2	; 0x02
    469e:	fb 81       	ldd	r31, Y+3	; 0x03
    46a0:	85 a5       	ldd	r24, Z+45	; 0x2d
    46a2:	98 17       	cp	r25, r24
    46a4:	09 f4       	brne	.+2      	; 0x46a8 <xTaskPriorityDisinherit+0x46>
    46a6:	46 c0       	rjmp	.+140    	; 0x4734 <xTaskPriorityDisinherit+0xd2>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    46a8:	ea 81       	ldd	r30, Y+2	; 0x02
    46aa:	fb 81       	ldd	r31, Y+3	; 0x03
    46ac:	86 a5       	ldd	r24, Z+46	; 0x2e
    46ae:	88 23       	and	r24, r24
    46b0:	09 f0       	breq	.+2      	; 0x46b4 <xTaskPriorityDisinherit+0x52>
    46b2:	40 c0       	rjmp	.+128    	; 0x4734 <xTaskPriorityDisinherit+0xd2>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    46b4:	8a 81       	ldd	r24, Y+2	; 0x02
    46b6:	9b 81       	ldd	r25, Y+3	; 0x03
    46b8:	02 96       	adiw	r24, 0x02	; 2
    46ba:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    46be:	ea 81       	ldd	r30, Y+2	; 0x02
    46c0:	fb 81       	ldd	r31, Y+3	; 0x03
    46c2:	85 a5       	ldd	r24, Z+45	; 0x2d
    46c4:	ea 81       	ldd	r30, Y+2	; 0x02
    46c6:	fb 81       	ldd	r31, Y+3	; 0x03
    46c8:	86 8b       	std	Z+22, r24	; 0x16

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    46ca:	ea 81       	ldd	r30, Y+2	; 0x02
    46cc:	fb 81       	ldd	r31, Y+3	; 0x03
    46ce:	86 89       	ldd	r24, Z+22	; 0x16
    46d0:	28 2f       	mov	r18, r24
    46d2:	30 e0       	ldi	r19, 0x00	; 0
    46d4:	86 e0       	ldi	r24, 0x06	; 6
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	82 1b       	sub	r24, r18
    46da:	93 0b       	sbc	r25, r19
    46dc:	ea 81       	ldd	r30, Y+2	; 0x02
    46de:	fb 81       	ldd	r31, Y+3	; 0x03
    46e0:	95 87       	std	Z+13, r25	; 0x0d
    46e2:	84 87       	std	Z+12, r24	; 0x0c
					prvAddTaskToReadyList( pxTCB );
    46e4:	ea 81       	ldd	r30, Y+2	; 0x02
    46e6:	fb 81       	ldd	r31, Y+3	; 0x03
    46e8:	96 89       	ldd	r25, Z+22	; 0x16
    46ea:	80 91 17 07 	lds	r24, 0x0717
    46ee:	89 17       	cp	r24, r25
    46f0:	28 f4       	brcc	.+10     	; 0x46fc <xTaskPriorityDisinherit+0x9a>
    46f2:	ea 81       	ldd	r30, Y+2	; 0x02
    46f4:	fb 81       	ldd	r31, Y+3	; 0x03
    46f6:	86 89       	ldd	r24, Z+22	; 0x16
    46f8:	80 93 17 07 	sts	0x0717, r24
    46fc:	ea 81       	ldd	r30, Y+2	; 0x02
    46fe:	fb 81       	ldd	r31, Y+3	; 0x03
    4700:	86 89       	ldd	r24, Z+22	; 0x16
    4702:	28 2f       	mov	r18, r24
    4704:	30 e0       	ldi	r19, 0x00	; 0
    4706:	c9 01       	movw	r24, r18
    4708:	88 0f       	add	r24, r24
    470a:	99 1f       	adc	r25, r25
    470c:	88 0f       	add	r24, r24
    470e:	99 1f       	adc	r25, r25
    4710:	88 0f       	add	r24, r24
    4712:	99 1f       	adc	r25, r25
    4714:	82 0f       	add	r24, r18
    4716:	93 1f       	adc	r25, r19
    4718:	ac 01       	movw	r20, r24
    471a:	42 5e       	subi	r20, 0xE2	; 226
    471c:	58 4f       	sbci	r21, 0xF8	; 248
    471e:	8a 81       	ldd	r24, Y+2	; 0x02
    4720:	9b 81       	ldd	r25, Y+3	; 0x03
    4722:	9c 01       	movw	r18, r24
    4724:	2e 5f       	subi	r18, 0xFE	; 254
    4726:	3f 4f       	sbci	r19, 0xFF	; 255
    4728:	ca 01       	movw	r24, r20
    472a:	b9 01       	movw	r22, r18
    472c:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <vListInsertEnd>

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
    4730:	81 e0       	ldi	r24, 0x01	; 1
    4732:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    4734:	89 81       	ldd	r24, Y+1	; 0x01
	}
    4736:	0f 90       	pop	r0
    4738:	0f 90       	pop	r0
    473a:	0f 90       	pop	r0
    473c:	0f 90       	pop	r0
    473e:	0f 90       	pop	r0
    4740:	cf 91       	pop	r28
    4742:	df 91       	pop	r29
    4744:	08 95       	ret

00004746 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    4746:	df 93       	push	r29
    4748:	cf 93       	push	r28
    474a:	00 d0       	rcall	.+0      	; 0x474c <uxTaskResetEventItemValue+0x6>
    474c:	cd b7       	in	r28, 0x3d	; 61
    474e:	de b7       	in	r29, 0x3e	; 62
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    4750:	e0 91 11 07 	lds	r30, 0x0711
    4754:	f0 91 12 07 	lds	r31, 0x0712
    4758:	84 85       	ldd	r24, Z+12	; 0x0c
    475a:	95 85       	ldd	r25, Z+13	; 0x0d
    475c:	9a 83       	std	Y+2, r25	; 0x02
    475e:	89 83       	std	Y+1, r24	; 0x01

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4760:	a0 91 11 07 	lds	r26, 0x0711
    4764:	b0 91 12 07 	lds	r27, 0x0712
    4768:	e0 91 11 07 	lds	r30, 0x0711
    476c:	f0 91 12 07 	lds	r31, 0x0712
    4770:	86 89       	ldd	r24, Z+22	; 0x16
    4772:	28 2f       	mov	r18, r24
    4774:	30 e0       	ldi	r19, 0x00	; 0
    4776:	86 e0       	ldi	r24, 0x06	; 6
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	82 1b       	sub	r24, r18
    477c:	93 0b       	sbc	r25, r19
    477e:	1d 96       	adiw	r26, 0x0d	; 13
    4780:	9c 93       	st	X, r25
    4782:	8e 93       	st	-X, r24
    4784:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
    4786:	89 81       	ldd	r24, Y+1	; 0x01
    4788:	9a 81       	ldd	r25, Y+2	; 0x02
}
    478a:	0f 90       	pop	r0
    478c:	0f 90       	pop	r0
    478e:	cf 91       	pop	r28
    4790:	df 91       	pop	r29
    4792:	08 95       	ret

00004794 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    4794:	df 93       	push	r29
    4796:	cf 93       	push	r28
    4798:	cd b7       	in	r28, 0x3d	; 61
    479a:	de b7       	in	r29, 0x3e	; 62
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    479c:	80 91 11 07 	lds	r24, 0x0711
    47a0:	90 91 12 07 	lds	r25, 0x0712
    47a4:	00 97       	sbiw	r24, 0x00	; 0
    47a6:	39 f0       	breq	.+14     	; 0x47b6 <pvTaskIncrementMutexHeldCount+0x22>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    47a8:	e0 91 11 07 	lds	r30, 0x0711
    47ac:	f0 91 12 07 	lds	r31, 0x0712
    47b0:	86 a5       	ldd	r24, Z+46	; 0x2e
    47b2:	8f 5f       	subi	r24, 0xFF	; 255
    47b4:	86 a7       	std	Z+46, r24	; 0x2e
		}

		return pxCurrentTCB;
    47b6:	80 91 11 07 	lds	r24, 0x0711
    47ba:	90 91 12 07 	lds	r25, 0x0712
	}
    47be:	cf 91       	pop	r28
    47c0:	df 91       	pop	r29
    47c2:	08 95       	ret

000047c4 <ADC_SetCallBack>:
	#include "BIT_MATH.h"
	#include "ADC_interface.h"
	#include "ADC_register.h"

	static void(*Gptr)(u16 ADC_Adress)=D_NULL;
	void ADC_SetCallBack(void (*LocPtr)(u16 ADC_Adress)){
    47c4:	df 93       	push	r29
    47c6:	cf 93       	push	r28
    47c8:	00 d0       	rcall	.+0      	; 0x47ca <ADC_SetCallBack+0x6>
    47ca:	cd b7       	in	r28, 0x3d	; 61
    47cc:	de b7       	in	r29, 0x3e	; 62
    47ce:	9a 83       	std	Y+2, r25	; 0x02
    47d0:	89 83       	std	Y+1, r24	; 0x01

		if(LocPtr!=D_NULL){
    47d2:	89 81       	ldd	r24, Y+1	; 0x01
    47d4:	9a 81       	ldd	r25, Y+2	; 0x02
    47d6:	00 97       	sbiw	r24, 0x00	; 0
    47d8:	31 f0       	breq	.+12     	; 0x47e6 <ADC_SetCallBack+0x22>
			Gptr=LocPtr;
    47da:	89 81       	ldd	r24, Y+1	; 0x01
    47dc:	9a 81       	ldd	r25, Y+2	; 0x02
    47de:	90 93 7d 07 	sts	0x077D, r25
    47e2:	80 93 7c 07 	sts	0x077C, r24
			}

	}
    47e6:	0f 90       	pop	r0
    47e8:	0f 90       	pop	r0
    47ea:	cf 91       	pop	r28
    47ec:	df 91       	pop	r29
    47ee:	08 95       	ret

000047f0 <ADC_VidInit>:
	void ADC_VidInit(void){
    47f0:	df 93       	push	r29
    47f2:	cf 93       	push	r28
    47f4:	cd b7       	in	r28, 0x3d	; 61
    47f6:	de b7       	in	r29, 0x3e	; 62
	//CHOOSE THE Vref//
	  SET_BIT(ADMUX,PIN6);
    47f8:	a7 e2       	ldi	r26, 0x27	; 39
    47fa:	b0 e0       	ldi	r27, 0x00	; 0
    47fc:	e7 e2       	ldi	r30, 0x27	; 39
    47fe:	f0 e0       	ldi	r31, 0x00	; 0
    4800:	80 81       	ld	r24, Z
    4802:	80 64       	ori	r24, 0x40	; 64
    4804:	8c 93       	st	X, r24
	  CLR_BIT(ADMUX,PIN7);
    4806:	a7 e2       	ldi	r26, 0x27	; 39
    4808:	b0 e0       	ldi	r27, 0x00	; 0
    480a:	e7 e2       	ldi	r30, 0x27	; 39
    480c:	f0 e0       	ldi	r31, 0x00	; 0
    480e:	80 81       	ld	r24, Z
    4810:	8f 77       	andi	r24, 0x7F	; 127
    4812:	8c 93       	st	X, r24

	#if DATA_READING==RIGHT  
	   CLR_BIT(ADMUX,PIN5);//choose the right adjest//
    4814:	a7 e2       	ldi	r26, 0x27	; 39
    4816:	b0 e0       	ldi	r27, 0x00	; 0
    4818:	e7 e2       	ldi	r30, 0x27	; 39
    481a:	f0 e0       	ldi	r31, 0x00	; 0
    481c:	80 81       	ld	r24, Z
    481e:	8f 7d       	andi	r24, 0xDF	; 223
    4820:	8c 93       	st	X, r24
	#endif   

	#if AUTO_TRIG==OFF
	   CLR_BIT(ADCSRA,PIN5);//auto trigger OFF//
	#elif   AUTO_TRIG==ON
	  SET_BIT(ADCSRA,PIN5);//auto trigger on//
    4822:	a6 e2       	ldi	r26, 0x26	; 38
    4824:	b0 e0       	ldi	r27, 0x00	; 0
    4826:	e6 e2       	ldi	r30, 0x26	; 38
    4828:	f0 e0       	ldi	r31, 0x00	; 0
    482a:	80 81       	ld	r24, Z
    482c:	80 62       	ori	r24, 0x20	; 32
    482e:	8c 93       	st	X, r24
	  CLR_BIT(SFIOR,PIN4);// this bit must be zero when SFIOR is written //
    4830:	a0 e5       	ldi	r26, 0x50	; 80
    4832:	b0 e0       	ldi	r27, 0x00	; 0
    4834:	e0 e5       	ldi	r30, 0x50	; 80
    4836:	f0 e0       	ldi	r31, 0x00	; 0
    4838:	80 81       	ld	r24, Z
    483a:	8f 7e       	andi	r24, 0xEF	; 239
    483c:	8c 93       	st	X, r24
			  #if AUTO_TRIG_SOURCE==RUNNING
				  CLR_BIT(SFIOR,PIN5);
    483e:	a0 e5       	ldi	r26, 0x50	; 80
    4840:	b0 e0       	ldi	r27, 0x00	; 0
    4842:	e0 e5       	ldi	r30, 0x50	; 80
    4844:	f0 e0       	ldi	r31, 0x00	; 0
    4846:	80 81       	ld	r24, Z
    4848:	8f 7d       	andi	r24, 0xDF	; 223
    484a:	8c 93       	st	X, r24
				  CLR_BIT(SFIOR,PIN6);
    484c:	a0 e5       	ldi	r26, 0x50	; 80
    484e:	b0 e0       	ldi	r27, 0x00	; 0
    4850:	e0 e5       	ldi	r30, 0x50	; 80
    4852:	f0 e0       	ldi	r31, 0x00	; 0
    4854:	80 81       	ld	r24, Z
    4856:	8f 7b       	andi	r24, 0xBF	; 191
    4858:	8c 93       	st	X, r24
				  CLR_BIT(SFIOR,PIN7);
    485a:	a0 e5       	ldi	r26, 0x50	; 80
    485c:	b0 e0       	ldi	r27, 0x00	; 0
    485e:	e0 e5       	ldi	r30, 0x50	; 80
    4860:	f0 e0       	ldi	r31, 0x00	; 0
    4862:	80 81       	ld	r24, Z
    4864:	8f 77       	andi	r24, 0x7F	; 127
    4866:	8c 93       	st	X, r24

			  #endif

	#endif   
	   
		CLR_BIT(ADCSRA,PIN0);  //pre scaller 64//
    4868:	a6 e2       	ldi	r26, 0x26	; 38
    486a:	b0 e0       	ldi	r27, 0x00	; 0
    486c:	e6 e2       	ldi	r30, 0x26	; 38
    486e:	f0 e0       	ldi	r31, 0x00	; 0
    4870:	80 81       	ld	r24, Z
    4872:	8e 7f       	andi	r24, 0xFE	; 254
    4874:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,PIN1);
    4876:	a6 e2       	ldi	r26, 0x26	; 38
    4878:	b0 e0       	ldi	r27, 0x00	; 0
    487a:	e6 e2       	ldi	r30, 0x26	; 38
    487c:	f0 e0       	ldi	r31, 0x00	; 0
    487e:	80 81       	ld	r24, Z
    4880:	82 60       	ori	r24, 0x02	; 2
    4882:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,PIN2);
    4884:	a6 e2       	ldi	r26, 0x26	; 38
    4886:	b0 e0       	ldi	r27, 0x00	; 0
    4888:	e6 e2       	ldi	r30, 0x26	; 38
    488a:	f0 e0       	ldi	r31, 0x00	; 0
    488c:	80 81       	ld	r24, Z
    488e:	84 60       	ori	r24, 0x04	; 4
    4890:	8c 93       	st	X, r24
		
	  
		SET_BIT(ADCSRA ,PIN7);//ADC ENABLBE//
    4892:	a6 e2       	ldi	r26, 0x26	; 38
    4894:	b0 e0       	ldi	r27, 0x00	; 0
    4896:	e6 e2       	ldi	r30, 0x26	; 38
    4898:	f0 e0       	ldi	r31, 0x00	; 0
    489a:	80 81       	ld	r24, Z
    489c:	80 68       	ori	r24, 0x80	; 128
    489e:	8c 93       	st	X, r24

	}
    48a0:	cf 91       	pop	r28
    48a2:	df 91       	pop	r29
    48a4:	08 95       	ret

000048a6 <ADC_VidGetReadingPooling>:

	u16 ADC_VidGetReadingPooling(u8 LOC_u8AdcNum){
    48a6:	df 93       	push	r29
    48a8:	cf 93       	push	r28
    48aa:	0f 92       	push	r0
    48ac:	cd b7       	in	r28, 0x3d	; 61
    48ae:	de b7       	in	r29, 0x3e	; 62
    48b0:	89 83       	std	Y+1, r24	; 0x01
		
		ADMUX&=0b11100000;
    48b2:	a7 e2       	ldi	r26, 0x27	; 39
    48b4:	b0 e0       	ldi	r27, 0x00	; 0
    48b6:	e7 e2       	ldi	r30, 0x27	; 39
    48b8:	f0 e0       	ldi	r31, 0x00	; 0
    48ba:	80 81       	ld	r24, Z
    48bc:	80 7e       	andi	r24, 0xE0	; 224
    48be:	8c 93       	st	X, r24
		ADMUX|=LOC_u8AdcNum;
    48c0:	a7 e2       	ldi	r26, 0x27	; 39
    48c2:	b0 e0       	ldi	r27, 0x00	; 0
    48c4:	e7 e2       	ldi	r30, 0x27	; 39
    48c6:	f0 e0       	ldi	r31, 0x00	; 0
    48c8:	90 81       	ld	r25, Z
    48ca:	89 81       	ldd	r24, Y+1	; 0x01
    48cc:	89 2b       	or	r24, r25
    48ce:	8c 93       	st	X, r24
		
		SET_BIT(ADCSRA,PIN6);//start the conversion//
    48d0:	a6 e2       	ldi	r26, 0x26	; 38
    48d2:	b0 e0       	ldi	r27, 0x00	; 0
    48d4:	e6 e2       	ldi	r30, 0x26	; 38
    48d6:	f0 e0       	ldi	r31, 0x00	; 0
    48d8:	80 81       	ld	r24, Z
    48da:	80 64       	ori	r24, 0x40	; 64
    48dc:	8c 93       	st	X, r24
		
		while(0==GET_BIT(ADCSRA,PIN4)){
    48de:	e6 e2       	ldi	r30, 0x26	; 38
    48e0:	f0 e0       	ldi	r31, 0x00	; 0
    48e2:	80 81       	ld	r24, Z
    48e4:	82 95       	swap	r24
    48e6:	8f 70       	andi	r24, 0x0F	; 15
    48e8:	88 2f       	mov	r24, r24
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	81 70       	andi	r24, 0x01	; 1
    48ee:	90 70       	andi	r25, 0x00	; 0
    48f0:	00 97       	sbiw	r24, 0x00	; 0
    48f2:	a9 f3       	breq	.-22     	; 0x48de <ADC_VidGetReadingPooling+0x38>
			
		}
		SET_BIT(ADCSRA,PIN4);
    48f4:	a6 e2       	ldi	r26, 0x26	; 38
    48f6:	b0 e0       	ldi	r27, 0x00	; 0
    48f8:	e6 e2       	ldi	r30, 0x26	; 38
    48fa:	f0 e0       	ldi	r31, 0x00	; 0
    48fc:	80 81       	ld	r24, Z
    48fe:	80 61       	ori	r24, 0x10	; 16
    4900:	8c 93       	st	X, r24
		return ADC;
    4902:	e4 e2       	ldi	r30, 0x24	; 36
    4904:	f0 e0       	ldi	r31, 0x00	; 0
    4906:	80 81       	ld	r24, Z
    4908:	91 81       	ldd	r25, Z+1	; 0x01
	}
    490a:	0f 90       	pop	r0
    490c:	cf 91       	pop	r28
    490e:	df 91       	pop	r29
    4910:	08 95       	ret

00004912 <ADC_VidGetReadingInterrupt>:

	void ADC_VidGetReadingInterrupt(u8 LOC_u8AdcNum){
    4912:	df 93       	push	r29
    4914:	cf 93       	push	r28
    4916:	0f 92       	push	r0
    4918:	cd b7       	in	r28, 0x3d	; 61
    491a:	de b7       	in	r29, 0x3e	; 62
    491c:	89 83       	std	Y+1, r24	; 0x01
		ADMUX&=0b11100000;
    491e:	a7 e2       	ldi	r26, 0x27	; 39
    4920:	b0 e0       	ldi	r27, 0x00	; 0
    4922:	e7 e2       	ldi	r30, 0x27	; 39
    4924:	f0 e0       	ldi	r31, 0x00	; 0
    4926:	80 81       	ld	r24, Z
    4928:	80 7e       	andi	r24, 0xE0	; 224
    492a:	8c 93       	st	X, r24
		ADMUX|=LOC_u8AdcNum;
    492c:	a7 e2       	ldi	r26, 0x27	; 39
    492e:	b0 e0       	ldi	r27, 0x00	; 0
    4930:	e7 e2       	ldi	r30, 0x27	; 39
    4932:	f0 e0       	ldi	r31, 0x00	; 0
    4934:	90 81       	ld	r25, Z
    4936:	89 81       	ldd	r24, Y+1	; 0x01
    4938:	89 2b       	or	r24, r25
    493a:	8c 93       	st	X, r24

	#if	INTERRUPT_ADC==ON
	 SET_BIT(ADCSRA,PIN3);//enable the ADC interrupt on//
	#elif  INTERRUPT_ADC==OFF
	 CLR_BIT(ADCSRA,PIN3);//Disable the ADC interrupt on//
    493c:	a6 e2       	ldi	r26, 0x26	; 38
    493e:	b0 e0       	ldi	r27, 0x00	; 0
    4940:	e6 e2       	ldi	r30, 0x26	; 38
    4942:	f0 e0       	ldi	r31, 0x00	; 0
    4944:	80 81       	ld	r24, Z
    4946:	87 7f       	andi	r24, 0xF7	; 247
    4948:	8c 93       	st	X, r24
	#endif
	SET_BIT(ADCSRA,PIN6);//start the conversion//
    494a:	a6 e2       	ldi	r26, 0x26	; 38
    494c:	b0 e0       	ldi	r27, 0x00	; 0
    494e:	e6 e2       	ldi	r30, 0x26	; 38
    4950:	f0 e0       	ldi	r31, 0x00	; 0
    4952:	80 81       	ld	r24, Z
    4954:	80 64       	ori	r24, 0x40	; 64
    4956:	8c 93       	st	X, r24

	}
    4958:	0f 90       	pop	r0
    495a:	cf 91       	pop	r28
    495c:	df 91       	pop	r29
    495e:	08 95       	ret

00004960 <__vector_16>:

	void __vector_16( void ){
    4960:	1f 92       	push	r1
    4962:	0f 92       	push	r0
    4964:	0f b6       	in	r0, 0x3f	; 63
    4966:	0f 92       	push	r0
    4968:	11 24       	eor	r1, r1
    496a:	2f 93       	push	r18
    496c:	3f 93       	push	r19
    496e:	4f 93       	push	r20
    4970:	5f 93       	push	r21
    4972:	6f 93       	push	r22
    4974:	7f 93       	push	r23
    4976:	8f 93       	push	r24
    4978:	9f 93       	push	r25
    497a:	af 93       	push	r26
    497c:	bf 93       	push	r27
    497e:	ef 93       	push	r30
    4980:	ff 93       	push	r31
    4982:	df 93       	push	r29
    4984:	cf 93       	push	r28
    4986:	cd b7       	in	r28, 0x3d	; 61
    4988:	de b7       	in	r29, 0x3e	; 62

	 if(Gptr!=D_NULL){
    498a:	80 91 7c 07 	lds	r24, 0x077C
    498e:	90 91 7d 07 	lds	r25, 0x077D
    4992:	00 97       	sbiw	r24, 0x00	; 0
    4994:	49 f0       	breq	.+18     	; 0x49a8 <__vector_16+0x48>
		Gptr(ADC);
    4996:	e0 91 7c 07 	lds	r30, 0x077C
    499a:	f0 91 7d 07 	lds	r31, 0x077D
    499e:	a4 e2       	ldi	r26, 0x24	; 36
    49a0:	b0 e0       	ldi	r27, 0x00	; 0
    49a2:	8d 91       	ld	r24, X+
    49a4:	9c 91       	ld	r25, X
    49a6:	09 95       	icall
		}

	}
    49a8:	cf 91       	pop	r28
    49aa:	df 91       	pop	r29
    49ac:	ff 91       	pop	r31
    49ae:	ef 91       	pop	r30
    49b0:	bf 91       	pop	r27
    49b2:	af 91       	pop	r26
    49b4:	9f 91       	pop	r25
    49b6:	8f 91       	pop	r24
    49b8:	7f 91       	pop	r23
    49ba:	6f 91       	pop	r22
    49bc:	5f 91       	pop	r21
    49be:	4f 91       	pop	r20
    49c0:	3f 91       	pop	r19
    49c2:	2f 91       	pop	r18
    49c4:	0f 90       	pop	r0
    49c6:	0f be       	out	0x3f, r0	; 63
    49c8:	0f 90       	pop	r0
    49ca:	1f 90       	pop	r1
    49cc:	18 95       	reti

000049ce <DIO_VidSetPinDirection>:
/*
loc_u8port=port name 
loc_u8pin =pin number
loc_u8state=pin direction
*/
void DIO_VidSetPinDirection(u8 loc_u8port,u8 loc_u8pin, u8 loc_u8state){
    49ce:	df 93       	push	r29
    49d0:	cf 93       	push	r28
    49d2:	cd b7       	in	r28, 0x3d	; 61
    49d4:	de b7       	in	r29, 0x3e	; 62
    49d6:	27 97       	sbiw	r28, 0x07	; 7
    49d8:	0f b6       	in	r0, 0x3f	; 63
    49da:	f8 94       	cli
    49dc:	de bf       	out	0x3e, r29	; 62
    49de:	0f be       	out	0x3f, r0	; 63
    49e0:	cd bf       	out	0x3d, r28	; 61
    49e2:	89 83       	std	Y+1, r24	; 0x01
    49e4:	6a 83       	std	Y+2, r22	; 0x02
    49e6:	4b 83       	std	Y+3, r20	; 0x03
	
	if(1==loc_u8state){
    49e8:	8b 81       	ldd	r24, Y+3	; 0x03
    49ea:	81 30       	cpi	r24, 0x01	; 1
    49ec:	09 f0       	breq	.+2      	; 0x49f0 <DIO_VidSetPinDirection+0x22>
    49ee:	6f c0       	rjmp	.+222    	; 0x4ace <DIO_VidSetPinDirection+0x100>
	    switch(loc_u8port){
    49f0:	89 81       	ldd	r24, Y+1	; 0x01
    49f2:	28 2f       	mov	r18, r24
    49f4:	30 e0       	ldi	r19, 0x00	; 0
    49f6:	3f 83       	std	Y+7, r19	; 0x07
    49f8:	2e 83       	std	Y+6, r18	; 0x06
    49fa:	8e 81       	ldd	r24, Y+6	; 0x06
    49fc:	9f 81       	ldd	r25, Y+7	; 0x07
    49fe:	81 30       	cpi	r24, 0x01	; 1
    4a00:	91 05       	cpc	r25, r1
    4a02:	49 f1       	breq	.+82     	; 0x4a56 <DIO_VidSetPinDirection+0x88>
    4a04:	2e 81       	ldd	r18, Y+6	; 0x06
    4a06:	3f 81       	ldd	r19, Y+7	; 0x07
    4a08:	22 30       	cpi	r18, 0x02	; 2
    4a0a:	31 05       	cpc	r19, r1
    4a0c:	2c f4       	brge	.+10     	; 0x4a18 <DIO_VidSetPinDirection+0x4a>
    4a0e:	8e 81       	ldd	r24, Y+6	; 0x06
    4a10:	9f 81       	ldd	r25, Y+7	; 0x07
    4a12:	00 97       	sbiw	r24, 0x00	; 0
    4a14:	61 f0       	breq	.+24     	; 0x4a2e <DIO_VidSetPinDirection+0x60>
    4a16:	d2 c0       	rjmp	.+420    	; 0x4bbc <DIO_VidSetPinDirection+0x1ee>
    4a18:	2e 81       	ldd	r18, Y+6	; 0x06
    4a1a:	3f 81       	ldd	r19, Y+7	; 0x07
    4a1c:	22 30       	cpi	r18, 0x02	; 2
    4a1e:	31 05       	cpc	r19, r1
    4a20:	71 f1       	breq	.+92     	; 0x4a7e <DIO_VidSetPinDirection+0xb0>
    4a22:	8e 81       	ldd	r24, Y+6	; 0x06
    4a24:	9f 81       	ldd	r25, Y+7	; 0x07
    4a26:	83 30       	cpi	r24, 0x03	; 3
    4a28:	91 05       	cpc	r25, r1
    4a2a:	e9 f1       	breq	.+122    	; 0x4aa6 <DIO_VidSetPinDirection+0xd8>
    4a2c:	c7 c0       	rjmp	.+398    	; 0x4bbc <DIO_VidSetPinDirection+0x1ee>
		case 0:SET_BIT(DDRA,loc_u8pin);break;
    4a2e:	aa e3       	ldi	r26, 0x3A	; 58
    4a30:	b0 e0       	ldi	r27, 0x00	; 0
    4a32:	ea e3       	ldi	r30, 0x3A	; 58
    4a34:	f0 e0       	ldi	r31, 0x00	; 0
    4a36:	80 81       	ld	r24, Z
    4a38:	48 2f       	mov	r20, r24
    4a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a3c:	28 2f       	mov	r18, r24
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	81 e0       	ldi	r24, 0x01	; 1
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	02 2e       	mov	r0, r18
    4a46:	02 c0       	rjmp	.+4      	; 0x4a4c <DIO_VidSetPinDirection+0x7e>
    4a48:	88 0f       	add	r24, r24
    4a4a:	99 1f       	adc	r25, r25
    4a4c:	0a 94       	dec	r0
    4a4e:	e2 f7       	brpl	.-8      	; 0x4a48 <DIO_VidSetPinDirection+0x7a>
    4a50:	84 2b       	or	r24, r20
    4a52:	8c 93       	st	X, r24
    4a54:	b3 c0       	rjmp	.+358    	; 0x4bbc <DIO_VidSetPinDirection+0x1ee>
		case 1:SET_BIT(DDRB,loc_u8pin);break;
    4a56:	a7 e3       	ldi	r26, 0x37	; 55
    4a58:	b0 e0       	ldi	r27, 0x00	; 0
    4a5a:	e7 e3       	ldi	r30, 0x37	; 55
    4a5c:	f0 e0       	ldi	r31, 0x00	; 0
    4a5e:	80 81       	ld	r24, Z
    4a60:	48 2f       	mov	r20, r24
    4a62:	8a 81       	ldd	r24, Y+2	; 0x02
    4a64:	28 2f       	mov	r18, r24
    4a66:	30 e0       	ldi	r19, 0x00	; 0
    4a68:	81 e0       	ldi	r24, 0x01	; 1
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	02 2e       	mov	r0, r18
    4a6e:	02 c0       	rjmp	.+4      	; 0x4a74 <DIO_VidSetPinDirection+0xa6>
    4a70:	88 0f       	add	r24, r24
    4a72:	99 1f       	adc	r25, r25
    4a74:	0a 94       	dec	r0
    4a76:	e2 f7       	brpl	.-8      	; 0x4a70 <DIO_VidSetPinDirection+0xa2>
    4a78:	84 2b       	or	r24, r20
    4a7a:	8c 93       	st	X, r24
    4a7c:	9f c0       	rjmp	.+318    	; 0x4bbc <DIO_VidSetPinDirection+0x1ee>
		case 2:SET_BIT(DDRC,loc_u8pin);break;
    4a7e:	a4 e3       	ldi	r26, 0x34	; 52
    4a80:	b0 e0       	ldi	r27, 0x00	; 0
    4a82:	e4 e3       	ldi	r30, 0x34	; 52
    4a84:	f0 e0       	ldi	r31, 0x00	; 0
    4a86:	80 81       	ld	r24, Z
    4a88:	48 2f       	mov	r20, r24
    4a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a8c:	28 2f       	mov	r18, r24
    4a8e:	30 e0       	ldi	r19, 0x00	; 0
    4a90:	81 e0       	ldi	r24, 0x01	; 1
    4a92:	90 e0       	ldi	r25, 0x00	; 0
    4a94:	02 2e       	mov	r0, r18
    4a96:	02 c0       	rjmp	.+4      	; 0x4a9c <DIO_VidSetPinDirection+0xce>
    4a98:	88 0f       	add	r24, r24
    4a9a:	99 1f       	adc	r25, r25
    4a9c:	0a 94       	dec	r0
    4a9e:	e2 f7       	brpl	.-8      	; 0x4a98 <DIO_VidSetPinDirection+0xca>
    4aa0:	84 2b       	or	r24, r20
    4aa2:	8c 93       	st	X, r24
    4aa4:	8b c0       	rjmp	.+278    	; 0x4bbc <DIO_VidSetPinDirection+0x1ee>
		case 3:SET_BIT(DDRD,loc_u8pin);break;
    4aa6:	a1 e3       	ldi	r26, 0x31	; 49
    4aa8:	b0 e0       	ldi	r27, 0x00	; 0
    4aaa:	e1 e3       	ldi	r30, 0x31	; 49
    4aac:	f0 e0       	ldi	r31, 0x00	; 0
    4aae:	80 81       	ld	r24, Z
    4ab0:	48 2f       	mov	r20, r24
    4ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab4:	28 2f       	mov	r18, r24
    4ab6:	30 e0       	ldi	r19, 0x00	; 0
    4ab8:	81 e0       	ldi	r24, 0x01	; 1
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	02 2e       	mov	r0, r18
    4abe:	02 c0       	rjmp	.+4      	; 0x4ac4 <DIO_VidSetPinDirection+0xf6>
    4ac0:	88 0f       	add	r24, r24
    4ac2:	99 1f       	adc	r25, r25
    4ac4:	0a 94       	dec	r0
    4ac6:	e2 f7       	brpl	.-8      	; 0x4ac0 <DIO_VidSetPinDirection+0xf2>
    4ac8:	84 2b       	or	r24, r20
    4aca:	8c 93       	st	X, r24
    4acc:	77 c0       	rjmp	.+238    	; 0x4bbc <DIO_VidSetPinDirection+0x1ee>
	 }
	}
	else if(0==loc_u8state){
    4ace:	8b 81       	ldd	r24, Y+3	; 0x03
    4ad0:	88 23       	and	r24, r24
    4ad2:	09 f0       	breq	.+2      	; 0x4ad6 <DIO_VidSetPinDirection+0x108>
    4ad4:	73 c0       	rjmp	.+230    	; 0x4bbc <DIO_VidSetPinDirection+0x1ee>
	    switch(loc_u8port){
    4ad6:	89 81       	ldd	r24, Y+1	; 0x01
    4ad8:	28 2f       	mov	r18, r24
    4ada:	30 e0       	ldi	r19, 0x00	; 0
    4adc:	3d 83       	std	Y+5, r19	; 0x05
    4ade:	2c 83       	std	Y+4, r18	; 0x04
    4ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    4ae2:	9d 81       	ldd	r25, Y+5	; 0x05
    4ae4:	81 30       	cpi	r24, 0x01	; 1
    4ae6:	91 05       	cpc	r25, r1
    4ae8:	59 f1       	breq	.+86     	; 0x4b40 <DIO_VidSetPinDirection+0x172>
    4aea:	2c 81       	ldd	r18, Y+4	; 0x04
    4aec:	3d 81       	ldd	r19, Y+5	; 0x05
    4aee:	22 30       	cpi	r18, 0x02	; 2
    4af0:	31 05       	cpc	r19, r1
    4af2:	2c f4       	brge	.+10     	; 0x4afe <DIO_VidSetPinDirection+0x130>
    4af4:	8c 81       	ldd	r24, Y+4	; 0x04
    4af6:	9d 81       	ldd	r25, Y+5	; 0x05
    4af8:	00 97       	sbiw	r24, 0x00	; 0
    4afa:	69 f0       	breq	.+26     	; 0x4b16 <DIO_VidSetPinDirection+0x148>
    4afc:	5f c0       	rjmp	.+190    	; 0x4bbc <DIO_VidSetPinDirection+0x1ee>
    4afe:	2c 81       	ldd	r18, Y+4	; 0x04
    4b00:	3d 81       	ldd	r19, Y+5	; 0x05
    4b02:	22 30       	cpi	r18, 0x02	; 2
    4b04:	31 05       	cpc	r19, r1
    4b06:	89 f1       	breq	.+98     	; 0x4b6a <DIO_VidSetPinDirection+0x19c>
    4b08:	8c 81       	ldd	r24, Y+4	; 0x04
    4b0a:	9d 81       	ldd	r25, Y+5	; 0x05
    4b0c:	83 30       	cpi	r24, 0x03	; 3
    4b0e:	91 05       	cpc	r25, r1
    4b10:	09 f4       	brne	.+2      	; 0x4b14 <DIO_VidSetPinDirection+0x146>
    4b12:	40 c0       	rjmp	.+128    	; 0x4b94 <DIO_VidSetPinDirection+0x1c6>
    4b14:	53 c0       	rjmp	.+166    	; 0x4bbc <DIO_VidSetPinDirection+0x1ee>
		case 0:CLR_BIT(DDRA,loc_u8pin);break;
    4b16:	aa e3       	ldi	r26, 0x3A	; 58
    4b18:	b0 e0       	ldi	r27, 0x00	; 0
    4b1a:	ea e3       	ldi	r30, 0x3A	; 58
    4b1c:	f0 e0       	ldi	r31, 0x00	; 0
    4b1e:	80 81       	ld	r24, Z
    4b20:	48 2f       	mov	r20, r24
    4b22:	8a 81       	ldd	r24, Y+2	; 0x02
    4b24:	28 2f       	mov	r18, r24
    4b26:	30 e0       	ldi	r19, 0x00	; 0
    4b28:	81 e0       	ldi	r24, 0x01	; 1
    4b2a:	90 e0       	ldi	r25, 0x00	; 0
    4b2c:	02 2e       	mov	r0, r18
    4b2e:	02 c0       	rjmp	.+4      	; 0x4b34 <DIO_VidSetPinDirection+0x166>
    4b30:	88 0f       	add	r24, r24
    4b32:	99 1f       	adc	r25, r25
    4b34:	0a 94       	dec	r0
    4b36:	e2 f7       	brpl	.-8      	; 0x4b30 <DIO_VidSetPinDirection+0x162>
    4b38:	80 95       	com	r24
    4b3a:	84 23       	and	r24, r20
    4b3c:	8c 93       	st	X, r24
    4b3e:	3e c0       	rjmp	.+124    	; 0x4bbc <DIO_VidSetPinDirection+0x1ee>
		case 1:CLR_BIT(DDRB,loc_u8pin);break;
    4b40:	a7 e3       	ldi	r26, 0x37	; 55
    4b42:	b0 e0       	ldi	r27, 0x00	; 0
    4b44:	e7 e3       	ldi	r30, 0x37	; 55
    4b46:	f0 e0       	ldi	r31, 0x00	; 0
    4b48:	80 81       	ld	r24, Z
    4b4a:	48 2f       	mov	r20, r24
    4b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b4e:	28 2f       	mov	r18, r24
    4b50:	30 e0       	ldi	r19, 0x00	; 0
    4b52:	81 e0       	ldi	r24, 0x01	; 1
    4b54:	90 e0       	ldi	r25, 0x00	; 0
    4b56:	02 2e       	mov	r0, r18
    4b58:	02 c0       	rjmp	.+4      	; 0x4b5e <DIO_VidSetPinDirection+0x190>
    4b5a:	88 0f       	add	r24, r24
    4b5c:	99 1f       	adc	r25, r25
    4b5e:	0a 94       	dec	r0
    4b60:	e2 f7       	brpl	.-8      	; 0x4b5a <DIO_VidSetPinDirection+0x18c>
    4b62:	80 95       	com	r24
    4b64:	84 23       	and	r24, r20
    4b66:	8c 93       	st	X, r24
    4b68:	29 c0       	rjmp	.+82     	; 0x4bbc <DIO_VidSetPinDirection+0x1ee>
		case 2:CLR_BIT(DDRC,loc_u8pin);break;
    4b6a:	a4 e3       	ldi	r26, 0x34	; 52
    4b6c:	b0 e0       	ldi	r27, 0x00	; 0
    4b6e:	e4 e3       	ldi	r30, 0x34	; 52
    4b70:	f0 e0       	ldi	r31, 0x00	; 0
    4b72:	80 81       	ld	r24, Z
    4b74:	48 2f       	mov	r20, r24
    4b76:	8a 81       	ldd	r24, Y+2	; 0x02
    4b78:	28 2f       	mov	r18, r24
    4b7a:	30 e0       	ldi	r19, 0x00	; 0
    4b7c:	81 e0       	ldi	r24, 0x01	; 1
    4b7e:	90 e0       	ldi	r25, 0x00	; 0
    4b80:	02 2e       	mov	r0, r18
    4b82:	02 c0       	rjmp	.+4      	; 0x4b88 <DIO_VidSetPinDirection+0x1ba>
    4b84:	88 0f       	add	r24, r24
    4b86:	99 1f       	adc	r25, r25
    4b88:	0a 94       	dec	r0
    4b8a:	e2 f7       	brpl	.-8      	; 0x4b84 <DIO_VidSetPinDirection+0x1b6>
    4b8c:	80 95       	com	r24
    4b8e:	84 23       	and	r24, r20
    4b90:	8c 93       	st	X, r24
    4b92:	14 c0       	rjmp	.+40     	; 0x4bbc <DIO_VidSetPinDirection+0x1ee>
		case 3:CLR_BIT(DDRD,loc_u8pin);break;
    4b94:	a1 e3       	ldi	r26, 0x31	; 49
    4b96:	b0 e0       	ldi	r27, 0x00	; 0
    4b98:	e1 e3       	ldi	r30, 0x31	; 49
    4b9a:	f0 e0       	ldi	r31, 0x00	; 0
    4b9c:	80 81       	ld	r24, Z
    4b9e:	48 2f       	mov	r20, r24
    4ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ba2:	28 2f       	mov	r18, r24
    4ba4:	30 e0       	ldi	r19, 0x00	; 0
    4ba6:	81 e0       	ldi	r24, 0x01	; 1
    4ba8:	90 e0       	ldi	r25, 0x00	; 0
    4baa:	02 2e       	mov	r0, r18
    4bac:	02 c0       	rjmp	.+4      	; 0x4bb2 <DIO_VidSetPinDirection+0x1e4>
    4bae:	88 0f       	add	r24, r24
    4bb0:	99 1f       	adc	r25, r25
    4bb2:	0a 94       	dec	r0
    4bb4:	e2 f7       	brpl	.-8      	; 0x4bae <DIO_VidSetPinDirection+0x1e0>
    4bb6:	80 95       	com	r24
    4bb8:	84 23       	and	r24, r20
    4bba:	8c 93       	st	X, r24
	 }
	}
	
	
}
    4bbc:	27 96       	adiw	r28, 0x07	; 7
    4bbe:	0f b6       	in	r0, 0x3f	; 63
    4bc0:	f8 94       	cli
    4bc2:	de bf       	out	0x3e, r29	; 62
    4bc4:	0f be       	out	0x3f, r0	; 63
    4bc6:	cd bf       	out	0x3d, r28	; 61
    4bc8:	cf 91       	pop	r28
    4bca:	df 91       	pop	r29
    4bcc:	08 95       	ret

00004bce <DIO_VidSetPinValue>:
void DIO_VidSetPinValue(u8 loc_u8port,u8 loc_u8pin, u8 loc_u8value){
    4bce:	df 93       	push	r29
    4bd0:	cf 93       	push	r28
    4bd2:	cd b7       	in	r28, 0x3d	; 61
    4bd4:	de b7       	in	r29, 0x3e	; 62
    4bd6:	27 97       	sbiw	r28, 0x07	; 7
    4bd8:	0f b6       	in	r0, 0x3f	; 63
    4bda:	f8 94       	cli
    4bdc:	de bf       	out	0x3e, r29	; 62
    4bde:	0f be       	out	0x3f, r0	; 63
    4be0:	cd bf       	out	0x3d, r28	; 61
    4be2:	89 83       	std	Y+1, r24	; 0x01
    4be4:	6a 83       	std	Y+2, r22	; 0x02
    4be6:	4b 83       	std	Y+3, r20	; 0x03
	
	if(1==loc_u8value){
    4be8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bea:	81 30       	cpi	r24, 0x01	; 1
    4bec:	09 f0       	breq	.+2      	; 0x4bf0 <DIO_VidSetPinValue+0x22>
    4bee:	6f c0       	rjmp	.+222    	; 0x4cce <DIO_VidSetPinValue+0x100>
	    switch(loc_u8port){
    4bf0:	89 81       	ldd	r24, Y+1	; 0x01
    4bf2:	28 2f       	mov	r18, r24
    4bf4:	30 e0       	ldi	r19, 0x00	; 0
    4bf6:	3f 83       	std	Y+7, r19	; 0x07
    4bf8:	2e 83       	std	Y+6, r18	; 0x06
    4bfa:	8e 81       	ldd	r24, Y+6	; 0x06
    4bfc:	9f 81       	ldd	r25, Y+7	; 0x07
    4bfe:	81 30       	cpi	r24, 0x01	; 1
    4c00:	91 05       	cpc	r25, r1
    4c02:	49 f1       	breq	.+82     	; 0x4c56 <DIO_VidSetPinValue+0x88>
    4c04:	2e 81       	ldd	r18, Y+6	; 0x06
    4c06:	3f 81       	ldd	r19, Y+7	; 0x07
    4c08:	22 30       	cpi	r18, 0x02	; 2
    4c0a:	31 05       	cpc	r19, r1
    4c0c:	2c f4       	brge	.+10     	; 0x4c18 <DIO_VidSetPinValue+0x4a>
    4c0e:	8e 81       	ldd	r24, Y+6	; 0x06
    4c10:	9f 81       	ldd	r25, Y+7	; 0x07
    4c12:	00 97       	sbiw	r24, 0x00	; 0
    4c14:	61 f0       	breq	.+24     	; 0x4c2e <DIO_VidSetPinValue+0x60>
    4c16:	d2 c0       	rjmp	.+420    	; 0x4dbc <DIO_VidSetPinValue+0x1ee>
    4c18:	2e 81       	ldd	r18, Y+6	; 0x06
    4c1a:	3f 81       	ldd	r19, Y+7	; 0x07
    4c1c:	22 30       	cpi	r18, 0x02	; 2
    4c1e:	31 05       	cpc	r19, r1
    4c20:	71 f1       	breq	.+92     	; 0x4c7e <DIO_VidSetPinValue+0xb0>
    4c22:	8e 81       	ldd	r24, Y+6	; 0x06
    4c24:	9f 81       	ldd	r25, Y+7	; 0x07
    4c26:	83 30       	cpi	r24, 0x03	; 3
    4c28:	91 05       	cpc	r25, r1
    4c2a:	e9 f1       	breq	.+122    	; 0x4ca6 <DIO_VidSetPinValue+0xd8>
    4c2c:	c7 c0       	rjmp	.+398    	; 0x4dbc <DIO_VidSetPinValue+0x1ee>
		case 0:SET_BIT(PORTA,loc_u8pin);break;
    4c2e:	ab e3       	ldi	r26, 0x3B	; 59
    4c30:	b0 e0       	ldi	r27, 0x00	; 0
    4c32:	eb e3       	ldi	r30, 0x3B	; 59
    4c34:	f0 e0       	ldi	r31, 0x00	; 0
    4c36:	80 81       	ld	r24, Z
    4c38:	48 2f       	mov	r20, r24
    4c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c3c:	28 2f       	mov	r18, r24
    4c3e:	30 e0       	ldi	r19, 0x00	; 0
    4c40:	81 e0       	ldi	r24, 0x01	; 1
    4c42:	90 e0       	ldi	r25, 0x00	; 0
    4c44:	02 2e       	mov	r0, r18
    4c46:	02 c0       	rjmp	.+4      	; 0x4c4c <DIO_VidSetPinValue+0x7e>
    4c48:	88 0f       	add	r24, r24
    4c4a:	99 1f       	adc	r25, r25
    4c4c:	0a 94       	dec	r0
    4c4e:	e2 f7       	brpl	.-8      	; 0x4c48 <DIO_VidSetPinValue+0x7a>
    4c50:	84 2b       	or	r24, r20
    4c52:	8c 93       	st	X, r24
    4c54:	b3 c0       	rjmp	.+358    	; 0x4dbc <DIO_VidSetPinValue+0x1ee>
		case 1:SET_BIT(PORTB,loc_u8pin);break;
    4c56:	a8 e3       	ldi	r26, 0x38	; 56
    4c58:	b0 e0       	ldi	r27, 0x00	; 0
    4c5a:	e8 e3       	ldi	r30, 0x38	; 56
    4c5c:	f0 e0       	ldi	r31, 0x00	; 0
    4c5e:	80 81       	ld	r24, Z
    4c60:	48 2f       	mov	r20, r24
    4c62:	8a 81       	ldd	r24, Y+2	; 0x02
    4c64:	28 2f       	mov	r18, r24
    4c66:	30 e0       	ldi	r19, 0x00	; 0
    4c68:	81 e0       	ldi	r24, 0x01	; 1
    4c6a:	90 e0       	ldi	r25, 0x00	; 0
    4c6c:	02 2e       	mov	r0, r18
    4c6e:	02 c0       	rjmp	.+4      	; 0x4c74 <DIO_VidSetPinValue+0xa6>
    4c70:	88 0f       	add	r24, r24
    4c72:	99 1f       	adc	r25, r25
    4c74:	0a 94       	dec	r0
    4c76:	e2 f7       	brpl	.-8      	; 0x4c70 <DIO_VidSetPinValue+0xa2>
    4c78:	84 2b       	or	r24, r20
    4c7a:	8c 93       	st	X, r24
    4c7c:	9f c0       	rjmp	.+318    	; 0x4dbc <DIO_VidSetPinValue+0x1ee>
		case 2:SET_BIT(PORTC,loc_u8pin);break;
    4c7e:	a5 e3       	ldi	r26, 0x35	; 53
    4c80:	b0 e0       	ldi	r27, 0x00	; 0
    4c82:	e5 e3       	ldi	r30, 0x35	; 53
    4c84:	f0 e0       	ldi	r31, 0x00	; 0
    4c86:	80 81       	ld	r24, Z
    4c88:	48 2f       	mov	r20, r24
    4c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c8c:	28 2f       	mov	r18, r24
    4c8e:	30 e0       	ldi	r19, 0x00	; 0
    4c90:	81 e0       	ldi	r24, 0x01	; 1
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	02 2e       	mov	r0, r18
    4c96:	02 c0       	rjmp	.+4      	; 0x4c9c <DIO_VidSetPinValue+0xce>
    4c98:	88 0f       	add	r24, r24
    4c9a:	99 1f       	adc	r25, r25
    4c9c:	0a 94       	dec	r0
    4c9e:	e2 f7       	brpl	.-8      	; 0x4c98 <DIO_VidSetPinValue+0xca>
    4ca0:	84 2b       	or	r24, r20
    4ca2:	8c 93       	st	X, r24
    4ca4:	8b c0       	rjmp	.+278    	; 0x4dbc <DIO_VidSetPinValue+0x1ee>
		case 3:SET_BIT(PORTD,loc_u8pin);break;
    4ca6:	a2 e3       	ldi	r26, 0x32	; 50
    4ca8:	b0 e0       	ldi	r27, 0x00	; 0
    4caa:	e2 e3       	ldi	r30, 0x32	; 50
    4cac:	f0 e0       	ldi	r31, 0x00	; 0
    4cae:	80 81       	ld	r24, Z
    4cb0:	48 2f       	mov	r20, r24
    4cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    4cb4:	28 2f       	mov	r18, r24
    4cb6:	30 e0       	ldi	r19, 0x00	; 0
    4cb8:	81 e0       	ldi	r24, 0x01	; 1
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	02 2e       	mov	r0, r18
    4cbe:	02 c0       	rjmp	.+4      	; 0x4cc4 <DIO_VidSetPinValue+0xf6>
    4cc0:	88 0f       	add	r24, r24
    4cc2:	99 1f       	adc	r25, r25
    4cc4:	0a 94       	dec	r0
    4cc6:	e2 f7       	brpl	.-8      	; 0x4cc0 <DIO_VidSetPinValue+0xf2>
    4cc8:	84 2b       	or	r24, r20
    4cca:	8c 93       	st	X, r24
    4ccc:	77 c0       	rjmp	.+238    	; 0x4dbc <DIO_VidSetPinValue+0x1ee>
	 }
	}
	else if(0==loc_u8value){
    4cce:	8b 81       	ldd	r24, Y+3	; 0x03
    4cd0:	88 23       	and	r24, r24
    4cd2:	09 f0       	breq	.+2      	; 0x4cd6 <DIO_VidSetPinValue+0x108>
    4cd4:	73 c0       	rjmp	.+230    	; 0x4dbc <DIO_VidSetPinValue+0x1ee>
	    switch(loc_u8port){
    4cd6:	89 81       	ldd	r24, Y+1	; 0x01
    4cd8:	28 2f       	mov	r18, r24
    4cda:	30 e0       	ldi	r19, 0x00	; 0
    4cdc:	3d 83       	std	Y+5, r19	; 0x05
    4cde:	2c 83       	std	Y+4, r18	; 0x04
    4ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    4ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    4ce4:	81 30       	cpi	r24, 0x01	; 1
    4ce6:	91 05       	cpc	r25, r1
    4ce8:	59 f1       	breq	.+86     	; 0x4d40 <DIO_VidSetPinValue+0x172>
    4cea:	2c 81       	ldd	r18, Y+4	; 0x04
    4cec:	3d 81       	ldd	r19, Y+5	; 0x05
    4cee:	22 30       	cpi	r18, 0x02	; 2
    4cf0:	31 05       	cpc	r19, r1
    4cf2:	2c f4       	brge	.+10     	; 0x4cfe <DIO_VidSetPinValue+0x130>
    4cf4:	8c 81       	ldd	r24, Y+4	; 0x04
    4cf6:	9d 81       	ldd	r25, Y+5	; 0x05
    4cf8:	00 97       	sbiw	r24, 0x00	; 0
    4cfa:	69 f0       	breq	.+26     	; 0x4d16 <DIO_VidSetPinValue+0x148>
    4cfc:	5f c0       	rjmp	.+190    	; 0x4dbc <DIO_VidSetPinValue+0x1ee>
    4cfe:	2c 81       	ldd	r18, Y+4	; 0x04
    4d00:	3d 81       	ldd	r19, Y+5	; 0x05
    4d02:	22 30       	cpi	r18, 0x02	; 2
    4d04:	31 05       	cpc	r19, r1
    4d06:	89 f1       	breq	.+98     	; 0x4d6a <DIO_VidSetPinValue+0x19c>
    4d08:	8c 81       	ldd	r24, Y+4	; 0x04
    4d0a:	9d 81       	ldd	r25, Y+5	; 0x05
    4d0c:	83 30       	cpi	r24, 0x03	; 3
    4d0e:	91 05       	cpc	r25, r1
    4d10:	09 f4       	brne	.+2      	; 0x4d14 <DIO_VidSetPinValue+0x146>
    4d12:	40 c0       	rjmp	.+128    	; 0x4d94 <DIO_VidSetPinValue+0x1c6>
    4d14:	53 c0       	rjmp	.+166    	; 0x4dbc <DIO_VidSetPinValue+0x1ee>
		case 0:CLR_BIT(PORTA,loc_u8pin);break;
    4d16:	ab e3       	ldi	r26, 0x3B	; 59
    4d18:	b0 e0       	ldi	r27, 0x00	; 0
    4d1a:	eb e3       	ldi	r30, 0x3B	; 59
    4d1c:	f0 e0       	ldi	r31, 0x00	; 0
    4d1e:	80 81       	ld	r24, Z
    4d20:	48 2f       	mov	r20, r24
    4d22:	8a 81       	ldd	r24, Y+2	; 0x02
    4d24:	28 2f       	mov	r18, r24
    4d26:	30 e0       	ldi	r19, 0x00	; 0
    4d28:	81 e0       	ldi	r24, 0x01	; 1
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	02 2e       	mov	r0, r18
    4d2e:	02 c0       	rjmp	.+4      	; 0x4d34 <DIO_VidSetPinValue+0x166>
    4d30:	88 0f       	add	r24, r24
    4d32:	99 1f       	adc	r25, r25
    4d34:	0a 94       	dec	r0
    4d36:	e2 f7       	brpl	.-8      	; 0x4d30 <DIO_VidSetPinValue+0x162>
    4d38:	80 95       	com	r24
    4d3a:	84 23       	and	r24, r20
    4d3c:	8c 93       	st	X, r24
    4d3e:	3e c0       	rjmp	.+124    	; 0x4dbc <DIO_VidSetPinValue+0x1ee>
		case 1:CLR_BIT(PORTB,loc_u8pin);break;
    4d40:	a8 e3       	ldi	r26, 0x38	; 56
    4d42:	b0 e0       	ldi	r27, 0x00	; 0
    4d44:	e8 e3       	ldi	r30, 0x38	; 56
    4d46:	f0 e0       	ldi	r31, 0x00	; 0
    4d48:	80 81       	ld	r24, Z
    4d4a:	48 2f       	mov	r20, r24
    4d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d4e:	28 2f       	mov	r18, r24
    4d50:	30 e0       	ldi	r19, 0x00	; 0
    4d52:	81 e0       	ldi	r24, 0x01	; 1
    4d54:	90 e0       	ldi	r25, 0x00	; 0
    4d56:	02 2e       	mov	r0, r18
    4d58:	02 c0       	rjmp	.+4      	; 0x4d5e <DIO_VidSetPinValue+0x190>
    4d5a:	88 0f       	add	r24, r24
    4d5c:	99 1f       	adc	r25, r25
    4d5e:	0a 94       	dec	r0
    4d60:	e2 f7       	brpl	.-8      	; 0x4d5a <DIO_VidSetPinValue+0x18c>
    4d62:	80 95       	com	r24
    4d64:	84 23       	and	r24, r20
    4d66:	8c 93       	st	X, r24
    4d68:	29 c0       	rjmp	.+82     	; 0x4dbc <DIO_VidSetPinValue+0x1ee>
		case 2:CLR_BIT(PORTC,loc_u8pin);break;
    4d6a:	a5 e3       	ldi	r26, 0x35	; 53
    4d6c:	b0 e0       	ldi	r27, 0x00	; 0
    4d6e:	e5 e3       	ldi	r30, 0x35	; 53
    4d70:	f0 e0       	ldi	r31, 0x00	; 0
    4d72:	80 81       	ld	r24, Z
    4d74:	48 2f       	mov	r20, r24
    4d76:	8a 81       	ldd	r24, Y+2	; 0x02
    4d78:	28 2f       	mov	r18, r24
    4d7a:	30 e0       	ldi	r19, 0x00	; 0
    4d7c:	81 e0       	ldi	r24, 0x01	; 1
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	02 2e       	mov	r0, r18
    4d82:	02 c0       	rjmp	.+4      	; 0x4d88 <DIO_VidSetPinValue+0x1ba>
    4d84:	88 0f       	add	r24, r24
    4d86:	99 1f       	adc	r25, r25
    4d88:	0a 94       	dec	r0
    4d8a:	e2 f7       	brpl	.-8      	; 0x4d84 <DIO_VidSetPinValue+0x1b6>
    4d8c:	80 95       	com	r24
    4d8e:	84 23       	and	r24, r20
    4d90:	8c 93       	st	X, r24
    4d92:	14 c0       	rjmp	.+40     	; 0x4dbc <DIO_VidSetPinValue+0x1ee>
		case 3:CLR_BIT(PORTD,loc_u8pin);break;
    4d94:	a2 e3       	ldi	r26, 0x32	; 50
    4d96:	b0 e0       	ldi	r27, 0x00	; 0
    4d98:	e2 e3       	ldi	r30, 0x32	; 50
    4d9a:	f0 e0       	ldi	r31, 0x00	; 0
    4d9c:	80 81       	ld	r24, Z
    4d9e:	48 2f       	mov	r20, r24
    4da0:	8a 81       	ldd	r24, Y+2	; 0x02
    4da2:	28 2f       	mov	r18, r24
    4da4:	30 e0       	ldi	r19, 0x00	; 0
    4da6:	81 e0       	ldi	r24, 0x01	; 1
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	02 2e       	mov	r0, r18
    4dac:	02 c0       	rjmp	.+4      	; 0x4db2 <DIO_VidSetPinValue+0x1e4>
    4dae:	88 0f       	add	r24, r24
    4db0:	99 1f       	adc	r25, r25
    4db2:	0a 94       	dec	r0
    4db4:	e2 f7       	brpl	.-8      	; 0x4dae <DIO_VidSetPinValue+0x1e0>
    4db6:	80 95       	com	r24
    4db8:	84 23       	and	r24, r20
    4dba:	8c 93       	st	X, r24
	 }
	}
}
    4dbc:	27 96       	adiw	r28, 0x07	; 7
    4dbe:	0f b6       	in	r0, 0x3f	; 63
    4dc0:	f8 94       	cli
    4dc2:	de bf       	out	0x3e, r29	; 62
    4dc4:	0f be       	out	0x3f, r0	; 63
    4dc6:	cd bf       	out	0x3d, r28	; 61
    4dc8:	cf 91       	pop	r28
    4dca:	df 91       	pop	r29
    4dcc:	08 95       	ret

00004dce <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection(u8 loc_u8port,u8 loc_u8value){
    4dce:	df 93       	push	r29
    4dd0:	cf 93       	push	r28
    4dd2:	00 d0       	rcall	.+0      	; 0x4dd4 <DIO_VidSetPortDirection+0x6>
    4dd4:	00 d0       	rcall	.+0      	; 0x4dd6 <DIO_VidSetPortDirection+0x8>
    4dd6:	cd b7       	in	r28, 0x3d	; 61
    4dd8:	de b7       	in	r29, 0x3e	; 62
    4dda:	89 83       	std	Y+1, r24	; 0x01
    4ddc:	6a 83       	std	Y+2, r22	; 0x02
	

			switch(loc_u8port){
    4dde:	89 81       	ldd	r24, Y+1	; 0x01
    4de0:	28 2f       	mov	r18, r24
    4de2:	30 e0       	ldi	r19, 0x00	; 0
    4de4:	3c 83       	std	Y+4, r19	; 0x04
    4de6:	2b 83       	std	Y+3, r18	; 0x03
    4de8:	8b 81       	ldd	r24, Y+3	; 0x03
    4dea:	9c 81       	ldd	r25, Y+4	; 0x04
    4dec:	81 30       	cpi	r24, 0x01	; 1
    4dee:	91 05       	cpc	r25, r1
    4df0:	d1 f0       	breq	.+52     	; 0x4e26 <DIO_VidSetPortDirection+0x58>
    4df2:	2b 81       	ldd	r18, Y+3	; 0x03
    4df4:	3c 81       	ldd	r19, Y+4	; 0x04
    4df6:	22 30       	cpi	r18, 0x02	; 2
    4df8:	31 05       	cpc	r19, r1
    4dfa:	2c f4       	brge	.+10     	; 0x4e06 <DIO_VidSetPortDirection+0x38>
    4dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    4dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    4e00:	00 97       	sbiw	r24, 0x00	; 0
    4e02:	61 f0       	breq	.+24     	; 0x4e1c <DIO_VidSetPortDirection+0x4e>
    4e04:	1e c0       	rjmp	.+60     	; 0x4e42 <DIO_VidSetPortDirection+0x74>
    4e06:	2b 81       	ldd	r18, Y+3	; 0x03
    4e08:	3c 81       	ldd	r19, Y+4	; 0x04
    4e0a:	22 30       	cpi	r18, 0x02	; 2
    4e0c:	31 05       	cpc	r19, r1
    4e0e:	81 f0       	breq	.+32     	; 0x4e30 <DIO_VidSetPortDirection+0x62>
    4e10:	8b 81       	ldd	r24, Y+3	; 0x03
    4e12:	9c 81       	ldd	r25, Y+4	; 0x04
    4e14:	83 30       	cpi	r24, 0x03	; 3
    4e16:	91 05       	cpc	r25, r1
    4e18:	81 f0       	breq	.+32     	; 0x4e3a <DIO_VidSetPortDirection+0x6c>
    4e1a:	13 c0       	rjmp	.+38     	; 0x4e42 <DIO_VidSetPortDirection+0x74>

			case 0:DDRA=loc_u8value;break;
    4e1c:	ea e3       	ldi	r30, 0x3A	; 58
    4e1e:	f0 e0       	ldi	r31, 0x00	; 0
    4e20:	8a 81       	ldd	r24, Y+2	; 0x02
    4e22:	80 83       	st	Z, r24
    4e24:	0e c0       	rjmp	.+28     	; 0x4e42 <DIO_VidSetPortDirection+0x74>
			case 1:DDRB=loc_u8value;break;
    4e26:	e7 e3       	ldi	r30, 0x37	; 55
    4e28:	f0 e0       	ldi	r31, 0x00	; 0
    4e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e2c:	80 83       	st	Z, r24
    4e2e:	09 c0       	rjmp	.+18     	; 0x4e42 <DIO_VidSetPortDirection+0x74>
			case 2:DDRC=loc_u8value;break;
    4e30:	e4 e3       	ldi	r30, 0x34	; 52
    4e32:	f0 e0       	ldi	r31, 0x00	; 0
    4e34:	8a 81       	ldd	r24, Y+2	; 0x02
    4e36:	80 83       	st	Z, r24
    4e38:	04 c0       	rjmp	.+8      	; 0x4e42 <DIO_VidSetPortDirection+0x74>
			case 3:DDRD=loc_u8value;break;
    4e3a:	e1 e3       	ldi	r30, 0x31	; 49
    4e3c:	f0 e0       	ldi	r31, 0x00	; 0
    4e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e40:	80 83       	st	Z, r24

			}
		
}
    4e42:	0f 90       	pop	r0
    4e44:	0f 90       	pop	r0
    4e46:	0f 90       	pop	r0
    4e48:	0f 90       	pop	r0
    4e4a:	cf 91       	pop	r28
    4e4c:	df 91       	pop	r29
    4e4e:	08 95       	ret

00004e50 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue(u8 loc_u8port,u8 loc_u8value){
    4e50:	df 93       	push	r29
    4e52:	cf 93       	push	r28
    4e54:	00 d0       	rcall	.+0      	; 0x4e56 <DIO_VidSetPortValue+0x6>
    4e56:	00 d0       	rcall	.+0      	; 0x4e58 <DIO_VidSetPortValue+0x8>
    4e58:	cd b7       	in	r28, 0x3d	; 61
    4e5a:	de b7       	in	r29, 0x3e	; 62
    4e5c:	89 83       	std	Y+1, r24	; 0x01
    4e5e:	6a 83       	std	Y+2, r22	; 0x02
	
			switch(loc_u8port){
    4e60:	89 81       	ldd	r24, Y+1	; 0x01
    4e62:	28 2f       	mov	r18, r24
    4e64:	30 e0       	ldi	r19, 0x00	; 0
    4e66:	3c 83       	std	Y+4, r19	; 0x04
    4e68:	2b 83       	std	Y+3, r18	; 0x03
    4e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    4e6e:	81 30       	cpi	r24, 0x01	; 1
    4e70:	91 05       	cpc	r25, r1
    4e72:	d1 f0       	breq	.+52     	; 0x4ea8 <DIO_VidSetPortValue+0x58>
    4e74:	2b 81       	ldd	r18, Y+3	; 0x03
    4e76:	3c 81       	ldd	r19, Y+4	; 0x04
    4e78:	22 30       	cpi	r18, 0x02	; 2
    4e7a:	31 05       	cpc	r19, r1
    4e7c:	2c f4       	brge	.+10     	; 0x4e88 <DIO_VidSetPortValue+0x38>
    4e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e80:	9c 81       	ldd	r25, Y+4	; 0x04
    4e82:	00 97       	sbiw	r24, 0x00	; 0
    4e84:	61 f0       	breq	.+24     	; 0x4e9e <DIO_VidSetPortValue+0x4e>
    4e86:	1e c0       	rjmp	.+60     	; 0x4ec4 <DIO_VidSetPortValue+0x74>
    4e88:	2b 81       	ldd	r18, Y+3	; 0x03
    4e8a:	3c 81       	ldd	r19, Y+4	; 0x04
    4e8c:	22 30       	cpi	r18, 0x02	; 2
    4e8e:	31 05       	cpc	r19, r1
    4e90:	81 f0       	breq	.+32     	; 0x4eb2 <DIO_VidSetPortValue+0x62>
    4e92:	8b 81       	ldd	r24, Y+3	; 0x03
    4e94:	9c 81       	ldd	r25, Y+4	; 0x04
    4e96:	83 30       	cpi	r24, 0x03	; 3
    4e98:	91 05       	cpc	r25, r1
    4e9a:	81 f0       	breq	.+32     	; 0x4ebc <DIO_VidSetPortValue+0x6c>
    4e9c:	13 c0       	rjmp	.+38     	; 0x4ec4 <DIO_VidSetPortValue+0x74>

			case 0:PORTA=loc_u8value;break;
    4e9e:	eb e3       	ldi	r30, 0x3B	; 59
    4ea0:	f0 e0       	ldi	r31, 0x00	; 0
    4ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ea4:	80 83       	st	Z, r24
    4ea6:	0e c0       	rjmp	.+28     	; 0x4ec4 <DIO_VidSetPortValue+0x74>
			case 1:PORTB=loc_u8value;break;
    4ea8:	e8 e3       	ldi	r30, 0x38	; 56
    4eaa:	f0 e0       	ldi	r31, 0x00	; 0
    4eac:	8a 81       	ldd	r24, Y+2	; 0x02
    4eae:	80 83       	st	Z, r24
    4eb0:	09 c0       	rjmp	.+18     	; 0x4ec4 <DIO_VidSetPortValue+0x74>
			case 2:PORTC=loc_u8value;break;
    4eb2:	e5 e3       	ldi	r30, 0x35	; 53
    4eb4:	f0 e0       	ldi	r31, 0x00	; 0
    4eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb8:	80 83       	st	Z, r24
    4eba:	04 c0       	rjmp	.+8      	; 0x4ec4 <DIO_VidSetPortValue+0x74>
			case 3:PORTD=loc_u8value;break;
    4ebc:	e2 e3       	ldi	r30, 0x32	; 50
    4ebe:	f0 e0       	ldi	r31, 0x00	; 0
    4ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec2:	80 83       	st	Z, r24

			}
	
}
    4ec4:	0f 90       	pop	r0
    4ec6:	0f 90       	pop	r0
    4ec8:	0f 90       	pop	r0
    4eca:	0f 90       	pop	r0
    4ecc:	cf 91       	pop	r28
    4ece:	df 91       	pop	r29
    4ed0:	08 95       	ret

00004ed2 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 loc_u8port,u8 loc_u8pin){
    4ed2:	df 93       	push	r29
    4ed4:	cf 93       	push	r28
    4ed6:	00 d0       	rcall	.+0      	; 0x4ed8 <DIO_u8GetPinValue+0x6>
    4ed8:	00 d0       	rcall	.+0      	; 0x4eda <DIO_u8GetPinValue+0x8>
    4eda:	0f 92       	push	r0
    4edc:	cd b7       	in	r28, 0x3d	; 61
    4ede:	de b7       	in	r29, 0x3e	; 62
    4ee0:	8a 83       	std	Y+2, r24	; 0x02
    4ee2:	6b 83       	std	Y+3, r22	; 0x03
	u8 VALUE;
	switch(loc_u8port){
    4ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ee6:	28 2f       	mov	r18, r24
    4ee8:	30 e0       	ldi	r19, 0x00	; 0
    4eea:	3d 83       	std	Y+5, r19	; 0x05
    4eec:	2c 83       	std	Y+4, r18	; 0x04
    4eee:	4c 81       	ldd	r20, Y+4	; 0x04
    4ef0:	5d 81       	ldd	r21, Y+5	; 0x05
    4ef2:	41 30       	cpi	r20, 0x01	; 1
    4ef4:	51 05       	cpc	r21, r1
    4ef6:	41 f1       	breq	.+80     	; 0x4f48 <DIO_u8GetPinValue+0x76>
    4ef8:	8c 81       	ldd	r24, Y+4	; 0x04
    4efa:	9d 81       	ldd	r25, Y+5	; 0x05
    4efc:	82 30       	cpi	r24, 0x02	; 2
    4efe:	91 05       	cpc	r25, r1
    4f00:	34 f4       	brge	.+12     	; 0x4f0e <DIO_u8GetPinValue+0x3c>
    4f02:	2c 81       	ldd	r18, Y+4	; 0x04
    4f04:	3d 81       	ldd	r19, Y+5	; 0x05
    4f06:	21 15       	cp	r18, r1
    4f08:	31 05       	cpc	r19, r1
    4f0a:	61 f0       	breq	.+24     	; 0x4f24 <DIO_u8GetPinValue+0x52>
    4f0c:	52 c0       	rjmp	.+164    	; 0x4fb2 <DIO_u8GetPinValue+0xe0>
    4f0e:	4c 81       	ldd	r20, Y+4	; 0x04
    4f10:	5d 81       	ldd	r21, Y+5	; 0x05
    4f12:	42 30       	cpi	r20, 0x02	; 2
    4f14:	51 05       	cpc	r21, r1
    4f16:	51 f1       	breq	.+84     	; 0x4f6c <DIO_u8GetPinValue+0x9a>
    4f18:	8c 81       	ldd	r24, Y+4	; 0x04
    4f1a:	9d 81       	ldd	r25, Y+5	; 0x05
    4f1c:	83 30       	cpi	r24, 0x03	; 3
    4f1e:	91 05       	cpc	r25, r1
    4f20:	b9 f1       	breq	.+110    	; 0x4f90 <DIO_u8GetPinValue+0xbe>
    4f22:	47 c0       	rjmp	.+142    	; 0x4fb2 <DIO_u8GetPinValue+0xe0>
		case 0:VALUE=GET_BIT(PINA,loc_u8pin); break;
    4f24:	e9 e3       	ldi	r30, 0x39	; 57
    4f26:	f0 e0       	ldi	r31, 0x00	; 0
    4f28:	80 81       	ld	r24, Z
    4f2a:	28 2f       	mov	r18, r24
    4f2c:	30 e0       	ldi	r19, 0x00	; 0
    4f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f30:	88 2f       	mov	r24, r24
    4f32:	90 e0       	ldi	r25, 0x00	; 0
    4f34:	a9 01       	movw	r20, r18
    4f36:	02 c0       	rjmp	.+4      	; 0x4f3c <DIO_u8GetPinValue+0x6a>
    4f38:	55 95       	asr	r21
    4f3a:	47 95       	ror	r20
    4f3c:	8a 95       	dec	r24
    4f3e:	e2 f7       	brpl	.-8      	; 0x4f38 <DIO_u8GetPinValue+0x66>
    4f40:	ca 01       	movw	r24, r20
    4f42:	81 70       	andi	r24, 0x01	; 1
    4f44:	89 83       	std	Y+1, r24	; 0x01
    4f46:	35 c0       	rjmp	.+106    	; 0x4fb2 <DIO_u8GetPinValue+0xe0>
		case 1:VALUE=GET_BIT(PINB,loc_u8pin); break;
    4f48:	e6 e3       	ldi	r30, 0x36	; 54
    4f4a:	f0 e0       	ldi	r31, 0x00	; 0
    4f4c:	80 81       	ld	r24, Z
    4f4e:	28 2f       	mov	r18, r24
    4f50:	30 e0       	ldi	r19, 0x00	; 0
    4f52:	8b 81       	ldd	r24, Y+3	; 0x03
    4f54:	88 2f       	mov	r24, r24
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	a9 01       	movw	r20, r18
    4f5a:	02 c0       	rjmp	.+4      	; 0x4f60 <DIO_u8GetPinValue+0x8e>
    4f5c:	55 95       	asr	r21
    4f5e:	47 95       	ror	r20
    4f60:	8a 95       	dec	r24
    4f62:	e2 f7       	brpl	.-8      	; 0x4f5c <DIO_u8GetPinValue+0x8a>
    4f64:	ca 01       	movw	r24, r20
    4f66:	81 70       	andi	r24, 0x01	; 1
    4f68:	89 83       	std	Y+1, r24	; 0x01
    4f6a:	23 c0       	rjmp	.+70     	; 0x4fb2 <DIO_u8GetPinValue+0xe0>
		case 2:VALUE=GET_BIT(PINC,loc_u8pin); break;
    4f6c:	e3 e3       	ldi	r30, 0x33	; 51
    4f6e:	f0 e0       	ldi	r31, 0x00	; 0
    4f70:	80 81       	ld	r24, Z
    4f72:	28 2f       	mov	r18, r24
    4f74:	30 e0       	ldi	r19, 0x00	; 0
    4f76:	8b 81       	ldd	r24, Y+3	; 0x03
    4f78:	88 2f       	mov	r24, r24
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	a9 01       	movw	r20, r18
    4f7e:	02 c0       	rjmp	.+4      	; 0x4f84 <DIO_u8GetPinValue+0xb2>
    4f80:	55 95       	asr	r21
    4f82:	47 95       	ror	r20
    4f84:	8a 95       	dec	r24
    4f86:	e2 f7       	brpl	.-8      	; 0x4f80 <DIO_u8GetPinValue+0xae>
    4f88:	ca 01       	movw	r24, r20
    4f8a:	81 70       	andi	r24, 0x01	; 1
    4f8c:	89 83       	std	Y+1, r24	; 0x01
    4f8e:	11 c0       	rjmp	.+34     	; 0x4fb2 <DIO_u8GetPinValue+0xe0>
		case 3:VALUE=GET_BIT(PIND,loc_u8pin); break;
    4f90:	e0 e3       	ldi	r30, 0x30	; 48
    4f92:	f0 e0       	ldi	r31, 0x00	; 0
    4f94:	80 81       	ld	r24, Z
    4f96:	28 2f       	mov	r18, r24
    4f98:	30 e0       	ldi	r19, 0x00	; 0
    4f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f9c:	88 2f       	mov	r24, r24
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	a9 01       	movw	r20, r18
    4fa2:	02 c0       	rjmp	.+4      	; 0x4fa8 <DIO_u8GetPinValue+0xd6>
    4fa4:	55 95       	asr	r21
    4fa6:	47 95       	ror	r20
    4fa8:	8a 95       	dec	r24
    4faa:	e2 f7       	brpl	.-8      	; 0x4fa4 <DIO_u8GetPinValue+0xd2>
    4fac:	ca 01       	movw	r24, r20
    4fae:	81 70       	andi	r24, 0x01	; 1
    4fb0:	89 83       	std	Y+1, r24	; 0x01
	 }
	 return VALUE;
    4fb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    4fb4:	0f 90       	pop	r0
    4fb6:	0f 90       	pop	r0
    4fb8:	0f 90       	pop	r0
    4fba:	0f 90       	pop	r0
    4fbc:	0f 90       	pop	r0
    4fbe:	cf 91       	pop	r28
    4fc0:	df 91       	pop	r29
    4fc2:	08 95       	ret

00004fc4 <DIO_VidTogBit>:

void DIO_VidTogBit(u8 loc_u8port,u8 LOC_u8BitNum){
    4fc4:	df 93       	push	r29
    4fc6:	cf 93       	push	r28
    4fc8:	00 d0       	rcall	.+0      	; 0x4fca <DIO_VidTogBit+0x6>
    4fca:	00 d0       	rcall	.+0      	; 0x4fcc <DIO_VidTogBit+0x8>
    4fcc:	cd b7       	in	r28, 0x3d	; 61
    4fce:	de b7       	in	r29, 0x3e	; 62
    4fd0:	89 83       	std	Y+1, r24	; 0x01
    4fd2:	6a 83       	std	Y+2, r22	; 0x02
	switch(loc_u8port){
    4fd4:	89 81       	ldd	r24, Y+1	; 0x01
    4fd6:	28 2f       	mov	r18, r24
    4fd8:	30 e0       	ldi	r19, 0x00	; 0
    4fda:	3c 83       	std	Y+4, r19	; 0x04
    4fdc:	2b 83       	std	Y+3, r18	; 0x03
    4fde:	8b 81       	ldd	r24, Y+3	; 0x03
    4fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    4fe2:	81 30       	cpi	r24, 0x01	; 1
    4fe4:	91 05       	cpc	r25, r1
    4fe6:	49 f1       	breq	.+82     	; 0x503a <DIO_VidTogBit+0x76>
    4fe8:	2b 81       	ldd	r18, Y+3	; 0x03
    4fea:	3c 81       	ldd	r19, Y+4	; 0x04
    4fec:	22 30       	cpi	r18, 0x02	; 2
    4fee:	31 05       	cpc	r19, r1
    4ff0:	2c f4       	brge	.+10     	; 0x4ffc <DIO_VidTogBit+0x38>
    4ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ff6:	00 97       	sbiw	r24, 0x00	; 0
    4ff8:	61 f0       	breq	.+24     	; 0x5012 <DIO_VidTogBit+0x4e>
    4ffa:	5a c0       	rjmp	.+180    	; 0x50b0 <DIO_VidTogBit+0xec>
    4ffc:	2b 81       	ldd	r18, Y+3	; 0x03
    4ffe:	3c 81       	ldd	r19, Y+4	; 0x04
    5000:	22 30       	cpi	r18, 0x02	; 2
    5002:	31 05       	cpc	r19, r1
    5004:	71 f1       	breq	.+92     	; 0x5062 <DIO_VidTogBit+0x9e>
    5006:	8b 81       	ldd	r24, Y+3	; 0x03
    5008:	9c 81       	ldd	r25, Y+4	; 0x04
    500a:	83 30       	cpi	r24, 0x03	; 3
    500c:	91 05       	cpc	r25, r1
    500e:	e9 f1       	breq	.+122    	; 0x508a <DIO_VidTogBit+0xc6>
    5010:	4f c0       	rjmp	.+158    	; 0x50b0 <DIO_VidTogBit+0xec>
		case 0: TOG_BIT(PORTA,LOC_u8BitNum); break;
    5012:	ab e3       	ldi	r26, 0x3B	; 59
    5014:	b0 e0       	ldi	r27, 0x00	; 0
    5016:	eb e3       	ldi	r30, 0x3B	; 59
    5018:	f0 e0       	ldi	r31, 0x00	; 0
    501a:	80 81       	ld	r24, Z
    501c:	48 2f       	mov	r20, r24
    501e:	8a 81       	ldd	r24, Y+2	; 0x02
    5020:	28 2f       	mov	r18, r24
    5022:	30 e0       	ldi	r19, 0x00	; 0
    5024:	81 e0       	ldi	r24, 0x01	; 1
    5026:	90 e0       	ldi	r25, 0x00	; 0
    5028:	02 2e       	mov	r0, r18
    502a:	02 c0       	rjmp	.+4      	; 0x5030 <DIO_VidTogBit+0x6c>
    502c:	88 0f       	add	r24, r24
    502e:	99 1f       	adc	r25, r25
    5030:	0a 94       	dec	r0
    5032:	e2 f7       	brpl	.-8      	; 0x502c <DIO_VidTogBit+0x68>
    5034:	84 27       	eor	r24, r20
    5036:	8c 93       	st	X, r24
    5038:	3b c0       	rjmp	.+118    	; 0x50b0 <DIO_VidTogBit+0xec>
		case 1: TOG_BIT(PORTB,LOC_u8BitNum); break;
    503a:	a8 e3       	ldi	r26, 0x38	; 56
    503c:	b0 e0       	ldi	r27, 0x00	; 0
    503e:	e8 e3       	ldi	r30, 0x38	; 56
    5040:	f0 e0       	ldi	r31, 0x00	; 0
    5042:	80 81       	ld	r24, Z
    5044:	48 2f       	mov	r20, r24
    5046:	8a 81       	ldd	r24, Y+2	; 0x02
    5048:	28 2f       	mov	r18, r24
    504a:	30 e0       	ldi	r19, 0x00	; 0
    504c:	81 e0       	ldi	r24, 0x01	; 1
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	02 2e       	mov	r0, r18
    5052:	02 c0       	rjmp	.+4      	; 0x5058 <DIO_VidTogBit+0x94>
    5054:	88 0f       	add	r24, r24
    5056:	99 1f       	adc	r25, r25
    5058:	0a 94       	dec	r0
    505a:	e2 f7       	brpl	.-8      	; 0x5054 <DIO_VidTogBit+0x90>
    505c:	84 27       	eor	r24, r20
    505e:	8c 93       	st	X, r24
    5060:	27 c0       	rjmp	.+78     	; 0x50b0 <DIO_VidTogBit+0xec>
		case 2: TOG_BIT(PORTC,LOC_u8BitNum); break;
    5062:	a5 e3       	ldi	r26, 0x35	; 53
    5064:	b0 e0       	ldi	r27, 0x00	; 0
    5066:	e5 e3       	ldi	r30, 0x35	; 53
    5068:	f0 e0       	ldi	r31, 0x00	; 0
    506a:	80 81       	ld	r24, Z
    506c:	48 2f       	mov	r20, r24
    506e:	8a 81       	ldd	r24, Y+2	; 0x02
    5070:	28 2f       	mov	r18, r24
    5072:	30 e0       	ldi	r19, 0x00	; 0
    5074:	81 e0       	ldi	r24, 0x01	; 1
    5076:	90 e0       	ldi	r25, 0x00	; 0
    5078:	02 2e       	mov	r0, r18
    507a:	02 c0       	rjmp	.+4      	; 0x5080 <DIO_VidTogBit+0xbc>
    507c:	88 0f       	add	r24, r24
    507e:	99 1f       	adc	r25, r25
    5080:	0a 94       	dec	r0
    5082:	e2 f7       	brpl	.-8      	; 0x507c <DIO_VidTogBit+0xb8>
    5084:	84 27       	eor	r24, r20
    5086:	8c 93       	st	X, r24
    5088:	13 c0       	rjmp	.+38     	; 0x50b0 <DIO_VidTogBit+0xec>
		case 3: TOG_BIT(PORTD,LOC_u8BitNum); break;
    508a:	a2 e3       	ldi	r26, 0x32	; 50
    508c:	b0 e0       	ldi	r27, 0x00	; 0
    508e:	e2 e3       	ldi	r30, 0x32	; 50
    5090:	f0 e0       	ldi	r31, 0x00	; 0
    5092:	80 81       	ld	r24, Z
    5094:	48 2f       	mov	r20, r24
    5096:	8a 81       	ldd	r24, Y+2	; 0x02
    5098:	28 2f       	mov	r18, r24
    509a:	30 e0       	ldi	r19, 0x00	; 0
    509c:	81 e0       	ldi	r24, 0x01	; 1
    509e:	90 e0       	ldi	r25, 0x00	; 0
    50a0:	02 2e       	mov	r0, r18
    50a2:	02 c0       	rjmp	.+4      	; 0x50a8 <DIO_VidTogBit+0xe4>
    50a4:	88 0f       	add	r24, r24
    50a6:	99 1f       	adc	r25, r25
    50a8:	0a 94       	dec	r0
    50aa:	e2 f7       	brpl	.-8      	; 0x50a4 <DIO_VidTogBit+0xe0>
    50ac:	84 27       	eor	r24, r20
    50ae:	8c 93       	st	X, r24
	}	
}
    50b0:	0f 90       	pop	r0
    50b2:	0f 90       	pop	r0
    50b4:	0f 90       	pop	r0
    50b6:	0f 90       	pop	r0
    50b8:	cf 91       	pop	r28
    50ba:	df 91       	pop	r29
    50bc:	08 95       	ret

000050be <LCD_VoidDisplayTheMainScreen>:




void LCD_VoidDisplayTheMainScreen(void)
{
    50be:	df 93       	push	r29
    50c0:	cf 93       	push	r28
    50c2:	cd b7       	in	r28, 0x3d	; 61
    50c4:	de b7       	in	r29, 0x3e	; 62


	LCD_VidWriteCommand(CLR);
    50c6:	81 e0       	ldi	r24, 0x01	; 1
    50c8:	0e 94 35 2c 	call	0x586a	; 0x586a <LCD_VidWriteCommand>
	LCD_VidWriteString("C:");//DATA=3
    50cc:	8d e7       	ldi	r24, 0x7D	; 125
    50ce:	90 e0       	ldi	r25, 0x00	; 0
    50d0:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <LCD_VidWriteString>
	LCD_VidSetDdram(1,7);
    50d4:	81 e0       	ldi	r24, 0x01	; 1
    50d6:	67 e0       	ldi	r22, 0x07	; 7
    50d8:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <LCD_VidSetDdram>
	LCD_VidWriteString("T:");//Data=9
    50dc:	80 e8       	ldi	r24, 0x80	; 128
    50de:	90 e0       	ldi	r25, 0x00	; 0
    50e0:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <LCD_VidWriteString>
	LCD_VidWriteNumber(AlarmingSystem.Threshold);
    50e4:	80 91 88 07 	lds	r24, 0x0788
    50e8:	88 2f       	mov	r24, r24
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	a0 e0       	ldi	r26, 0x00	; 0
    50ee:	b0 e0       	ldi	r27, 0x00	; 0
    50f0:	bc 01       	movw	r22, r24
    50f2:	cd 01       	movw	r24, r26
    50f4:	0e 94 93 2c 	call	0x5926	; 0x5926 <LCD_VidWriteNumber>
	LCD_VidSetDdram(1,12);
    50f8:	81 e0       	ldi	r24, 0x01	; 1
    50fa:	6c e0       	ldi	r22, 0x0C	; 12
    50fc:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <LCD_VidSetDdram>
	LCD_VidWriteString("AS:");//DATA=15
    5100:	83 e8       	ldi	r24, 0x83	; 131
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <LCD_VidWriteString>
	LCD_VidWriteData(AlarmingSystem.AlarmingStatus);
    5108:	80 91 89 07 	lds	r24, 0x0789
    510c:	0e 94 4f 2c 	call	0x589e	; 0x589e <LCD_VidWriteData>

	LCD_VidSetDdram(2,1);
    5110:	82 e0       	ldi	r24, 0x02	; 2
    5112:	61 e0       	ldi	r22, 0x01	; 1
    5114:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <LCD_VidSetDdram>
	LCD_VidWriteString("TC:C");//DATA=4
    5118:	87 e8       	ldi	r24, 0x87	; 135
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <LCD_VidWriteString>

	LCD_VidSetDdram(2,8);
    5120:	82 e0       	ldi	r24, 0x02	; 2
    5122:	68 e0       	ldi	r22, 0x08	; 8
    5124:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <LCD_VidSetDdram>
	LCD_VidWriteString("AST:T");//DATA=12
    5128:	8c e8       	ldi	r24, 0x8C	; 140
    512a:	90 e0       	ldi	r25, 0x00	; 0
    512c:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <LCD_VidWriteString>





}
    5130:	cf 91       	pop	r28
    5132:	df 91       	pop	r29
    5134:	08 95       	ret

00005136 <LCD_VoidDisplayTheConfigurationScreen>:


void LCD_VoidDisplayTheConfigurationScreen(void)
{
    5136:	df 93       	push	r29
    5138:	cf 93       	push	r28
    513a:	cd b7       	in	r28, 0x3d	; 61
    513c:	de b7       	in	r29, 0x3e	; 62
	LCD_VidWriteCommand(CLR);
    513e:	81 e0       	ldi	r24, 0x01	; 1
    5140:	0e 94 35 2c 	call	0x586a	; 0x586a <LCD_VidWriteCommand>
	LCD_VidWriteString("OK:O");//DATA=4
    5144:	82 e9       	ldi	r24, 0x92	; 146
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <LCD_VidWriteString>
	LCD_VidSetDdram(1,11);
    514c:	81 e0       	ldi	r24, 0x01	; 1
    514e:	6b e0       	ldi	r22, 0x0B	; 11
    5150:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <LCD_VidSetDdram>
	LCD_VidWriteString("CN:C");//DATA=4
    5154:	87 e9       	ldi	r24, 0x97	; 151
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <LCD_VidWriteString>

}
    515c:	cf 91       	pop	r28
    515e:	df 91       	pop	r29
    5160:	08 95       	ret

00005162 <LCD_VoidDisplayTheAlarmmingScreen>:


void  LCD_VoidDisplayTheAlarmmingScreen(void)
{
    5162:	df 93       	push	r29
    5164:	cf 93       	push	r28
    5166:	cd b7       	in	r28, 0x3d	; 61
    5168:	de b7       	in	r29, 0x3e	; 62
	LCD_VidWriteCommand(CLR);
    516a:	81 e0       	ldi	r24, 0x01	; 1
    516c:	0e 94 35 2c 	call	0x586a	; 0x586a <LCD_VidWriteCommand>
	LCD_VidSetDdram(1,5);
    5170:	81 e0       	ldi	r24, 0x01	; 1
    5172:	65 e0       	ldi	r22, 0x05	; 5
    5174:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <LCD_VidSetDdram>
	LCD_VidWriteString("Alarming");//DATA=4
    5178:	8c e9       	ldi	r24, 0x9C	; 156
    517a:	90 e0       	ldi	r25, 0x00	; 0
    517c:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <LCD_VidWriteString>
	LCD_VidSetDdram(2,6);
    5180:	82 e0       	ldi	r24, 0x02	; 2
    5182:	66 e0       	ldi	r22, 0x06	; 6
    5184:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <LCD_VidSetDdram>
	LCD_VidWriteString("SA:S");//DATA=4
    5188:	85 ea       	ldi	r24, 0xA5	; 165
    518a:	90 e0       	ldi	r25, 0x00	; 0
    518c:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <LCD_VidWriteString>
}
    5190:	cf 91       	pop	r28
    5192:	df 91       	pop	r29
    5194:	08 95       	ret

00005196 <LCD_VoidDisplayAlarmStatuscreen>:


void  LCD_VoidDisplayAlarmStatuscreen(void)
{
    5196:	df 93       	push	r29
    5198:	cf 93       	push	r28
    519a:	cd b7       	in	r28, 0x3d	; 61
    519c:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSetDdram(1,15);
    519e:	81 e0       	ldi	r24, 0x01	; 1
    51a0:	6f e0       	ldi	r22, 0x0F	; 15
    51a2:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <LCD_VidSetDdram>

	LCD_VidWriteData(AlarmingSystem.AlarmingStatus);
    51a6:	80 91 89 07 	lds	r24, 0x0789
    51aa:	0e 94 4f 2c 	call	0x589e	; 0x589e <LCD_VidWriteData>
}
    51ae:	cf 91       	pop	r28
    51b0:	df 91       	pop	r29
    51b2:	08 95       	ret

000051b4 <LCD_VoidDisplayAndUpdateTheCurrentTemp>:


void LCD_VoidDisplayAndUpdateTheCurrentTemp(void)
{
    51b4:	df 93       	push	r29
    51b6:	cf 93       	push	r28
    51b8:	cd b7       	in	r28, 0x3d	; 61
    51ba:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSetDdram(1,3);
    51bc:	81 e0       	ldi	r24, 0x01	; 1
    51be:	63 e0       	ldi	r22, 0x03	; 3
    51c0:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <LCD_VidSetDdram>

	LCD_VidWriteNumber(AlarmingSystem.CurrentTemp);
    51c4:	80 91 87 07 	lds	r24, 0x0787
    51c8:	88 2f       	mov	r24, r24
    51ca:	90 e0       	ldi	r25, 0x00	; 0
    51cc:	a0 e0       	ldi	r26, 0x00	; 0
    51ce:	b0 e0       	ldi	r27, 0x00	; 0
    51d0:	bc 01       	movw	r22, r24
    51d2:	cd 01       	movw	r24, r26
    51d4:	0e 94 93 2c 	call	0x5926	; 0x5926 <LCD_VidWriteNumber>

}
    51d8:	cf 91       	pop	r28
    51da:	df 91       	pop	r29
    51dc:	08 95       	ret

000051de <LCD_VoidDisplayAndUpdateThershold>:


void LCD_VoidDisplayAndUpdateThershold(void)
{
    51de:	df 93       	push	r29
    51e0:	cf 93       	push	r28
    51e2:	cd b7       	in	r28, 0x3d	; 61
    51e4:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSetDdram(1,9);
    51e6:	81 e0       	ldi	r24, 0x01	; 1
    51e8:	69 e0       	ldi	r22, 0x09	; 9
    51ea:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <LCD_VidSetDdram>

	LCD_VidWriteNumber(AlarmingSystem.Threshold);
    51ee:	80 91 88 07 	lds	r24, 0x0788
    51f2:	88 2f       	mov	r24, r24
    51f4:	90 e0       	ldi	r25, 0x00	; 0
    51f6:	a0 e0       	ldi	r26, 0x00	; 0
    51f8:	b0 e0       	ldi	r27, 0x00	; 0
    51fa:	bc 01       	movw	r22, r24
    51fc:	cd 01       	movw	r24, r26
    51fe:	0e 94 93 2c 	call	0x5926	; 0x5926 <LCD_VidWriteNumber>


}
    5202:	cf 91       	pop	r28
    5204:	df 91       	pop	r29
    5206:	08 95       	ret

00005208 <LCD_VidEnable>:
	#include "BIT_MATH.h"
	#include "DIO_interface.h"
	#include "LCD_interface.h"
	#include "avr/delay.h"

	void LCD_VidEnable(void){
    5208:	df 93       	push	r29
    520a:	cf 93       	push	r28
    520c:	cd b7       	in	r28, 0x3d	; 61
    520e:	de b7       	in	r29, 0x3e	; 62
    5210:	6c 97       	sbiw	r28, 0x1c	; 28
    5212:	0f b6       	in	r0, 0x3f	; 63
    5214:	f8 94       	cli
    5216:	de bf       	out	0x3e, r29	; 62
    5218:	0f be       	out	0x3f, r0	; 63
    521a:	cd bf       	out	0x3d, r28	; 61
		DIO_VidSetPinValue(CTRL_PORT,ES_PIN,HIGH); // EN raising edge//
    521c:	83 e0       	ldi	r24, 0x03	; 3
    521e:	64 e0       	ldi	r22, 0x04	; 4
    5220:	41 e0       	ldi	r20, 0x01	; 1
    5222:	0e 94 e7 25 	call	0x4bce	; 0x4bce <DIO_VidSetPinValue>
    5226:	80 e0       	ldi	r24, 0x00	; 0
    5228:	90 e0       	ldi	r25, 0x00	; 0
    522a:	a0 e8       	ldi	r26, 0x80	; 128
    522c:	bf e3       	ldi	r27, 0x3F	; 63
    522e:	89 8f       	std	Y+25, r24	; 0x19
    5230:	9a 8f       	std	Y+26, r25	; 0x1a
    5232:	ab 8f       	std	Y+27, r26	; 0x1b
    5234:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5236:	69 8d       	ldd	r22, Y+25	; 0x19
    5238:	7a 8d       	ldd	r23, Y+26	; 0x1a
    523a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    523c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    523e:	20 e0       	ldi	r18, 0x00	; 0
    5240:	30 e0       	ldi	r19, 0x00	; 0
    5242:	4a ef       	ldi	r20, 0xFA	; 250
    5244:	54 e4       	ldi	r21, 0x44	; 68
    5246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    524a:	dc 01       	movw	r26, r24
    524c:	cb 01       	movw	r24, r22
    524e:	8d 8b       	std	Y+21, r24	; 0x15
    5250:	9e 8b       	std	Y+22, r25	; 0x16
    5252:	af 8b       	std	Y+23, r26	; 0x17
    5254:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5256:	6d 89       	ldd	r22, Y+21	; 0x15
    5258:	7e 89       	ldd	r23, Y+22	; 0x16
    525a:	8f 89       	ldd	r24, Y+23	; 0x17
    525c:	98 8d       	ldd	r25, Y+24	; 0x18
    525e:	20 e0       	ldi	r18, 0x00	; 0
    5260:	30 e0       	ldi	r19, 0x00	; 0
    5262:	40 e8       	ldi	r20, 0x80	; 128
    5264:	5f e3       	ldi	r21, 0x3F	; 63
    5266:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    526a:	88 23       	and	r24, r24
    526c:	2c f4       	brge	.+10     	; 0x5278 <LCD_VidEnable+0x70>
		__ticks = 1;
    526e:	81 e0       	ldi	r24, 0x01	; 1
    5270:	90 e0       	ldi	r25, 0x00	; 0
    5272:	9c 8b       	std	Y+20, r25	; 0x14
    5274:	8b 8b       	std	Y+19, r24	; 0x13
    5276:	3f c0       	rjmp	.+126    	; 0x52f6 <LCD_VidEnable+0xee>
	else if (__tmp > 65535)
    5278:	6d 89       	ldd	r22, Y+21	; 0x15
    527a:	7e 89       	ldd	r23, Y+22	; 0x16
    527c:	8f 89       	ldd	r24, Y+23	; 0x17
    527e:	98 8d       	ldd	r25, Y+24	; 0x18
    5280:	20 e0       	ldi	r18, 0x00	; 0
    5282:	3f ef       	ldi	r19, 0xFF	; 255
    5284:	4f e7       	ldi	r20, 0x7F	; 127
    5286:	57 e4       	ldi	r21, 0x47	; 71
    5288:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    528c:	18 16       	cp	r1, r24
    528e:	4c f5       	brge	.+82     	; 0x52e2 <LCD_VidEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5290:	69 8d       	ldd	r22, Y+25	; 0x19
    5292:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5294:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5296:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5298:	20 e0       	ldi	r18, 0x00	; 0
    529a:	30 e0       	ldi	r19, 0x00	; 0
    529c:	40 e2       	ldi	r20, 0x20	; 32
    529e:	51 e4       	ldi	r21, 0x41	; 65
    52a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52a4:	dc 01       	movw	r26, r24
    52a6:	cb 01       	movw	r24, r22
    52a8:	bc 01       	movw	r22, r24
    52aa:	cd 01       	movw	r24, r26
    52ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52b0:	dc 01       	movw	r26, r24
    52b2:	cb 01       	movw	r24, r22
    52b4:	9c 8b       	std	Y+20, r25	; 0x14
    52b6:	8b 8b       	std	Y+19, r24	; 0x13
    52b8:	0f c0       	rjmp	.+30     	; 0x52d8 <LCD_VidEnable+0xd0>
    52ba:	88 ec       	ldi	r24, 0xC8	; 200
    52bc:	90 e0       	ldi	r25, 0x00	; 0
    52be:	9a 8b       	std	Y+18, r25	; 0x12
    52c0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    52c2:	89 89       	ldd	r24, Y+17	; 0x11
    52c4:	9a 89       	ldd	r25, Y+18	; 0x12
    52c6:	01 97       	sbiw	r24, 0x01	; 1
    52c8:	f1 f7       	brne	.-4      	; 0x52c6 <LCD_VidEnable+0xbe>
    52ca:	9a 8b       	std	Y+18, r25	; 0x12
    52cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52ce:	8b 89       	ldd	r24, Y+19	; 0x13
    52d0:	9c 89       	ldd	r25, Y+20	; 0x14
    52d2:	01 97       	sbiw	r24, 0x01	; 1
    52d4:	9c 8b       	std	Y+20, r25	; 0x14
    52d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52d8:	8b 89       	ldd	r24, Y+19	; 0x13
    52da:	9c 89       	ldd	r25, Y+20	; 0x14
    52dc:	00 97       	sbiw	r24, 0x00	; 0
    52de:	69 f7       	brne	.-38     	; 0x52ba <LCD_VidEnable+0xb2>
    52e0:	14 c0       	rjmp	.+40     	; 0x530a <LCD_VidEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52e2:	6d 89       	ldd	r22, Y+21	; 0x15
    52e4:	7e 89       	ldd	r23, Y+22	; 0x16
    52e6:	8f 89       	ldd	r24, Y+23	; 0x17
    52e8:	98 8d       	ldd	r25, Y+24	; 0x18
    52ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52ee:	dc 01       	movw	r26, r24
    52f0:	cb 01       	movw	r24, r22
    52f2:	9c 8b       	std	Y+20, r25	; 0x14
    52f4:	8b 8b       	std	Y+19, r24	; 0x13
    52f6:	8b 89       	ldd	r24, Y+19	; 0x13
    52f8:	9c 89       	ldd	r25, Y+20	; 0x14
    52fa:	98 8b       	std	Y+16, r25	; 0x10
    52fc:	8f 87       	std	Y+15, r24	; 0x0f
    52fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    5300:	98 89       	ldd	r25, Y+16	; 0x10
    5302:	01 97       	sbiw	r24, 0x01	; 1
    5304:	f1 f7       	brne	.-4      	; 0x5302 <LCD_VidEnable+0xfa>
    5306:	98 8b       	std	Y+16, r25	; 0x10
    5308:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_VidSetPinValue(CTRL_PORT,ES_PIN,LOW);// EN falling edge//
    530a:	83 e0       	ldi	r24, 0x03	; 3
    530c:	64 e0       	ldi	r22, 0x04	; 4
    530e:	40 e0       	ldi	r20, 0x00	; 0
    5310:	0e 94 e7 25 	call	0x4bce	; 0x4bce <DIO_VidSetPinValue>
    5314:	80 e0       	ldi	r24, 0x00	; 0
    5316:	90 e0       	ldi	r25, 0x00	; 0
    5318:	a0 e8       	ldi	r26, 0x80	; 128
    531a:	bf e3       	ldi	r27, 0x3F	; 63
    531c:	8b 87       	std	Y+11, r24	; 0x0b
    531e:	9c 87       	std	Y+12, r25	; 0x0c
    5320:	ad 87       	std	Y+13, r26	; 0x0d
    5322:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5324:	6b 85       	ldd	r22, Y+11	; 0x0b
    5326:	7c 85       	ldd	r23, Y+12	; 0x0c
    5328:	8d 85       	ldd	r24, Y+13	; 0x0d
    532a:	9e 85       	ldd	r25, Y+14	; 0x0e
    532c:	20 e0       	ldi	r18, 0x00	; 0
    532e:	30 e0       	ldi	r19, 0x00	; 0
    5330:	4a ef       	ldi	r20, 0xFA	; 250
    5332:	54 e4       	ldi	r21, 0x44	; 68
    5334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5338:	dc 01       	movw	r26, r24
    533a:	cb 01       	movw	r24, r22
    533c:	8f 83       	std	Y+7, r24	; 0x07
    533e:	98 87       	std	Y+8, r25	; 0x08
    5340:	a9 87       	std	Y+9, r26	; 0x09
    5342:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5344:	6f 81       	ldd	r22, Y+7	; 0x07
    5346:	78 85       	ldd	r23, Y+8	; 0x08
    5348:	89 85       	ldd	r24, Y+9	; 0x09
    534a:	9a 85       	ldd	r25, Y+10	; 0x0a
    534c:	20 e0       	ldi	r18, 0x00	; 0
    534e:	30 e0       	ldi	r19, 0x00	; 0
    5350:	40 e8       	ldi	r20, 0x80	; 128
    5352:	5f e3       	ldi	r21, 0x3F	; 63
    5354:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5358:	88 23       	and	r24, r24
    535a:	2c f4       	brge	.+10     	; 0x5366 <LCD_VidEnable+0x15e>
		__ticks = 1;
    535c:	81 e0       	ldi	r24, 0x01	; 1
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	9e 83       	std	Y+6, r25	; 0x06
    5362:	8d 83       	std	Y+5, r24	; 0x05
    5364:	3f c0       	rjmp	.+126    	; 0x53e4 <LCD_VidEnable+0x1dc>
	else if (__tmp > 65535)
    5366:	6f 81       	ldd	r22, Y+7	; 0x07
    5368:	78 85       	ldd	r23, Y+8	; 0x08
    536a:	89 85       	ldd	r24, Y+9	; 0x09
    536c:	9a 85       	ldd	r25, Y+10	; 0x0a
    536e:	20 e0       	ldi	r18, 0x00	; 0
    5370:	3f ef       	ldi	r19, 0xFF	; 255
    5372:	4f e7       	ldi	r20, 0x7F	; 127
    5374:	57 e4       	ldi	r21, 0x47	; 71
    5376:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    537a:	18 16       	cp	r1, r24
    537c:	4c f5       	brge	.+82     	; 0x53d0 <LCD_VidEnable+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    537e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5380:	7c 85       	ldd	r23, Y+12	; 0x0c
    5382:	8d 85       	ldd	r24, Y+13	; 0x0d
    5384:	9e 85       	ldd	r25, Y+14	; 0x0e
    5386:	20 e0       	ldi	r18, 0x00	; 0
    5388:	30 e0       	ldi	r19, 0x00	; 0
    538a:	40 e2       	ldi	r20, 0x20	; 32
    538c:	51 e4       	ldi	r21, 0x41	; 65
    538e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5392:	dc 01       	movw	r26, r24
    5394:	cb 01       	movw	r24, r22
    5396:	bc 01       	movw	r22, r24
    5398:	cd 01       	movw	r24, r26
    539a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    539e:	dc 01       	movw	r26, r24
    53a0:	cb 01       	movw	r24, r22
    53a2:	9e 83       	std	Y+6, r25	; 0x06
    53a4:	8d 83       	std	Y+5, r24	; 0x05
    53a6:	0f c0       	rjmp	.+30     	; 0x53c6 <LCD_VidEnable+0x1be>
    53a8:	88 ec       	ldi	r24, 0xC8	; 200
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	9c 83       	std	Y+4, r25	; 0x04
    53ae:	8b 83       	std	Y+3, r24	; 0x03
    53b0:	8b 81       	ldd	r24, Y+3	; 0x03
    53b2:	9c 81       	ldd	r25, Y+4	; 0x04
    53b4:	01 97       	sbiw	r24, 0x01	; 1
    53b6:	f1 f7       	brne	.-4      	; 0x53b4 <LCD_VidEnable+0x1ac>
    53b8:	9c 83       	std	Y+4, r25	; 0x04
    53ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53bc:	8d 81       	ldd	r24, Y+5	; 0x05
    53be:	9e 81       	ldd	r25, Y+6	; 0x06
    53c0:	01 97       	sbiw	r24, 0x01	; 1
    53c2:	9e 83       	std	Y+6, r25	; 0x06
    53c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53c6:	8d 81       	ldd	r24, Y+5	; 0x05
    53c8:	9e 81       	ldd	r25, Y+6	; 0x06
    53ca:	00 97       	sbiw	r24, 0x00	; 0
    53cc:	69 f7       	brne	.-38     	; 0x53a8 <LCD_VidEnable+0x1a0>
    53ce:	14 c0       	rjmp	.+40     	; 0x53f8 <LCD_VidEnable+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53d0:	6f 81       	ldd	r22, Y+7	; 0x07
    53d2:	78 85       	ldd	r23, Y+8	; 0x08
    53d4:	89 85       	ldd	r24, Y+9	; 0x09
    53d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    53d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53dc:	dc 01       	movw	r26, r24
    53de:	cb 01       	movw	r24, r22
    53e0:	9e 83       	std	Y+6, r25	; 0x06
    53e2:	8d 83       	std	Y+5, r24	; 0x05
    53e4:	8d 81       	ldd	r24, Y+5	; 0x05
    53e6:	9e 81       	ldd	r25, Y+6	; 0x06
    53e8:	9a 83       	std	Y+2, r25	; 0x02
    53ea:	89 83       	std	Y+1, r24	; 0x01
    53ec:	89 81       	ldd	r24, Y+1	; 0x01
    53ee:	9a 81       	ldd	r25, Y+2	; 0x02
    53f0:	01 97       	sbiw	r24, 0x01	; 1
    53f2:	f1 f7       	brne	.-4      	; 0x53f0 <LCD_VidEnable+0x1e8>
    53f4:	9a 83       	std	Y+2, r25	; 0x02
    53f6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		
	}
    53f8:	6c 96       	adiw	r28, 0x1c	; 28
    53fa:	0f b6       	in	r0, 0x3f	; 63
    53fc:	f8 94       	cli
    53fe:	de bf       	out	0x3e, r29	; 62
    5400:	0f be       	out	0x3f, r0	; 63
    5402:	cd bf       	out	0x3d, r28	; 61
    5404:	cf 91       	pop	r28
    5406:	df 91       	pop	r29
    5408:	08 95       	ret

0000540a <LCD_VidInit>:


	/*u8 loc_u8DataPort=the port that connected from D0 to D7
	u8   loc_u8ControlPort=the port that connected to RS&RW&EN
	*/
	void LCD_VidInit(void){
    540a:	df 93       	push	r29
    540c:	cf 93       	push	r28
    540e:	cd b7       	in	r28, 0x3d	; 61
    5410:	de b7       	in	r29, 0x3e	; 62
    5412:	c1 54       	subi	r28, 0x41	; 65
    5414:	d0 40       	sbci	r29, 0x00	; 0
    5416:	0f b6       	in	r0, 0x3f	; 63
    5418:	f8 94       	cli
    541a:	de bf       	out	0x3e, r29	; 62
    541c:	0f be       	out	0x3f, r0	; 63
    541e:	cd bf       	out	0x3d, r28	; 61
    5420:	80 e0       	ldi	r24, 0x00	; 0
    5422:	90 e0       	ldi	r25, 0x00	; 0
    5424:	a8 e4       	ldi	r26, 0x48	; 72
    5426:	b2 e4       	ldi	r27, 0x42	; 66
    5428:	8d ab       	std	Y+53, r24	; 0x35
    542a:	9e ab       	std	Y+54, r25	; 0x36
    542c:	af ab       	std	Y+55, r26	; 0x37
    542e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5430:	6d a9       	ldd	r22, Y+53	; 0x35
    5432:	7e a9       	ldd	r23, Y+54	; 0x36
    5434:	8f a9       	ldd	r24, Y+55	; 0x37
    5436:	98 ad       	ldd	r25, Y+56	; 0x38
    5438:	20 e0       	ldi	r18, 0x00	; 0
    543a:	30 e0       	ldi	r19, 0x00	; 0
    543c:	4a ef       	ldi	r20, 0xFA	; 250
    543e:	54 e4       	ldi	r21, 0x44	; 68
    5440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5444:	dc 01       	movw	r26, r24
    5446:	cb 01       	movw	r24, r22
    5448:	89 ab       	std	Y+49, r24	; 0x31
    544a:	9a ab       	std	Y+50, r25	; 0x32
    544c:	ab ab       	std	Y+51, r26	; 0x33
    544e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5450:	69 a9       	ldd	r22, Y+49	; 0x31
    5452:	7a a9       	ldd	r23, Y+50	; 0x32
    5454:	8b a9       	ldd	r24, Y+51	; 0x33
    5456:	9c a9       	ldd	r25, Y+52	; 0x34
    5458:	20 e0       	ldi	r18, 0x00	; 0
    545a:	30 e0       	ldi	r19, 0x00	; 0
    545c:	40 e8       	ldi	r20, 0x80	; 128
    545e:	5f e3       	ldi	r21, 0x3F	; 63
    5460:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5464:	88 23       	and	r24, r24
    5466:	2c f4       	brge	.+10     	; 0x5472 <LCD_VidInit+0x68>
		__ticks = 1;
    5468:	81 e0       	ldi	r24, 0x01	; 1
    546a:	90 e0       	ldi	r25, 0x00	; 0
    546c:	98 ab       	std	Y+48, r25	; 0x30
    546e:	8f a7       	std	Y+47, r24	; 0x2f
    5470:	3f c0       	rjmp	.+126    	; 0x54f0 <LCD_VidInit+0xe6>
	else if (__tmp > 65535)
    5472:	69 a9       	ldd	r22, Y+49	; 0x31
    5474:	7a a9       	ldd	r23, Y+50	; 0x32
    5476:	8b a9       	ldd	r24, Y+51	; 0x33
    5478:	9c a9       	ldd	r25, Y+52	; 0x34
    547a:	20 e0       	ldi	r18, 0x00	; 0
    547c:	3f ef       	ldi	r19, 0xFF	; 255
    547e:	4f e7       	ldi	r20, 0x7F	; 127
    5480:	57 e4       	ldi	r21, 0x47	; 71
    5482:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5486:	18 16       	cp	r1, r24
    5488:	4c f5       	brge	.+82     	; 0x54dc <LCD_VidInit+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    548a:	6d a9       	ldd	r22, Y+53	; 0x35
    548c:	7e a9       	ldd	r23, Y+54	; 0x36
    548e:	8f a9       	ldd	r24, Y+55	; 0x37
    5490:	98 ad       	ldd	r25, Y+56	; 0x38
    5492:	20 e0       	ldi	r18, 0x00	; 0
    5494:	30 e0       	ldi	r19, 0x00	; 0
    5496:	40 e2       	ldi	r20, 0x20	; 32
    5498:	51 e4       	ldi	r21, 0x41	; 65
    549a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    549e:	dc 01       	movw	r26, r24
    54a0:	cb 01       	movw	r24, r22
    54a2:	bc 01       	movw	r22, r24
    54a4:	cd 01       	movw	r24, r26
    54a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54aa:	dc 01       	movw	r26, r24
    54ac:	cb 01       	movw	r24, r22
    54ae:	98 ab       	std	Y+48, r25	; 0x30
    54b0:	8f a7       	std	Y+47, r24	; 0x2f
    54b2:	0f c0       	rjmp	.+30     	; 0x54d2 <LCD_VidInit+0xc8>
    54b4:	88 ec       	ldi	r24, 0xC8	; 200
    54b6:	90 e0       	ldi	r25, 0x00	; 0
    54b8:	9e a7       	std	Y+46, r25	; 0x2e
    54ba:	8d a7       	std	Y+45, r24	; 0x2d
    54bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    54be:	9e a5       	ldd	r25, Y+46	; 0x2e
    54c0:	01 97       	sbiw	r24, 0x01	; 1
    54c2:	f1 f7       	brne	.-4      	; 0x54c0 <LCD_VidInit+0xb6>
    54c4:	9e a7       	std	Y+46, r25	; 0x2e
    54c6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    54ca:	98 a9       	ldd	r25, Y+48	; 0x30
    54cc:	01 97       	sbiw	r24, 0x01	; 1
    54ce:	98 ab       	std	Y+48, r25	; 0x30
    54d0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    54d4:	98 a9       	ldd	r25, Y+48	; 0x30
    54d6:	00 97       	sbiw	r24, 0x00	; 0
    54d8:	69 f7       	brne	.-38     	; 0x54b4 <LCD_VidInit+0xaa>
    54da:	14 c0       	rjmp	.+40     	; 0x5504 <LCD_VidInit+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54dc:	69 a9       	ldd	r22, Y+49	; 0x31
    54de:	7a a9       	ldd	r23, Y+50	; 0x32
    54e0:	8b a9       	ldd	r24, Y+51	; 0x33
    54e2:	9c a9       	ldd	r25, Y+52	; 0x34
    54e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54e8:	dc 01       	movw	r26, r24
    54ea:	cb 01       	movw	r24, r22
    54ec:	98 ab       	std	Y+48, r25	; 0x30
    54ee:	8f a7       	std	Y+47, r24	; 0x2f
    54f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    54f2:	98 a9       	ldd	r25, Y+48	; 0x30
    54f4:	9c a7       	std	Y+44, r25	; 0x2c
    54f6:	8b a7       	std	Y+43, r24	; 0x2b
    54f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    54fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    54fc:	01 97       	sbiw	r24, 0x01	; 1
    54fe:	f1 f7       	brne	.-4      	; 0x54fc <LCD_VidInit+0xf2>
    5500:	9c a7       	std	Y+44, r25	; 0x2c
    5502:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
	u8 i=0;	
    5504:	19 ae       	std	Y+57, r1	; 0x39
	u8 array[]={RS_PIN,RW_PIN,ES_PIN};	
    5506:	ce 01       	movw	r24, r28
    5508:	ca 96       	adiw	r24, 0x3a	; 58
    550a:	9e af       	std	Y+62, r25	; 0x3e
    550c:	8d af       	std	Y+61, r24	; 0x3d
    550e:	ef ee       	ldi	r30, 0xEF	; 239
    5510:	f0 e0       	ldi	r31, 0x00	; 0
    5512:	21 96       	adiw	r28, 0x01	; 1
    5514:	ff af       	std	Y+63, r31	; 0x3f
    5516:	ee af       	std	Y+62, r30	; 0x3e
    5518:	21 97       	sbiw	r28, 0x01	; 1
    551a:	f3 e0       	ldi	r31, 0x03	; 3
    551c:	22 96       	adiw	r28, 0x02	; 2
    551e:	ff af       	std	Y+63, r31	; 0x3f
    5520:	22 97       	sbiw	r28, 0x02	; 2
    5522:	21 96       	adiw	r28, 0x01	; 1
    5524:	ee ad       	ldd	r30, Y+62	; 0x3e
    5526:	ff ad       	ldd	r31, Y+63	; 0x3f
    5528:	21 97       	sbiw	r28, 0x01	; 1
    552a:	00 80       	ld	r0, Z
    552c:	21 96       	adiw	r28, 0x01	; 1
    552e:	8e ad       	ldd	r24, Y+62	; 0x3e
    5530:	9f ad       	ldd	r25, Y+63	; 0x3f
    5532:	21 97       	sbiw	r28, 0x01	; 1
    5534:	01 96       	adiw	r24, 0x01	; 1
    5536:	21 96       	adiw	r28, 0x01	; 1
    5538:	9f af       	std	Y+63, r25	; 0x3f
    553a:	8e af       	std	Y+62, r24	; 0x3e
    553c:	21 97       	sbiw	r28, 0x01	; 1
    553e:	ed ad       	ldd	r30, Y+61	; 0x3d
    5540:	fe ad       	ldd	r31, Y+62	; 0x3e
    5542:	00 82       	st	Z, r0
    5544:	8d ad       	ldd	r24, Y+61	; 0x3d
    5546:	9e ad       	ldd	r25, Y+62	; 0x3e
    5548:	01 96       	adiw	r24, 0x01	; 1
    554a:	9e af       	std	Y+62, r25	; 0x3e
    554c:	8d af       	std	Y+61, r24	; 0x3d
    554e:	22 96       	adiw	r28, 0x02	; 2
    5550:	9f ad       	ldd	r25, Y+63	; 0x3f
    5552:	22 97       	sbiw	r28, 0x02	; 2
    5554:	91 50       	subi	r25, 0x01	; 1
    5556:	22 96       	adiw	r28, 0x02	; 2
    5558:	9f af       	std	Y+63, r25	; 0x3f
    555a:	22 97       	sbiw	r28, 0x02	; 2
    555c:	22 96       	adiw	r28, 0x02	; 2
    555e:	ef ad       	ldd	r30, Y+63	; 0x3f
    5560:	22 97       	sbiw	r28, 0x02	; 2
    5562:	ee 23       	and	r30, r30
    5564:	f1 f6       	brne	.-68     	; 0x5522 <LCD_VidInit+0x118>
    5566:	11 c0       	rjmp	.+34     	; 0x558a <LCD_VidInit+0x180>
	while(i<3){
		DIO_VidSetPinDirection(CTRL_PORT,array[i],HIGH);
    5568:	89 ad       	ldd	r24, Y+57	; 0x39
    556a:	28 2f       	mov	r18, r24
    556c:	30 e0       	ldi	r19, 0x00	; 0
    556e:	ce 01       	movw	r24, r28
    5570:	ca 96       	adiw	r24, 0x3a	; 58
    5572:	fc 01       	movw	r30, r24
    5574:	e2 0f       	add	r30, r18
    5576:	f3 1f       	adc	r31, r19
    5578:	90 81       	ld	r25, Z
    557a:	83 e0       	ldi	r24, 0x03	; 3
    557c:	69 2f       	mov	r22, r25
    557e:	41 e0       	ldi	r20, 0x01	; 1
    5580:	0e 94 e7 24 	call	0x49ce	; 0x49ce <DIO_VidSetPinDirection>
	i++;	
    5584:	89 ad       	ldd	r24, Y+57	; 0x39
    5586:	8f 5f       	subi	r24, 0xFF	; 255
    5588:	89 af       	std	Y+57, r24	; 0x39
	*/
	void LCD_VidInit(void){
		_delay_ms(50);
	u8 i=0;	
	u8 array[]={RS_PIN,RW_PIN,ES_PIN};	
	while(i<3){
    558a:	89 ad       	ldd	r24, Y+57	; 0x39
    558c:	83 30       	cpi	r24, 0x03	; 3
    558e:	60 f3       	brcs	.-40     	; 0x5568 <LCD_VidInit+0x15e>
		DIO_VidSetPinDirection(CTRL_PORT,array[i],HIGH);
	i++;	
	}
	#if LCD_MODE==FULL	
		 DIO_VidSetPortDirection(DATA_PORT,255);
    5590:	82 e0       	ldi	r24, 0x02	; 2
    5592:	6f ef       	ldi	r22, 0xFF	; 255
    5594:	0e 94 e7 26 	call	0x4dce	; 0x4dce <DIO_VidSetPortDirection>
		 LCD_VidWriteCommand(FUNCTION_SET);    //function set  //
    5598:	88 e3       	ldi	r24, 0x38	; 56
    559a:	0e 94 35 2c 	call	0x586a	; 0x586a <LCD_VidWriteCommand>
    559e:	80 e0       	ldi	r24, 0x00	; 0
    55a0:	90 e0       	ldi	r25, 0x00	; 0
    55a2:	a0 e8       	ldi	r26, 0x80	; 128
    55a4:	bf e3       	ldi	r27, 0x3F	; 63
    55a6:	8f a3       	std	Y+39, r24	; 0x27
    55a8:	98 a7       	std	Y+40, r25	; 0x28
    55aa:	a9 a7       	std	Y+41, r26	; 0x29
    55ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55ae:	6f a1       	ldd	r22, Y+39	; 0x27
    55b0:	78 a5       	ldd	r23, Y+40	; 0x28
    55b2:	89 a5       	ldd	r24, Y+41	; 0x29
    55b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    55b6:	20 e0       	ldi	r18, 0x00	; 0
    55b8:	30 e0       	ldi	r19, 0x00	; 0
    55ba:	4a ef       	ldi	r20, 0xFA	; 250
    55bc:	54 e4       	ldi	r21, 0x44	; 68
    55be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55c2:	dc 01       	movw	r26, r24
    55c4:	cb 01       	movw	r24, r22
    55c6:	8b a3       	std	Y+35, r24	; 0x23
    55c8:	9c a3       	std	Y+36, r25	; 0x24
    55ca:	ad a3       	std	Y+37, r26	; 0x25
    55cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    55ce:	6b a1       	ldd	r22, Y+35	; 0x23
    55d0:	7c a1       	ldd	r23, Y+36	; 0x24
    55d2:	8d a1       	ldd	r24, Y+37	; 0x25
    55d4:	9e a1       	ldd	r25, Y+38	; 0x26
    55d6:	20 e0       	ldi	r18, 0x00	; 0
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	40 e8       	ldi	r20, 0x80	; 128
    55dc:	5f e3       	ldi	r21, 0x3F	; 63
    55de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    55e2:	88 23       	and	r24, r24
    55e4:	2c f4       	brge	.+10     	; 0x55f0 <LCD_VidInit+0x1e6>
		__ticks = 1;
    55e6:	81 e0       	ldi	r24, 0x01	; 1
    55e8:	90 e0       	ldi	r25, 0x00	; 0
    55ea:	9a a3       	std	Y+34, r25	; 0x22
    55ec:	89 a3       	std	Y+33, r24	; 0x21
    55ee:	3f c0       	rjmp	.+126    	; 0x566e <LCD_VidInit+0x264>
	else if (__tmp > 65535)
    55f0:	6b a1       	ldd	r22, Y+35	; 0x23
    55f2:	7c a1       	ldd	r23, Y+36	; 0x24
    55f4:	8d a1       	ldd	r24, Y+37	; 0x25
    55f6:	9e a1       	ldd	r25, Y+38	; 0x26
    55f8:	20 e0       	ldi	r18, 0x00	; 0
    55fa:	3f ef       	ldi	r19, 0xFF	; 255
    55fc:	4f e7       	ldi	r20, 0x7F	; 127
    55fe:	57 e4       	ldi	r21, 0x47	; 71
    5600:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5604:	18 16       	cp	r1, r24
    5606:	4c f5       	brge	.+82     	; 0x565a <LCD_VidInit+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5608:	6f a1       	ldd	r22, Y+39	; 0x27
    560a:	78 a5       	ldd	r23, Y+40	; 0x28
    560c:	89 a5       	ldd	r24, Y+41	; 0x29
    560e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5610:	20 e0       	ldi	r18, 0x00	; 0
    5612:	30 e0       	ldi	r19, 0x00	; 0
    5614:	40 e2       	ldi	r20, 0x20	; 32
    5616:	51 e4       	ldi	r21, 0x41	; 65
    5618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    561c:	dc 01       	movw	r26, r24
    561e:	cb 01       	movw	r24, r22
    5620:	bc 01       	movw	r22, r24
    5622:	cd 01       	movw	r24, r26
    5624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5628:	dc 01       	movw	r26, r24
    562a:	cb 01       	movw	r24, r22
    562c:	9a a3       	std	Y+34, r25	; 0x22
    562e:	89 a3       	std	Y+33, r24	; 0x21
    5630:	0f c0       	rjmp	.+30     	; 0x5650 <LCD_VidInit+0x246>
    5632:	88 ec       	ldi	r24, 0xC8	; 200
    5634:	90 e0       	ldi	r25, 0x00	; 0
    5636:	98 a3       	std	Y+32, r25	; 0x20
    5638:	8f 8f       	std	Y+31, r24	; 0x1f
    563a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    563c:	98 a1       	ldd	r25, Y+32	; 0x20
    563e:	01 97       	sbiw	r24, 0x01	; 1
    5640:	f1 f7       	brne	.-4      	; 0x563e <LCD_VidInit+0x234>
    5642:	98 a3       	std	Y+32, r25	; 0x20
    5644:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5646:	89 a1       	ldd	r24, Y+33	; 0x21
    5648:	9a a1       	ldd	r25, Y+34	; 0x22
    564a:	01 97       	sbiw	r24, 0x01	; 1
    564c:	9a a3       	std	Y+34, r25	; 0x22
    564e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5650:	89 a1       	ldd	r24, Y+33	; 0x21
    5652:	9a a1       	ldd	r25, Y+34	; 0x22
    5654:	00 97       	sbiw	r24, 0x00	; 0
    5656:	69 f7       	brne	.-38     	; 0x5632 <LCD_VidInit+0x228>
    5658:	14 c0       	rjmp	.+40     	; 0x5682 <LCD_VidInit+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    565a:	6b a1       	ldd	r22, Y+35	; 0x23
    565c:	7c a1       	ldd	r23, Y+36	; 0x24
    565e:	8d a1       	ldd	r24, Y+37	; 0x25
    5660:	9e a1       	ldd	r25, Y+38	; 0x26
    5662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5666:	dc 01       	movw	r26, r24
    5668:	cb 01       	movw	r24, r22
    566a:	9a a3       	std	Y+34, r25	; 0x22
    566c:	89 a3       	std	Y+33, r24	; 0x21
    566e:	89 a1       	ldd	r24, Y+33	; 0x21
    5670:	9a a1       	ldd	r25, Y+34	; 0x22
    5672:	9e 8f       	std	Y+30, r25	; 0x1e
    5674:	8d 8f       	std	Y+29, r24	; 0x1d
    5676:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5678:	9e 8d       	ldd	r25, Y+30	; 0x1e
    567a:	01 97       	sbiw	r24, 0x01	; 1
    567c:	f1 f7       	brne	.-4      	; 0x567a <LCD_VidInit+0x270>
    567e:	9e 8f       	std	Y+30, r25	; 0x1e
    5680:	8d 8f       	std	Y+29, r24	; 0x1d
		 _delay_ms(1);
		 LCD_VidWriteCommand(DISPLAY_ON);    //display on    //
    5682:	8c e0       	ldi	r24, 0x0C	; 12
    5684:	0e 94 35 2c 	call	0x586a	; 0x586a <LCD_VidWriteCommand>
    5688:	80 e0       	ldi	r24, 0x00	; 0
    568a:	90 e0       	ldi	r25, 0x00	; 0
    568c:	a0 e8       	ldi	r26, 0x80	; 128
    568e:	bf e3       	ldi	r27, 0x3F	; 63
    5690:	89 8f       	std	Y+25, r24	; 0x19
    5692:	9a 8f       	std	Y+26, r25	; 0x1a
    5694:	ab 8f       	std	Y+27, r26	; 0x1b
    5696:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5698:	69 8d       	ldd	r22, Y+25	; 0x19
    569a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    569c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    569e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56a0:	20 e0       	ldi	r18, 0x00	; 0
    56a2:	30 e0       	ldi	r19, 0x00	; 0
    56a4:	4a ef       	ldi	r20, 0xFA	; 250
    56a6:	54 e4       	ldi	r21, 0x44	; 68
    56a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56ac:	dc 01       	movw	r26, r24
    56ae:	cb 01       	movw	r24, r22
    56b0:	8d 8b       	std	Y+21, r24	; 0x15
    56b2:	9e 8b       	std	Y+22, r25	; 0x16
    56b4:	af 8b       	std	Y+23, r26	; 0x17
    56b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    56b8:	6d 89       	ldd	r22, Y+21	; 0x15
    56ba:	7e 89       	ldd	r23, Y+22	; 0x16
    56bc:	8f 89       	ldd	r24, Y+23	; 0x17
    56be:	98 8d       	ldd	r25, Y+24	; 0x18
    56c0:	20 e0       	ldi	r18, 0x00	; 0
    56c2:	30 e0       	ldi	r19, 0x00	; 0
    56c4:	40 e8       	ldi	r20, 0x80	; 128
    56c6:	5f e3       	ldi	r21, 0x3F	; 63
    56c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    56cc:	88 23       	and	r24, r24
    56ce:	2c f4       	brge	.+10     	; 0x56da <LCD_VidInit+0x2d0>
		__ticks = 1;
    56d0:	81 e0       	ldi	r24, 0x01	; 1
    56d2:	90 e0       	ldi	r25, 0x00	; 0
    56d4:	9c 8b       	std	Y+20, r25	; 0x14
    56d6:	8b 8b       	std	Y+19, r24	; 0x13
    56d8:	3f c0       	rjmp	.+126    	; 0x5758 <LCD_VidInit+0x34e>
	else if (__tmp > 65535)
    56da:	6d 89       	ldd	r22, Y+21	; 0x15
    56dc:	7e 89       	ldd	r23, Y+22	; 0x16
    56de:	8f 89       	ldd	r24, Y+23	; 0x17
    56e0:	98 8d       	ldd	r25, Y+24	; 0x18
    56e2:	20 e0       	ldi	r18, 0x00	; 0
    56e4:	3f ef       	ldi	r19, 0xFF	; 255
    56e6:	4f e7       	ldi	r20, 0x7F	; 127
    56e8:	57 e4       	ldi	r21, 0x47	; 71
    56ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    56ee:	18 16       	cp	r1, r24
    56f0:	4c f5       	brge	.+82     	; 0x5744 <LCD_VidInit+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56f2:	69 8d       	ldd	r22, Y+25	; 0x19
    56f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    56f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56fa:	20 e0       	ldi	r18, 0x00	; 0
    56fc:	30 e0       	ldi	r19, 0x00	; 0
    56fe:	40 e2       	ldi	r20, 0x20	; 32
    5700:	51 e4       	ldi	r21, 0x41	; 65
    5702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5706:	dc 01       	movw	r26, r24
    5708:	cb 01       	movw	r24, r22
    570a:	bc 01       	movw	r22, r24
    570c:	cd 01       	movw	r24, r26
    570e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5712:	dc 01       	movw	r26, r24
    5714:	cb 01       	movw	r24, r22
    5716:	9c 8b       	std	Y+20, r25	; 0x14
    5718:	8b 8b       	std	Y+19, r24	; 0x13
    571a:	0f c0       	rjmp	.+30     	; 0x573a <LCD_VidInit+0x330>
    571c:	88 ec       	ldi	r24, 0xC8	; 200
    571e:	90 e0       	ldi	r25, 0x00	; 0
    5720:	9a 8b       	std	Y+18, r25	; 0x12
    5722:	89 8b       	std	Y+17, r24	; 0x11
    5724:	89 89       	ldd	r24, Y+17	; 0x11
    5726:	9a 89       	ldd	r25, Y+18	; 0x12
    5728:	01 97       	sbiw	r24, 0x01	; 1
    572a:	f1 f7       	brne	.-4      	; 0x5728 <LCD_VidInit+0x31e>
    572c:	9a 8b       	std	Y+18, r25	; 0x12
    572e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5730:	8b 89       	ldd	r24, Y+19	; 0x13
    5732:	9c 89       	ldd	r25, Y+20	; 0x14
    5734:	01 97       	sbiw	r24, 0x01	; 1
    5736:	9c 8b       	std	Y+20, r25	; 0x14
    5738:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    573a:	8b 89       	ldd	r24, Y+19	; 0x13
    573c:	9c 89       	ldd	r25, Y+20	; 0x14
    573e:	00 97       	sbiw	r24, 0x00	; 0
    5740:	69 f7       	brne	.-38     	; 0x571c <LCD_VidInit+0x312>
    5742:	14 c0       	rjmp	.+40     	; 0x576c <LCD_VidInit+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5744:	6d 89       	ldd	r22, Y+21	; 0x15
    5746:	7e 89       	ldd	r23, Y+22	; 0x16
    5748:	8f 89       	ldd	r24, Y+23	; 0x17
    574a:	98 8d       	ldd	r25, Y+24	; 0x18
    574c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5750:	dc 01       	movw	r26, r24
    5752:	cb 01       	movw	r24, r22
    5754:	9c 8b       	std	Y+20, r25	; 0x14
    5756:	8b 8b       	std	Y+19, r24	; 0x13
    5758:	8b 89       	ldd	r24, Y+19	; 0x13
    575a:	9c 89       	ldd	r25, Y+20	; 0x14
    575c:	98 8b       	std	Y+16, r25	; 0x10
    575e:	8f 87       	std	Y+15, r24	; 0x0f
    5760:	8f 85       	ldd	r24, Y+15	; 0x0f
    5762:	98 89       	ldd	r25, Y+16	; 0x10
    5764:	01 97       	sbiw	r24, 0x01	; 1
    5766:	f1 f7       	brne	.-4      	; 0x5764 <LCD_VidInit+0x35a>
    5768:	98 8b       	std	Y+16, r25	; 0x10
    576a:	8f 87       	std	Y+15, r24	; 0x0f
		 _delay_ms(1);
		 LCD_VidWriteCommand(CLR );        //clear display //
    576c:	81 e0       	ldi	r24, 0x01	; 1
    576e:	0e 94 35 2c 	call	0x586a	; 0x586a <LCD_VidWriteCommand>
    5772:	80 e0       	ldi	r24, 0x00	; 0
    5774:	90 e0       	ldi	r25, 0x00	; 0
    5776:	a0 e0       	ldi	r26, 0x00	; 0
    5778:	b0 e4       	ldi	r27, 0x40	; 64
    577a:	8b 87       	std	Y+11, r24	; 0x0b
    577c:	9c 87       	std	Y+12, r25	; 0x0c
    577e:	ad 87       	std	Y+13, r26	; 0x0d
    5780:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5782:	6b 85       	ldd	r22, Y+11	; 0x0b
    5784:	7c 85       	ldd	r23, Y+12	; 0x0c
    5786:	8d 85       	ldd	r24, Y+13	; 0x0d
    5788:	9e 85       	ldd	r25, Y+14	; 0x0e
    578a:	20 e0       	ldi	r18, 0x00	; 0
    578c:	30 e0       	ldi	r19, 0x00	; 0
    578e:	4a ef       	ldi	r20, 0xFA	; 250
    5790:	54 e4       	ldi	r21, 0x44	; 68
    5792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5796:	dc 01       	movw	r26, r24
    5798:	cb 01       	movw	r24, r22
    579a:	8f 83       	std	Y+7, r24	; 0x07
    579c:	98 87       	std	Y+8, r25	; 0x08
    579e:	a9 87       	std	Y+9, r26	; 0x09
    57a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    57a2:	6f 81       	ldd	r22, Y+7	; 0x07
    57a4:	78 85       	ldd	r23, Y+8	; 0x08
    57a6:	89 85       	ldd	r24, Y+9	; 0x09
    57a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    57aa:	20 e0       	ldi	r18, 0x00	; 0
    57ac:	30 e0       	ldi	r19, 0x00	; 0
    57ae:	40 e8       	ldi	r20, 0x80	; 128
    57b0:	5f e3       	ldi	r21, 0x3F	; 63
    57b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    57b6:	88 23       	and	r24, r24
    57b8:	2c f4       	brge	.+10     	; 0x57c4 <LCD_VidInit+0x3ba>
		__ticks = 1;
    57ba:	81 e0       	ldi	r24, 0x01	; 1
    57bc:	90 e0       	ldi	r25, 0x00	; 0
    57be:	9e 83       	std	Y+6, r25	; 0x06
    57c0:	8d 83       	std	Y+5, r24	; 0x05
    57c2:	3f c0       	rjmp	.+126    	; 0x5842 <LCD_VidInit+0x438>
	else if (__tmp > 65535)
    57c4:	6f 81       	ldd	r22, Y+7	; 0x07
    57c6:	78 85       	ldd	r23, Y+8	; 0x08
    57c8:	89 85       	ldd	r24, Y+9	; 0x09
    57ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    57cc:	20 e0       	ldi	r18, 0x00	; 0
    57ce:	3f ef       	ldi	r19, 0xFF	; 255
    57d0:	4f e7       	ldi	r20, 0x7F	; 127
    57d2:	57 e4       	ldi	r21, 0x47	; 71
    57d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    57d8:	18 16       	cp	r1, r24
    57da:	4c f5       	brge	.+82     	; 0x582e <LCD_VidInit+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    57de:	7c 85       	ldd	r23, Y+12	; 0x0c
    57e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    57e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    57e4:	20 e0       	ldi	r18, 0x00	; 0
    57e6:	30 e0       	ldi	r19, 0x00	; 0
    57e8:	40 e2       	ldi	r20, 0x20	; 32
    57ea:	51 e4       	ldi	r21, 0x41	; 65
    57ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57f0:	dc 01       	movw	r26, r24
    57f2:	cb 01       	movw	r24, r22
    57f4:	bc 01       	movw	r22, r24
    57f6:	cd 01       	movw	r24, r26
    57f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57fc:	dc 01       	movw	r26, r24
    57fe:	cb 01       	movw	r24, r22
    5800:	9e 83       	std	Y+6, r25	; 0x06
    5802:	8d 83       	std	Y+5, r24	; 0x05
    5804:	0f c0       	rjmp	.+30     	; 0x5824 <LCD_VidInit+0x41a>
    5806:	88 ec       	ldi	r24, 0xC8	; 200
    5808:	90 e0       	ldi	r25, 0x00	; 0
    580a:	9c 83       	std	Y+4, r25	; 0x04
    580c:	8b 83       	std	Y+3, r24	; 0x03
    580e:	8b 81       	ldd	r24, Y+3	; 0x03
    5810:	9c 81       	ldd	r25, Y+4	; 0x04
    5812:	01 97       	sbiw	r24, 0x01	; 1
    5814:	f1 f7       	brne	.-4      	; 0x5812 <LCD_VidInit+0x408>
    5816:	9c 83       	std	Y+4, r25	; 0x04
    5818:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    581a:	8d 81       	ldd	r24, Y+5	; 0x05
    581c:	9e 81       	ldd	r25, Y+6	; 0x06
    581e:	01 97       	sbiw	r24, 0x01	; 1
    5820:	9e 83       	std	Y+6, r25	; 0x06
    5822:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5824:	8d 81       	ldd	r24, Y+5	; 0x05
    5826:	9e 81       	ldd	r25, Y+6	; 0x06
    5828:	00 97       	sbiw	r24, 0x00	; 0
    582a:	69 f7       	brne	.-38     	; 0x5806 <LCD_VidInit+0x3fc>
    582c:	14 c0       	rjmp	.+40     	; 0x5856 <LCD_VidInit+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    582e:	6f 81       	ldd	r22, Y+7	; 0x07
    5830:	78 85       	ldd	r23, Y+8	; 0x08
    5832:	89 85       	ldd	r24, Y+9	; 0x09
    5834:	9a 85       	ldd	r25, Y+10	; 0x0a
    5836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    583a:	dc 01       	movw	r26, r24
    583c:	cb 01       	movw	r24, r22
    583e:	9e 83       	std	Y+6, r25	; 0x06
    5840:	8d 83       	std	Y+5, r24	; 0x05
    5842:	8d 81       	ldd	r24, Y+5	; 0x05
    5844:	9e 81       	ldd	r25, Y+6	; 0x06
    5846:	9a 83       	std	Y+2, r25	; 0x02
    5848:	89 83       	std	Y+1, r24	; 0x01
    584a:	89 81       	ldd	r24, Y+1	; 0x01
    584c:	9a 81       	ldd	r25, Y+2	; 0x02
    584e:	01 97       	sbiw	r24, 0x01	; 1
    5850:	f1 f7       	brne	.-4      	; 0x584e <LCD_VidInit+0x444>
    5852:	9a 83       	std	Y+2, r25	; 0x02
    5854:	89 83       	std	Y+1, r24	; 0x01
		 
		 
		 
	#endif	 
		 
	}
    5856:	cf 5b       	subi	r28, 0xBF	; 191
    5858:	df 4f       	sbci	r29, 0xFF	; 255
    585a:	0f b6       	in	r0, 0x3f	; 63
    585c:	f8 94       	cli
    585e:	de bf       	out	0x3e, r29	; 62
    5860:	0f be       	out	0x3f, r0	; 63
    5862:	cd bf       	out	0x3d, r28	; 61
    5864:	cf 91       	pop	r28
    5866:	df 91       	pop	r29
    5868:	08 95       	ret

0000586a <LCD_VidWriteCommand>:
	/*

	loc_u8DataPort=the port that connected from D0 to D7
	loc_u8ControlPort=the port that connected to RS&RW&EN
	*/
	void LCD_VidWriteCommand(u8 loc_u8command){
    586a:	df 93       	push	r29
    586c:	cf 93       	push	r28
    586e:	0f 92       	push	r0
    5870:	cd b7       	in	r28, 0x3d	; 61
    5872:	de b7       	in	r29, 0x3e	; 62
    5874:	89 83       	std	Y+1, r24	; 0x01

	#if LCD_MODE==FULL	
	DIO_VidSetPinValue(CTRL_PORT,RS_PIN,LOW); //make the RS in command mode//
    5876:	83 e0       	ldi	r24, 0x03	; 3
    5878:	62 e0       	ldi	r22, 0x02	; 2
    587a:	40 e0       	ldi	r20, 0x00	; 0
    587c:	0e 94 e7 25 	call	0x4bce	; 0x4bce <DIO_VidSetPinValue>
	DIO_VidSetPinValue(CTRL_PORT,RW_PIN,LOW);//make the RW in write mode//
    5880:	83 e0       	ldi	r24, 0x03	; 3
    5882:	63 e0       	ldi	r22, 0x03	; 3
    5884:	40 e0       	ldi	r20, 0x00	; 0
    5886:	0e 94 e7 25 	call	0x4bce	; 0x4bce <DIO_VidSetPinValue>
	DIO_VidSetPortValue(DATA_PORT,loc_u8command);//take the data from D0 to D7//
    588a:	82 e0       	ldi	r24, 0x02	; 2
    588c:	69 81       	ldd	r22, Y+1	; 0x01
    588e:	0e 94 28 27 	call	0x4e50	; 0x4e50 <DIO_VidSetPortValue>
	LCD_VidEnable();
    5892:	0e 94 04 29 	call	0x5208	; 0x5208 <LCD_VidEnable>

	DIO_VidSetPortValue(DATA_PORT,loc_u8command<<4);//take the data from D4 to D7//
	LCD_VidEnable();
	#endif		
			
	}
    5896:	0f 90       	pop	r0
    5898:	cf 91       	pop	r28
    589a:	df 91       	pop	r29
    589c:	08 95       	ret

0000589e <LCD_VidWriteData>:
	void LCD_VidWriteData(u8 loc_u8data){
    589e:	df 93       	push	r29
    58a0:	cf 93       	push	r28
    58a2:	0f 92       	push	r0
    58a4:	cd b7       	in	r28, 0x3d	; 61
    58a6:	de b7       	in	r29, 0x3e	; 62
    58a8:	89 83       	std	Y+1, r24	; 0x01
		
	#if LCD_MODE==FULL		
		DIO_VidSetPinValue(CTRL_PORT,RS_PIN,HIGH); //make the RS in data mode//
    58aa:	83 e0       	ldi	r24, 0x03	; 3
    58ac:	62 e0       	ldi	r22, 0x02	; 2
    58ae:	41 e0       	ldi	r20, 0x01	; 1
    58b0:	0e 94 e7 25 	call	0x4bce	; 0x4bce <DIO_VidSetPinValue>
		DIO_VidSetPinValue(CTRL_PORT,RW_PIN,LOW);//make the RW in write mode//
    58b4:	83 e0       	ldi	r24, 0x03	; 3
    58b6:	63 e0       	ldi	r22, 0x03	; 3
    58b8:	40 e0       	ldi	r20, 0x00	; 0
    58ba:	0e 94 e7 25 	call	0x4bce	; 0x4bce <DIO_VidSetPinValue>
		DIO_VidSetPortValue(DATA_PORT,loc_u8data);//take the data from D0 to D7//
    58be:	82 e0       	ldi	r24, 0x02	; 2
    58c0:	69 81       	ldd	r22, Y+1	; 0x01
    58c2:	0e 94 28 27 	call	0x4e50	; 0x4e50 <DIO_VidSetPortValue>
		LCD_VidEnable();
    58c6:	0e 94 04 29 	call	0x5208	; 0x5208 <LCD_VidEnable>
		LCD_VidEnable();	
		DIO_VidSetPortValue(DATA_PORT,loc_u8data<<4);//take the data from D4 to D7//
		LCD_VidEnable();		
	#endif	
		
	}
    58ca:	0f 90       	pop	r0
    58cc:	cf 91       	pop	r28
    58ce:	df 91       	pop	r29
    58d0:	08 95       	ret

000058d2 <LCD_VidWriteString>:
	void LCD_VidWriteString(u8* loc_u8string){
    58d2:	df 93       	push	r29
    58d4:	cf 93       	push	r28
    58d6:	00 d0       	rcall	.+0      	; 0x58d8 <LCD_VidWriteString+0x6>
    58d8:	0f 92       	push	r0
    58da:	cd b7       	in	r28, 0x3d	; 61
    58dc:	de b7       	in	r29, 0x3e	; 62
    58de:	9b 83       	std	Y+3, r25	; 0x03
    58e0:	8a 83       	std	Y+2, r24	; 0x02
		u8 i=0;
    58e2:	19 82       	std	Y+1, r1	; 0x01
		for(i=0; loc_u8string[i]!=D_NULL;i++){
    58e4:	19 82       	std	Y+1, r1	; 0x01
    58e6:	0e c0       	rjmp	.+28     	; 0x5904 <LCD_VidWriteString+0x32>
		LCD_VidWriteData(loc_u8string[i]);
    58e8:	89 81       	ldd	r24, Y+1	; 0x01
    58ea:	28 2f       	mov	r18, r24
    58ec:	30 e0       	ldi	r19, 0x00	; 0
    58ee:	8a 81       	ldd	r24, Y+2	; 0x02
    58f0:	9b 81       	ldd	r25, Y+3	; 0x03
    58f2:	fc 01       	movw	r30, r24
    58f4:	e2 0f       	add	r30, r18
    58f6:	f3 1f       	adc	r31, r19
    58f8:	80 81       	ld	r24, Z
    58fa:	0e 94 4f 2c 	call	0x589e	; 0x589e <LCD_VidWriteData>
	#endif	
		
	}
	void LCD_VidWriteString(u8* loc_u8string){
		u8 i=0;
		for(i=0; loc_u8string[i]!=D_NULL;i++){
    58fe:	89 81       	ldd	r24, Y+1	; 0x01
    5900:	8f 5f       	subi	r24, 0xFF	; 255
    5902:	89 83       	std	Y+1, r24	; 0x01
    5904:	89 81       	ldd	r24, Y+1	; 0x01
    5906:	28 2f       	mov	r18, r24
    5908:	30 e0       	ldi	r19, 0x00	; 0
    590a:	8a 81       	ldd	r24, Y+2	; 0x02
    590c:	9b 81       	ldd	r25, Y+3	; 0x03
    590e:	fc 01       	movw	r30, r24
    5910:	e2 0f       	add	r30, r18
    5912:	f3 1f       	adc	r31, r19
    5914:	80 81       	ld	r24, Z
    5916:	88 23       	and	r24, r24
    5918:	39 f7       	brne	.-50     	; 0x58e8 <LCD_VidWriteString+0x16>
		LCD_VidWriteData(loc_u8string[i]);
		}
		
	}
    591a:	0f 90       	pop	r0
    591c:	0f 90       	pop	r0
    591e:	0f 90       	pop	r0
    5920:	cf 91       	pop	r28
    5922:	df 91       	pop	r29
    5924:	08 95       	ret

00005926 <LCD_VidWriteNumber>:
	void LCD_VidWriteNumber(s32 loc_s32number){
    5926:	ef 92       	push	r14
    5928:	ff 92       	push	r15
    592a:	0f 93       	push	r16
    592c:	1f 93       	push	r17
    592e:	df 93       	push	r29
    5930:	cf 93       	push	r28
    5932:	cd b7       	in	r28, 0x3d	; 61
    5934:	de b7       	in	r29, 0x3e	; 62
    5936:	61 97       	sbiw	r28, 0x11	; 17
    5938:	0f b6       	in	r0, 0x3f	; 63
    593a:	f8 94       	cli
    593c:	de bf       	out	0x3e, r29	; 62
    593e:	0f be       	out	0x3f, r0	; 63
    5940:	cd bf       	out	0x3d, r28	; 61
    5942:	6e 87       	std	Y+14, r22	; 0x0e
    5944:	7f 87       	std	Y+15, r23	; 0x0f
    5946:	88 8b       	std	Y+16, r24	; 0x10
    5948:	99 8b       	std	Y+17, r25	; 0x11
// NEGATIVE AND POSTIVE VALUES//

	 s32 x=loc_s32number;
    594a:	8e 85       	ldd	r24, Y+14	; 0x0e
    594c:	9f 85       	ldd	r25, Y+15	; 0x0f
    594e:	a8 89       	ldd	r26, Y+16	; 0x10
    5950:	b9 89       	ldd	r27, Y+17	; 0x11
    5952:	8a 87       	std	Y+10, r24	; 0x0a
    5954:	9b 87       	std	Y+11, r25	; 0x0b
    5956:	ac 87       	std	Y+12, r26	; 0x0c
    5958:	bd 87       	std	Y+13, r27	; 0x0d
	 s32 y=0;
    595a:	1e 82       	std	Y+6, r1	; 0x06
    595c:	1f 82       	std	Y+7, r1	; 0x07
    595e:	18 86       	std	Y+8, r1	; 0x08
    5960:	19 86       	std	Y+9, r1	; 0x09
	 s32 reversed=1;
    5962:	81 e0       	ldi	r24, 0x01	; 1
    5964:	90 e0       	ldi	r25, 0x00	; 0
    5966:	a0 e0       	ldi	r26, 0x00	; 0
    5968:	b0 e0       	ldi	r27, 0x00	; 0
    596a:	8a 83       	std	Y+2, r24	; 0x02
    596c:	9b 83       	std	Y+3, r25	; 0x03
    596e:	ac 83       	std	Y+4, r26	; 0x04
    5970:	bd 83       	std	Y+5, r27	; 0x05
	 u8 negtive_flag=0;
    5972:	19 82       	std	Y+1, r1	; 0x01
		 if(loc_s32number<0){
    5974:	8e 85       	ldd	r24, Y+14	; 0x0e
    5976:	9f 85       	ldd	r25, Y+15	; 0x0f
    5978:	a8 89       	ldd	r26, Y+16	; 0x10
    597a:	b9 89       	ldd	r27, Y+17	; 0x11
    597c:	bb 23       	and	r27, r27
    597e:	94 f4       	brge	.+36     	; 0x59a4 <LCD_VidWriteNumber+0x7e>
					 x=(loc_s32number*-1);
    5980:	8e 85       	ldd	r24, Y+14	; 0x0e
    5982:	9f 85       	ldd	r25, Y+15	; 0x0f
    5984:	a8 89       	ldd	r26, Y+16	; 0x10
    5986:	b9 89       	ldd	r27, Y+17	; 0x11
    5988:	b0 95       	com	r27
    598a:	a0 95       	com	r26
    598c:	90 95       	com	r25
    598e:	81 95       	neg	r24
    5990:	9f 4f       	sbci	r25, 0xFF	; 255
    5992:	af 4f       	sbci	r26, 0xFF	; 255
    5994:	bf 4f       	sbci	r27, 0xFF	; 255
    5996:	8a 87       	std	Y+10, r24	; 0x0a
    5998:	9b 87       	std	Y+11, r25	; 0x0b
    599a:	ac 87       	std	Y+12, r26	; 0x0c
    599c:	bd 87       	std	Y+13, r27	; 0x0d
					 negtive_flag=1;
    599e:	81 e0       	ldi	r24, 0x01	; 1
    59a0:	89 83       	std	Y+1, r24	; 0x01
    59a2:	42 c0       	rjmp	.+132    	; 0x5a28 <LCD_VidWriteNumber+0x102>
			 }

		 else if(x==0){
    59a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    59a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    59a8:	ac 85       	ldd	r26, Y+12	; 0x0c
    59aa:	bd 85       	ldd	r27, Y+13	; 0x0d
    59ac:	00 97       	sbiw	r24, 0x00	; 0
    59ae:	a1 05       	cpc	r26, r1
    59b0:	b1 05       	cpc	r27, r1
    59b2:	d1 f5       	brne	.+116    	; 0x5a28 <LCD_VidWriteNumber+0x102>
					 LCD_VidWriteData(48);
    59b4:	80 e3       	ldi	r24, 0x30	; 48
    59b6:	0e 94 4f 2c 	call	0x589e	; 0x589e <LCD_VidWriteData>
    59ba:	36 c0       	rjmp	.+108    	; 0x5a28 <LCD_VidWriteNumber+0x102>
				}
		 while(x>0){
					 reversed=(reversed*10)+(x%10);
    59bc:	8a 81       	ldd	r24, Y+2	; 0x02
    59be:	9b 81       	ldd	r25, Y+3	; 0x03
    59c0:	ac 81       	ldd	r26, Y+4	; 0x04
    59c2:	bd 81       	ldd	r27, Y+5	; 0x05
    59c4:	2a e0       	ldi	r18, 0x0A	; 10
    59c6:	30 e0       	ldi	r19, 0x00	; 0
    59c8:	40 e0       	ldi	r20, 0x00	; 0
    59ca:	50 e0       	ldi	r21, 0x00	; 0
    59cc:	bc 01       	movw	r22, r24
    59ce:	cd 01       	movw	r24, r26
    59d0:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__mulsi3>
    59d4:	7b 01       	movw	r14, r22
    59d6:	8c 01       	movw	r16, r24
    59d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    59da:	9b 85       	ldd	r25, Y+11	; 0x0b
    59dc:	ac 85       	ldd	r26, Y+12	; 0x0c
    59de:	bd 85       	ldd	r27, Y+13	; 0x0d
    59e0:	2a e0       	ldi	r18, 0x0A	; 10
    59e2:	30 e0       	ldi	r19, 0x00	; 0
    59e4:	40 e0       	ldi	r20, 0x00	; 0
    59e6:	50 e0       	ldi	r21, 0x00	; 0
    59e8:	bc 01       	movw	r22, r24
    59ea:	cd 01       	movw	r24, r26
    59ec:	0e 94 05 32 	call	0x640a	; 0x640a <__divmodsi4>
    59f0:	dc 01       	movw	r26, r24
    59f2:	cb 01       	movw	r24, r22
    59f4:	8e 0d       	add	r24, r14
    59f6:	9f 1d       	adc	r25, r15
    59f8:	a0 1f       	adc	r26, r16
    59fa:	b1 1f       	adc	r27, r17
    59fc:	8a 83       	std	Y+2, r24	; 0x02
    59fe:	9b 83       	std	Y+3, r25	; 0x03
    5a00:	ac 83       	std	Y+4, r26	; 0x04
    5a02:	bd 83       	std	Y+5, r27	; 0x05
					   x=x/10;
    5a04:	8a 85       	ldd	r24, Y+10	; 0x0a
    5a06:	9b 85       	ldd	r25, Y+11	; 0x0b
    5a08:	ac 85       	ldd	r26, Y+12	; 0x0c
    5a0a:	bd 85       	ldd	r27, Y+13	; 0x0d
    5a0c:	2a e0       	ldi	r18, 0x0A	; 10
    5a0e:	30 e0       	ldi	r19, 0x00	; 0
    5a10:	40 e0       	ldi	r20, 0x00	; 0
    5a12:	50 e0       	ldi	r21, 0x00	; 0
    5a14:	bc 01       	movw	r22, r24
    5a16:	cd 01       	movw	r24, r26
    5a18:	0e 94 05 32 	call	0x640a	; 0x640a <__divmodsi4>
    5a1c:	da 01       	movw	r26, r20
    5a1e:	c9 01       	movw	r24, r18
    5a20:	8a 87       	std	Y+10, r24	; 0x0a
    5a22:	9b 87       	std	Y+11, r25	; 0x0b
    5a24:	ac 87       	std	Y+12, r26	; 0x0c
    5a26:	bd 87       	std	Y+13, r27	; 0x0d
			 }

		 else if(x==0){
					 LCD_VidWriteData(48);
				}
		 while(x>0){
    5a28:	8a 85       	ldd	r24, Y+10	; 0x0a
    5a2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    5a2c:	ac 85       	ldd	r26, Y+12	; 0x0c
    5a2e:	bd 85       	ldd	r27, Y+13	; 0x0d
    5a30:	18 16       	cp	r1, r24
    5a32:	19 06       	cpc	r1, r25
    5a34:	1a 06       	cpc	r1, r26
    5a36:	1b 06       	cpc	r1, r27
    5a38:	0c f2       	brlt	.-126    	; 0x59bc <LCD_VidWriteNumber+0x96>
					 reversed=(reversed*10)+(x%10);
					   x=x/10;
				   }
		 if(loc_s32number<0){
    5a3a:	8e 85       	ldd	r24, Y+14	; 0x0e
    5a3c:	9f 85       	ldd	r25, Y+15	; 0x0f
    5a3e:	a8 89       	ldd	r26, Y+16	; 0x10
    5a40:	b9 89       	ldd	r27, Y+17	; 0x11
    5a42:	bb 23       	and	r27, r27
    5a44:	84 f4       	brge	.+32     	; 0x5a66 <LCD_VidWriteNumber+0x140>
					 x=(loc_s32number*-1);
    5a46:	8e 85       	ldd	r24, Y+14	; 0x0e
    5a48:	9f 85       	ldd	r25, Y+15	; 0x0f
    5a4a:	a8 89       	ldd	r26, Y+16	; 0x10
    5a4c:	b9 89       	ldd	r27, Y+17	; 0x11
    5a4e:	b0 95       	com	r27
    5a50:	a0 95       	com	r26
    5a52:	90 95       	com	r25
    5a54:	81 95       	neg	r24
    5a56:	9f 4f       	sbci	r25, 0xFF	; 255
    5a58:	af 4f       	sbci	r26, 0xFF	; 255
    5a5a:	bf 4f       	sbci	r27, 0xFF	; 255
    5a5c:	8a 87       	std	Y+10, r24	; 0x0a
    5a5e:	9b 87       	std	Y+11, r25	; 0x0b
    5a60:	ac 87       	std	Y+12, r26	; 0x0c
    5a62:	bd 87       	std	Y+13, r27	; 0x0d
    5a64:	4a c0       	rjmp	.+148    	; 0x5afa <LCD_VidWriteNumber+0x1d4>
		 }
		 else{
					x=loc_s32number;
    5a66:	8e 85       	ldd	r24, Y+14	; 0x0e
    5a68:	9f 85       	ldd	r25, Y+15	; 0x0f
    5a6a:	a8 89       	ldd	r26, Y+16	; 0x10
    5a6c:	b9 89       	ldd	r27, Y+17	; 0x11
    5a6e:	8a 87       	std	Y+10, r24	; 0x0a
    5a70:	9b 87       	std	Y+11, r25	; 0x0b
    5a72:	ac 87       	std	Y+12, r26	; 0x0c
    5a74:	bd 87       	std	Y+13, r27	; 0x0d
    5a76:	41 c0       	rjmp	.+130    	; 0x5afa <LCD_VidWriteNumber+0x1d4>
			 }
		 while(x>0){
					y=reversed%10;
    5a78:	8a 81       	ldd	r24, Y+2	; 0x02
    5a7a:	9b 81       	ldd	r25, Y+3	; 0x03
    5a7c:	ac 81       	ldd	r26, Y+4	; 0x04
    5a7e:	bd 81       	ldd	r27, Y+5	; 0x05
    5a80:	2a e0       	ldi	r18, 0x0A	; 10
    5a82:	30 e0       	ldi	r19, 0x00	; 0
    5a84:	40 e0       	ldi	r20, 0x00	; 0
    5a86:	50 e0       	ldi	r21, 0x00	; 0
    5a88:	bc 01       	movw	r22, r24
    5a8a:	cd 01       	movw	r24, r26
    5a8c:	0e 94 05 32 	call	0x640a	; 0x640a <__divmodsi4>
    5a90:	dc 01       	movw	r26, r24
    5a92:	cb 01       	movw	r24, r22
    5a94:	8e 83       	std	Y+6, r24	; 0x06
    5a96:	9f 83       	std	Y+7, r25	; 0x07
    5a98:	a8 87       	std	Y+8, r26	; 0x08
    5a9a:	b9 87       	std	Y+9, r27	; 0x09
					if(negtive_flag==1){
    5a9c:	89 81       	ldd	r24, Y+1	; 0x01
    5a9e:	81 30       	cpi	r24, 0x01	; 1
    5aa0:	21 f4       	brne	.+8      	; 0x5aaa <LCD_VidWriteNumber+0x184>
					 LCD_VidWriteData('-');
    5aa2:	8d e2       	ldi	r24, 0x2D	; 45
    5aa4:	0e 94 4f 2c 	call	0x589e	; 0x589e <LCD_VidWriteData>
					  negtive_flag=0;
    5aa8:	19 82       	std	Y+1, r1	; 0x01
									}
					LCD_VidWriteData(y+48);
    5aaa:	8e 81       	ldd	r24, Y+6	; 0x06
    5aac:	80 5d       	subi	r24, 0xD0	; 208
    5aae:	0e 94 4f 2c 	call	0x589e	; 0x589e <LCD_VidWriteData>
					reversed=reversed/10;
    5ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    5ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    5ab6:	ac 81       	ldd	r26, Y+4	; 0x04
    5ab8:	bd 81       	ldd	r27, Y+5	; 0x05
    5aba:	2a e0       	ldi	r18, 0x0A	; 10
    5abc:	30 e0       	ldi	r19, 0x00	; 0
    5abe:	40 e0       	ldi	r20, 0x00	; 0
    5ac0:	50 e0       	ldi	r21, 0x00	; 0
    5ac2:	bc 01       	movw	r22, r24
    5ac4:	cd 01       	movw	r24, r26
    5ac6:	0e 94 05 32 	call	0x640a	; 0x640a <__divmodsi4>
    5aca:	da 01       	movw	r26, r20
    5acc:	c9 01       	movw	r24, r18
    5ace:	8a 83       	std	Y+2, r24	; 0x02
    5ad0:	9b 83       	std	Y+3, r25	; 0x03
    5ad2:	ac 83       	std	Y+4, r26	; 0x04
    5ad4:	bd 83       	std	Y+5, r27	; 0x05
					x=x/10;
    5ad6:	8a 85       	ldd	r24, Y+10	; 0x0a
    5ad8:	9b 85       	ldd	r25, Y+11	; 0x0b
    5ada:	ac 85       	ldd	r26, Y+12	; 0x0c
    5adc:	bd 85       	ldd	r27, Y+13	; 0x0d
    5ade:	2a e0       	ldi	r18, 0x0A	; 10
    5ae0:	30 e0       	ldi	r19, 0x00	; 0
    5ae2:	40 e0       	ldi	r20, 0x00	; 0
    5ae4:	50 e0       	ldi	r21, 0x00	; 0
    5ae6:	bc 01       	movw	r22, r24
    5ae8:	cd 01       	movw	r24, r26
    5aea:	0e 94 05 32 	call	0x640a	; 0x640a <__divmodsi4>
    5aee:	da 01       	movw	r26, r20
    5af0:	c9 01       	movw	r24, r18
    5af2:	8a 87       	std	Y+10, r24	; 0x0a
    5af4:	9b 87       	std	Y+11, r25	; 0x0b
    5af6:	ac 87       	std	Y+12, r26	; 0x0c
    5af8:	bd 87       	std	Y+13, r27	; 0x0d
					 x=(loc_s32number*-1);
		 }
		 else{
					x=loc_s32number;
			 }
		 while(x>0){
    5afa:	8a 85       	ldd	r24, Y+10	; 0x0a
    5afc:	9b 85       	ldd	r25, Y+11	; 0x0b
    5afe:	ac 85       	ldd	r26, Y+12	; 0x0c
    5b00:	bd 85       	ldd	r27, Y+13	; 0x0d
    5b02:	18 16       	cp	r1, r24
    5b04:	19 06       	cpc	r1, r25
    5b06:	1a 06       	cpc	r1, r26
    5b08:	1b 06       	cpc	r1, r27
    5b0a:	0c f4       	brge	.+2      	; 0x5b0e <LCD_VidWriteNumber+0x1e8>
    5b0c:	b5 cf       	rjmp	.-150    	; 0x5a78 <LCD_VidWriteNumber+0x152>
									}
					LCD_VidWriteData(y+48);
					reversed=reversed/10;
					x=x/10;
		 }
	}
    5b0e:	61 96       	adiw	r28, 0x11	; 17
    5b10:	0f b6       	in	r0, 0x3f	; 63
    5b12:	f8 94       	cli
    5b14:	de bf       	out	0x3e, r29	; 62
    5b16:	0f be       	out	0x3f, r0	; 63
    5b18:	cd bf       	out	0x3d, r28	; 61
    5b1a:	cf 91       	pop	r28
    5b1c:	df 91       	pop	r29
    5b1e:	1f 91       	pop	r17
    5b20:	0f 91       	pop	r16
    5b22:	ff 90       	pop	r15
    5b24:	ef 90       	pop	r14
    5b26:	08 95       	ret

00005b28 <LCD_VidSetDdram>:


	void LCD_VidSetDdram(u8 loc_u8row,u8 loc_u8col){
    5b28:	df 93       	push	r29
    5b2a:	cf 93       	push	r28
    5b2c:	00 d0       	rcall	.+0      	; 0x5b2e <LCD_VidSetDdram+0x6>
    5b2e:	cd b7       	in	r28, 0x3d	; 61
    5b30:	de b7       	in	r29, 0x3e	; 62
    5b32:	89 83       	std	Y+1, r24	; 0x01
    5b34:	6a 83       	std	Y+2, r22	; 0x02
		if(1==loc_u8row){
    5b36:	89 81       	ldd	r24, Y+1	; 0x01
    5b38:	81 30       	cpi	r24, 0x01	; 1
    5b3a:	29 f4       	brne	.+10     	; 0x5b46 <LCD_VidSetDdram+0x1e>
			LCD_VidWriteCommand((127+loc_u8col));
    5b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    5b3e:	81 58       	subi	r24, 0x81	; 129
    5b40:	0e 94 35 2c 	call	0x586a	; 0x586a <LCD_VidWriteCommand>
    5b44:	07 c0       	rjmp	.+14     	; 0x5b54 <LCD_VidSetDdram+0x2c>
		}
		else if(2==loc_u8row){
    5b46:	89 81       	ldd	r24, Y+1	; 0x01
    5b48:	82 30       	cpi	r24, 0x02	; 2
    5b4a:	21 f4       	brne	.+8      	; 0x5b54 <LCD_VidSetDdram+0x2c>

			LCD_VidWriteCommand((127+64+loc_u8col));
    5b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    5b4e:	81 54       	subi	r24, 0x41	; 65
    5b50:	0e 94 35 2c 	call	0x586a	; 0x586a <LCD_VidWriteCommand>
		}
	}
    5b54:	0f 90       	pop	r0
    5b56:	0f 90       	pop	r0
    5b58:	cf 91       	pop	r28
    5b5a:	df 91       	pop	r29
    5b5c:	08 95       	ret

00005b5e <UART_VidSetCallBackReceive>:
	#include "UART_register.h"
	#include "UART_interface.h"
	//HTO5//

	static  void (*u8GlobalPointerReceive)(u8 Global_u8UdrAdress);
	void UART_VidSetCallBackReceive(void(*u8LocalPointerReceive)(u8 LOC_u8UdrAdress)){
    5b5e:	df 93       	push	r29
    5b60:	cf 93       	push	r28
    5b62:	00 d0       	rcall	.+0      	; 0x5b64 <UART_VidSetCallBackReceive+0x6>
    5b64:	cd b7       	in	r28, 0x3d	; 61
    5b66:	de b7       	in	r29, 0x3e	; 62
    5b68:	9a 83       	std	Y+2, r25	; 0x02
    5b6a:	89 83       	std	Y+1, r24	; 0x01

		if(u8LocalPointerReceive!=D_NULL){
    5b6c:	89 81       	ldd	r24, Y+1	; 0x01
    5b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b70:	00 97       	sbiw	r24, 0x00	; 0
    5b72:	31 f0       	breq	.+12     	; 0x5b80 <UART_VidSetCallBackReceive+0x22>
			u8GlobalPointerReceive=u8LocalPointerReceive;
    5b74:	89 81       	ldd	r24, Y+1	; 0x01
    5b76:	9a 81       	ldd	r25, Y+2	; 0x02
    5b78:	90 93 7f 07 	sts	0x077F, r25
    5b7c:	80 93 7e 07 	sts	0x077E, r24
		}

	}
    5b80:	0f 90       	pop	r0
    5b82:	0f 90       	pop	r0
    5b84:	cf 91       	pop	r28
    5b86:	df 91       	pop	r29
    5b88:	08 95       	ret

00005b8a <UART_VidSetCallBackSend>:

	static void (*VidGlobalPointerSend)(u8 u8GlOBAL_UDRTAdress);
	void UART_VidSetCallBackSend(void (*VidLocalPointerSend)(u8 u8LOC_UDRTAdress)){
    5b8a:	df 93       	push	r29
    5b8c:	cf 93       	push	r28
    5b8e:	00 d0       	rcall	.+0      	; 0x5b90 <UART_VidSetCallBackSend+0x6>
    5b90:	cd b7       	in	r28, 0x3d	; 61
    5b92:	de b7       	in	r29, 0x3e	; 62
    5b94:	9a 83       	std	Y+2, r25	; 0x02
    5b96:	89 83       	std	Y+1, r24	; 0x01

		if(VidLocalPointerSend!=D_NULL){
    5b98:	89 81       	ldd	r24, Y+1	; 0x01
    5b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    5b9c:	00 97       	sbiw	r24, 0x00	; 0
    5b9e:	31 f0       	breq	.+12     	; 0x5bac <UART_VidSetCallBackSend+0x22>
			VidGlobalPointerSend=VidLocalPointerSend;
    5ba0:	89 81       	ldd	r24, Y+1	; 0x01
    5ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ba4:	90 93 81 07 	sts	0x0781, r25
    5ba8:	80 93 80 07 	sts	0x0780, r24
		}

	}
    5bac:	0f 90       	pop	r0
    5bae:	0f 90       	pop	r0
    5bb0:	cf 91       	pop	r28
    5bb2:	df 91       	pop	r29
    5bb4:	08 95       	ret

00005bb6 <UART_VidInit>:
	void UART_VidInit(void){
    5bb6:	df 93       	push	r29
    5bb8:	cf 93       	push	r28
    5bba:	0f 92       	push	r0
    5bbc:	cd b7       	in	r28, 0x3d	; 61
    5bbe:	de b7       	in	r29, 0x3e	; 62

		u8 x=0;
    5bc0:	19 82       	std	Y+1, r1	; 0x01
	#if UART_MODE==POOLING
		UBRRL=51;//for boud rate//
    5bc2:	e9 e2       	ldi	r30, 0x29	; 41
    5bc4:	f0 e0       	ldi	r31, 0x00	; 0
    5bc6:	83 e3       	ldi	r24, 0x33	; 51
    5bc8:	80 83       	st	Z, r24
		UBRRH=0;
    5bca:	e0 e4       	ldi	r30, 0x40	; 64
    5bcc:	f0 e0       	ldi	r31, 0x00	; 0
    5bce:	10 82       	st	Z, r1
		SET_BIT(x,1);
    5bd0:	89 81       	ldd	r24, Y+1	; 0x01
    5bd2:	82 60       	ori	r24, 0x02	; 2
    5bd4:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(x,2);
    5bd6:	89 81       	ldd	r24, Y+1	; 0x01
    5bd8:	84 60       	ori	r24, 0x04	; 4
    5bda:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(x,7);
    5bdc:	89 81       	ldd	r24, Y+1	; 0x01
    5bde:	80 68       	ori	r24, 0x80	; 128
    5be0:	89 83       	std	Y+1, r24	; 0x01
		UCSRC=x;
    5be2:	e0 e4       	ldi	r30, 0x40	; 64
    5be4:	f0 e0       	ldi	r31, 0x00	; 0
    5be6:	89 81       	ldd	r24, Y+1	; 0x01
    5be8:	80 83       	st	Z, r24
	SET_BIT(UCSRB,PIN3);//ENABLE TRANSMITTER//
    5bea:	aa e2       	ldi	r26, 0x2A	; 42
    5bec:	b0 e0       	ldi	r27, 0x00	; 0
    5bee:	ea e2       	ldi	r30, 0x2A	; 42
    5bf0:	f0 e0       	ldi	r31, 0x00	; 0
    5bf2:	80 81       	ld	r24, Z
    5bf4:	88 60       	ori	r24, 0x08	; 8
    5bf6:	8c 93       	st	X, r24
	SET_BIT(UCSRB,PIN4);//ENABLE RECIVER//
    5bf8:	aa e2       	ldi	r26, 0x2A	; 42
    5bfa:	b0 e0       	ldi	r27, 0x00	; 0
    5bfc:	ea e2       	ldi	r30, 0x2A	; 42
    5bfe:	f0 e0       	ldi	r31, 0x00	; 0
    5c00:	80 81       	ld	r24, Z
    5c02:	80 61       	ori	r24, 0x10	; 16
    5c04:	8c 93       	st	X, r24
	SET_BIT(UCSRB,PIN3);
	SET_BIT(UCSRB,PIN4);
	SET_BIT(UCSRB,PIN6);//ENABLE TRANSMITTER   interrupt//
	SET_BIT(UCSRB,PIN7);//ENABLE RECIVER interrupt//
	#endif
	}
    5c06:	0f 90       	pop	r0
    5c08:	cf 91       	pop	r28
    5c0a:	df 91       	pop	r29
    5c0c:	08 95       	ret

00005c0e <UART_VidSend>:
	void UART_VidSend(u8 *LOC_u8Data){
    5c0e:	df 93       	push	r29
    5c10:	cf 93       	push	r28
    5c12:	00 d0       	rcall	.+0      	; 0x5c14 <UART_VidSend+0x6>
    5c14:	0f 92       	push	r0
    5c16:	cd b7       	in	r28, 0x3d	; 61
    5c18:	de b7       	in	r29, 0x3e	; 62
    5c1a:	9b 83       	std	Y+3, r25	; 0x03
    5c1c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    5c1e:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;LOC_u8Data[i]!=D_NULL;i++){
    5c20:	19 82       	std	Y+1, r1	; 0x01
    5c22:	1b c0       	rjmp	.+54     	; 0x5c5a <UART_VidSend+0x4c>
		while(0==GET_BIT(UCSRA,PIN5));
    5c24:	eb e2       	ldi	r30, 0x2B	; 43
    5c26:	f0 e0       	ldi	r31, 0x00	; 0
    5c28:	80 81       	ld	r24, Z
    5c2a:	82 95       	swap	r24
    5c2c:	86 95       	lsr	r24
    5c2e:	87 70       	andi	r24, 0x07	; 7
    5c30:	88 2f       	mov	r24, r24
    5c32:	90 e0       	ldi	r25, 0x00	; 0
    5c34:	81 70       	andi	r24, 0x01	; 1
    5c36:	90 70       	andi	r25, 0x00	; 0
    5c38:	00 97       	sbiw	r24, 0x00	; 0
    5c3a:	a1 f3       	breq	.-24     	; 0x5c24 <UART_VidSend+0x16>
		UDR_T=LOC_u8Data[i];
    5c3c:	ac e2       	ldi	r26, 0x2C	; 44
    5c3e:	b0 e0       	ldi	r27, 0x00	; 0
    5c40:	89 81       	ldd	r24, Y+1	; 0x01
    5c42:	28 2f       	mov	r18, r24
    5c44:	30 e0       	ldi	r19, 0x00	; 0
    5c46:	8a 81       	ldd	r24, Y+2	; 0x02
    5c48:	9b 81       	ldd	r25, Y+3	; 0x03
    5c4a:	fc 01       	movw	r30, r24
    5c4c:	e2 0f       	add	r30, r18
    5c4e:	f3 1f       	adc	r31, r19
    5c50:	80 81       	ld	r24, Z
    5c52:	8c 93       	st	X, r24
	SET_BIT(UCSRB,PIN7);//ENABLE RECIVER interrupt//
	#endif
	}
	void UART_VidSend(u8 *LOC_u8Data){
	u8 i=0;
	for(i=0;LOC_u8Data[i]!=D_NULL;i++){
    5c54:	89 81       	ldd	r24, Y+1	; 0x01
    5c56:	8f 5f       	subi	r24, 0xFF	; 255
    5c58:	89 83       	std	Y+1, r24	; 0x01
    5c5a:	89 81       	ldd	r24, Y+1	; 0x01
    5c5c:	28 2f       	mov	r18, r24
    5c5e:	30 e0       	ldi	r19, 0x00	; 0
    5c60:	8a 81       	ldd	r24, Y+2	; 0x02
    5c62:	9b 81       	ldd	r25, Y+3	; 0x03
    5c64:	fc 01       	movw	r30, r24
    5c66:	e2 0f       	add	r30, r18
    5c68:	f3 1f       	adc	r31, r19
    5c6a:	80 81       	ld	r24, Z
    5c6c:	88 23       	and	r24, r24
    5c6e:	d1 f6       	brne	.-76     	; 0x5c24 <UART_VidSend+0x16>
		while(0==GET_BIT(UCSRA,PIN5));
		UDR_T=LOC_u8Data[i];
		}
	}
    5c70:	0f 90       	pop	r0
    5c72:	0f 90       	pop	r0
    5c74:	0f 90       	pop	r0
    5c76:	cf 91       	pop	r28
    5c78:	df 91       	pop	r29
    5c7a:	08 95       	ret

00005c7c <UART_VidReceive>:
	u8 UART_VidReceive(u8 *PointerToUartData){
    5c7c:	df 93       	push	r29
    5c7e:	cf 93       	push	r28
    5c80:	00 d0       	rcall	.+0      	; 0x5c82 <UART_VidReceive+0x6>
    5c82:	0f 92       	push	r0
    5c84:	cd b7       	in	r28, 0x3d	; 61
    5c86:	de b7       	in	r29, 0x3e	; 62
    5c88:	9b 83       	std	Y+3, r25	; 0x03
    5c8a:	8a 83       	std	Y+2, r24	; 0x02
		u8 flag=0;
    5c8c:	19 82       	std	Y+1, r1	; 0x01

		if(		GET_BIT(UCSRA,PIN7)		==		1)
    5c8e:	eb e2       	ldi	r30, 0x2B	; 43
    5c90:	f0 e0       	ldi	r31, 0x00	; 0
    5c92:	80 81       	ld	r24, Z
    5c94:	88 1f       	adc	r24, r24
    5c96:	88 27       	eor	r24, r24
    5c98:	88 1f       	adc	r24, r24
    5c9a:	81 30       	cpi	r24, 0x01	; 1
    5c9c:	41 f4       	brne	.+16     	; 0x5cae <UART_VidReceive+0x32>
		{
			*PointerToUartData=UDR_R;
    5c9e:	ec e2       	ldi	r30, 0x2C	; 44
    5ca0:	f0 e0       	ldi	r31, 0x00	; 0
    5ca2:	80 81       	ld	r24, Z
    5ca4:	ea 81       	ldd	r30, Y+2	; 0x02
    5ca6:	fb 81       	ldd	r31, Y+3	; 0x03
    5ca8:	80 83       	st	Z, r24
			flag=1;
    5caa:	81 e0       	ldi	r24, 0x01	; 1
    5cac:	89 83       	std	Y+1, r24	; 0x01
		}
		return flag;
    5cae:	89 81       	ldd	r24, Y+1	; 0x01
	}
    5cb0:	0f 90       	pop	r0
    5cb2:	0f 90       	pop	r0
    5cb4:	0f 90       	pop	r0
    5cb6:	cf 91       	pop	r28
    5cb8:	df 91       	pop	r29
    5cba:	08 95       	ret

00005cbc <__vector_13>:



	//RX COmplete//
	void __vector_13(void){
    5cbc:	1f 92       	push	r1
    5cbe:	0f 92       	push	r0
    5cc0:	0f b6       	in	r0, 0x3f	; 63
    5cc2:	0f 92       	push	r0
    5cc4:	11 24       	eor	r1, r1
    5cc6:	2f 93       	push	r18
    5cc8:	3f 93       	push	r19
    5cca:	4f 93       	push	r20
    5ccc:	5f 93       	push	r21
    5cce:	6f 93       	push	r22
    5cd0:	7f 93       	push	r23
    5cd2:	8f 93       	push	r24
    5cd4:	9f 93       	push	r25
    5cd6:	af 93       	push	r26
    5cd8:	bf 93       	push	r27
    5cda:	ef 93       	push	r30
    5cdc:	ff 93       	push	r31
    5cde:	df 93       	push	r29
    5ce0:	cf 93       	push	r28
    5ce2:	cd b7       	in	r28, 0x3d	; 61
    5ce4:	de b7       	in	r29, 0x3e	; 62

		if(u8GlobalPointerReceive!=D_NULL){
    5ce6:	80 91 7e 07 	lds	r24, 0x077E
    5cea:	90 91 7f 07 	lds	r25, 0x077F
    5cee:	00 97       	sbiw	r24, 0x00	; 0
    5cf0:	41 f0       	breq	.+16     	; 0x5d02 <__vector_13+0x46>

			u8GlobalPointerReceive(UDR_R);
    5cf2:	e0 91 7e 07 	lds	r30, 0x077E
    5cf6:	f0 91 7f 07 	lds	r31, 0x077F
    5cfa:	ac e2       	ldi	r26, 0x2C	; 44
    5cfc:	b0 e0       	ldi	r27, 0x00	; 0
    5cfe:	8c 91       	ld	r24, X
    5d00:	09 95       	icall
		}
	}
    5d02:	cf 91       	pop	r28
    5d04:	df 91       	pop	r29
    5d06:	ff 91       	pop	r31
    5d08:	ef 91       	pop	r30
    5d0a:	bf 91       	pop	r27
    5d0c:	af 91       	pop	r26
    5d0e:	9f 91       	pop	r25
    5d10:	8f 91       	pop	r24
    5d12:	7f 91       	pop	r23
    5d14:	6f 91       	pop	r22
    5d16:	5f 91       	pop	r21
    5d18:	4f 91       	pop	r20
    5d1a:	3f 91       	pop	r19
    5d1c:	2f 91       	pop	r18
    5d1e:	0f 90       	pop	r0
    5d20:	0f be       	out	0x3f, r0	; 63
    5d22:	0f 90       	pop	r0
    5d24:	1f 90       	pop	r1
    5d26:	18 95       	reti

00005d28 <__vector_15>:
	//TX COmplete//
	void __vector_15(void){
    5d28:	1f 92       	push	r1
    5d2a:	0f 92       	push	r0
    5d2c:	0f b6       	in	r0, 0x3f	; 63
    5d2e:	0f 92       	push	r0
    5d30:	11 24       	eor	r1, r1
    5d32:	2f 93       	push	r18
    5d34:	3f 93       	push	r19
    5d36:	4f 93       	push	r20
    5d38:	5f 93       	push	r21
    5d3a:	6f 93       	push	r22
    5d3c:	7f 93       	push	r23
    5d3e:	8f 93       	push	r24
    5d40:	9f 93       	push	r25
    5d42:	af 93       	push	r26
    5d44:	bf 93       	push	r27
    5d46:	ef 93       	push	r30
    5d48:	ff 93       	push	r31
    5d4a:	df 93       	push	r29
    5d4c:	cf 93       	push	r28
    5d4e:	cd b7       	in	r28, 0x3d	; 61
    5d50:	de b7       	in	r29, 0x3e	; 62

		if(VidGlobalPointerSend!=D_NULL){
    5d52:	80 91 80 07 	lds	r24, 0x0780
    5d56:	90 91 81 07 	lds	r25, 0x0781
    5d5a:	00 97       	sbiw	r24, 0x00	; 0
    5d5c:	41 f0       	breq	.+16     	; 0x5d6e <__vector_15+0x46>
			VidGlobalPointerSend(UDR_T);
    5d5e:	e0 91 80 07 	lds	r30, 0x0780
    5d62:	f0 91 81 07 	lds	r31, 0x0781
    5d66:	ac e2       	ldi	r26, 0x2C	; 44
    5d68:	b0 e0       	ldi	r27, 0x00	; 0
    5d6a:	8c 91       	ld	r24, X
    5d6c:	09 95       	icall
		}

	}
    5d6e:	cf 91       	pop	r28
    5d70:	df 91       	pop	r29
    5d72:	ff 91       	pop	r31
    5d74:	ef 91       	pop	r30
    5d76:	bf 91       	pop	r27
    5d78:	af 91       	pop	r26
    5d7a:	9f 91       	pop	r25
    5d7c:	8f 91       	pop	r24
    5d7e:	7f 91       	pop	r23
    5d80:	6f 91       	pop	r22
    5d82:	5f 91       	pop	r21
    5d84:	4f 91       	pop	r20
    5d86:	3f 91       	pop	r19
    5d88:	2f 91       	pop	r18
    5d8a:	0f 90       	pop	r0
    5d8c:	0f be       	out	0x3f, r0	; 63
    5d8e:	0f 90       	pop	r0
    5d90:	1f 90       	pop	r1
    5d92:	18 95       	reti

00005d94 <__vector_14>:


	//DATA REGISTER EMPTY//
	void __vector_14(void){
    5d94:	1f 92       	push	r1
    5d96:	0f 92       	push	r0
    5d98:	0f b6       	in	r0, 0x3f	; 63
    5d9a:	0f 92       	push	r0
    5d9c:	11 24       	eor	r1, r1
    5d9e:	df 93       	push	r29
    5da0:	cf 93       	push	r28
    5da2:	cd b7       	in	r28, 0x3d	; 61
    5da4:	de b7       	in	r29, 0x3e	; 62
		}
    5da6:	cf 91       	pop	r28
    5da8:	df 91       	pop	r29
    5daa:	0f 90       	pop	r0
    5dac:	0f be       	out	0x3f, r0	; 63
    5dae:	0f 90       	pop	r0
    5db0:	1f 90       	pop	r1
    5db2:	18 95       	reti

00005db4 <main>:
SemaphoreHandle_t SemaphoreCheck=NULL;



int main(void)
{
    5db4:	af 92       	push	r10
    5db6:	bf 92       	push	r11
    5db8:	cf 92       	push	r12
    5dba:	df 92       	push	r13
    5dbc:	ef 92       	push	r14
    5dbe:	ff 92       	push	r15
    5dc0:	0f 93       	push	r16
    5dc2:	df 93       	push	r29
    5dc4:	cf 93       	push	r28
    5dc6:	cd b7       	in	r28, 0x3d	; 61
    5dc8:	de b7       	in	r29, 0x3e	; 62

	RTOS2_VoidInitializationsTheHardWareComponets(); //Initialize The Component
    5dca:	0e 94 a1 31 	call	0x6342	; 0x6342 <RTOS2_VoidInitializationsTheHardWareComponets>


	EventGroupHandleForTheSystem=xEventGroupCreate();// Create The Event Group
    5dce:	0e 94 65 09 	call	0x12ca	; 0x12ca <xEventGroupCreate>
    5dd2:	90 93 8f 07 	sts	0x078F, r25
    5dd6:	80 93 8e 07 	sts	0x078E, r24

	SemaphoreCheck=xSemaphoreCreateBinary();// Create The Semaphore
    5dda:	81 e0       	ldi	r24, 0x01	; 1
    5ddc:	60 e0       	ldi	r22, 0x00	; 0
    5dde:	43 e0       	ldi	r20, 0x03	; 3
    5de0:	0e 94 83 12 	call	0x2506	; 0x2506 <xQueueGenericCreate>
    5de4:	90 93 83 07 	sts	0x0783, r25
    5de8:	80 93 82 07 	sts	0x0782, r24



	xTaskCreate(TASK2_VoidAlarmingEnable,"Alarming",100,NULL,5,NULL);//Alarming Task  PR :5
    5dec:	8e eb       	ldi	r24, 0xBE	; 190
    5dee:	9f e2       	ldi	r25, 0x2F	; 47
    5df0:	2a ea       	ldi	r18, 0xAA	; 170
    5df2:	30 e0       	ldi	r19, 0x00	; 0
    5df4:	b9 01       	movw	r22, r18
    5df6:	44 e6       	ldi	r20, 0x64	; 100
    5df8:	50 e0       	ldi	r21, 0x00	; 0
    5dfa:	20 e0       	ldi	r18, 0x00	; 0
    5dfc:	30 e0       	ldi	r19, 0x00	; 0
    5dfe:	05 e0       	ldi	r16, 0x05	; 5
    5e00:	ee 24       	eor	r14, r14
    5e02:	ff 24       	eor	r15, r15
    5e04:	cc 24       	eor	r12, r12
    5e06:	dd 24       	eor	r13, r13
    5e08:	aa 24       	eor	r10, r10
    5e0a:	bb 24       	eor	r11, r11
    5e0c:	0e 94 a9 19 	call	0x3352	; 0x3352 <xTaskGenericCreate>

	xTaskCreate(TASK3_VoidCheckingAboutSystemTempertaure,"Checking",100,NULL,4,NULL);//Check_Task;  PR :4
    5e10:	82 ef       	ldi	r24, 0xF2	; 242
    5e12:	9f e2       	ldi	r25, 0x2F	; 47
    5e14:	23 eb       	ldi	r18, 0xB3	; 179
    5e16:	30 e0       	ldi	r19, 0x00	; 0
    5e18:	b9 01       	movw	r22, r18
    5e1a:	44 e6       	ldi	r20, 0x64	; 100
    5e1c:	50 e0       	ldi	r21, 0x00	; 0
    5e1e:	20 e0       	ldi	r18, 0x00	; 0
    5e20:	30 e0       	ldi	r19, 0x00	; 0
    5e22:	04 e0       	ldi	r16, 0x04	; 4
    5e24:	ee 24       	eor	r14, r14
    5e26:	ff 24       	eor	r15, r15
    5e28:	cc 24       	eor	r12, r12
    5e2a:	dd 24       	eor	r13, r13
    5e2c:	aa 24       	eor	r10, r10
    5e2e:	bb 24       	eor	r11, r11
    5e30:	0e 94 a9 19 	call	0x3352	; 0x3352 <xTaskGenericCreate>

	xTaskCreate(TASK4_VoidResponsibleAboutTheTerminal,"UartTerminal",150,NULL,3,NULL);//Terminal;  PR :3
    5e34:	85 e4       	ldi	r24, 0x45	; 69
    5e36:	90 e3       	ldi	r25, 0x30	; 48
    5e38:	2c eb       	ldi	r18, 0xBC	; 188
    5e3a:	30 e0       	ldi	r19, 0x00	; 0
    5e3c:	b9 01       	movw	r22, r18
    5e3e:	46 e9       	ldi	r20, 0x96	; 150
    5e40:	50 e0       	ldi	r21, 0x00	; 0
    5e42:	20 e0       	ldi	r18, 0x00	; 0
    5e44:	30 e0       	ldi	r19, 0x00	; 0
    5e46:	03 e0       	ldi	r16, 0x03	; 3
    5e48:	ee 24       	eor	r14, r14
    5e4a:	ff 24       	eor	r15, r15
    5e4c:	cc 24       	eor	r12, r12
    5e4e:	dd 24       	eor	r13, r13
    5e50:	aa 24       	eor	r10, r10
    5e52:	bb 24       	eor	r11, r11
    5e54:	0e 94 a9 19 	call	0x3352	; 0x3352 <xTaskGenericCreate>

	xTaskCreate(TASK1_VoidGetTheTemperatureReading,"TemperatureTask",150,NULL,2,NULL);//Temp_Task;  PR :2
    5e58:	8e e5       	ldi	r24, 0x5E	; 94
    5e5a:	9f e2       	ldi	r25, 0x2F	; 47
    5e5c:	29 ec       	ldi	r18, 0xC9	; 201
    5e5e:	30 e0       	ldi	r19, 0x00	; 0
    5e60:	b9 01       	movw	r22, r18
    5e62:	46 e9       	ldi	r20, 0x96	; 150
    5e64:	50 e0       	ldi	r21, 0x00	; 0
    5e66:	20 e0       	ldi	r18, 0x00	; 0
    5e68:	30 e0       	ldi	r19, 0x00	; 0
    5e6a:	02 e0       	ldi	r16, 0x02	; 2
    5e6c:	ee 24       	eor	r14, r14
    5e6e:	ff 24       	eor	r15, r15
    5e70:	cc 24       	eor	r12, r12
    5e72:	dd 24       	eor	r13, r13
    5e74:	aa 24       	eor	r10, r10
    5e76:	bb 24       	eor	r11, r11
    5e78:	0e 94 a9 19 	call	0x3352	; 0x3352 <xTaskGenericCreate>

	xTaskCreate(TASK5_VoidDisplayAndExcuteAllEvents,"DisplayTask",200,NULL,1,NULL);//Display_Task;  PR :1
    5e7c:	80 ee       	ldi	r24, 0xE0	; 224
    5e7e:	90 e3       	ldi	r25, 0x30	; 48
    5e80:	29 ed       	ldi	r18, 0xD9	; 217
    5e82:	30 e0       	ldi	r19, 0x00	; 0
    5e84:	b9 01       	movw	r22, r18
    5e86:	48 ec       	ldi	r20, 0xC8	; 200
    5e88:	50 e0       	ldi	r21, 0x00	; 0
    5e8a:	20 e0       	ldi	r18, 0x00	; 0
    5e8c:	30 e0       	ldi	r19, 0x00	; 0
    5e8e:	01 e0       	ldi	r16, 0x01	; 1
    5e90:	ee 24       	eor	r14, r14
    5e92:	ff 24       	eor	r15, r15
    5e94:	cc 24       	eor	r12, r12
    5e96:	dd 24       	eor	r13, r13
    5e98:	aa 24       	eor	r10, r10
    5e9a:	bb 24       	eor	r11, r11
    5e9c:	0e 94 a9 19 	call	0x3352	; 0x3352 <xTaskGenericCreate>





	vTaskStartScheduler();
    5ea0:	0e 94 94 1c 	call	0x3928	; 0x3928 <vTaskStartScheduler>
    5ea4:	80 e0       	ldi	r24, 0x00	; 0
    5ea6:	90 e0       	ldi	r25, 0x00	; 0

}
    5ea8:	cf 91       	pop	r28
    5eaa:	df 91       	pop	r29
    5eac:	0f 91       	pop	r16
    5eae:	ff 90       	pop	r15
    5eb0:	ef 90       	pop	r14
    5eb2:	df 90       	pop	r13
    5eb4:	cf 90       	pop	r12
    5eb6:	bf 90       	pop	r11
    5eb8:	af 90       	pop	r10
    5eba:	08 95       	ret

00005ebc <TASK1_VoidGetTheTemperatureReading>:


/*	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>		Temp TASK		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<	*/

void TASK1_VoidGetTheTemperatureReading(void *PointerToData)
{
    5ebc:	df 93       	push	r29
    5ebe:	cf 93       	push	r28
    5ec0:	00 d0       	rcall	.+0      	; 0x5ec2 <TASK1_VoidGetTheTemperatureReading+0x6>
    5ec2:	00 d0       	rcall	.+0      	; 0x5ec4 <TASK1_VoidGetTheTemperatureReading+0x8>
    5ec4:	00 d0       	rcall	.+0      	; 0x5ec6 <TASK1_VoidGetTheTemperatureReading+0xa>
    5ec6:	cd b7       	in	r28, 0x3d	; 61
    5ec8:	de b7       	in	r29, 0x3e	; 62
    5eca:	9e 83       	std	Y+6, r25	; 0x06
    5ecc:	8d 83       	std	Y+5, r24	; 0x05
	static u16 Local_U16PreviousTemp=0;
	u16 Local_U16DigitialValue=0;
    5ece:	1c 82       	std	Y+4, r1	; 0x04
    5ed0:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_U16AnalogValue=0;
    5ed2:	1a 82       	std	Y+2, r1	; 0x02
    5ed4:	19 82       	std	Y+1, r1	; 0x01


	while(1)
	{

		Local_U16DigitialValue=ADC_VidGetReadingPooling(ADC0);
    5ed6:	80 e0       	ldi	r24, 0x00	; 0
    5ed8:	0e 94 53 24 	call	0x48a6	; 0x48a6 <ADC_VidGetReadingPooling>
    5edc:	9c 83       	std	Y+4, r25	; 0x04
    5ede:	8b 83       	std	Y+3, r24	; 0x03
		Local_U16AnalogValue=(Local_U16DigitialValue*5000UL)/(1024);		//  Voltage Divider
    5ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    5ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    5ee4:	cc 01       	movw	r24, r24
    5ee6:	a0 e0       	ldi	r26, 0x00	; 0
    5ee8:	b0 e0       	ldi	r27, 0x00	; 0
    5eea:	28 e8       	ldi	r18, 0x88	; 136
    5eec:	33 e1       	ldi	r19, 0x13	; 19
    5eee:	40 e0       	ldi	r20, 0x00	; 0
    5ef0:	50 e0       	ldi	r21, 0x00	; 0
    5ef2:	bc 01       	movw	r22, r24
    5ef4:	cd 01       	movw	r24, r26
    5ef6:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__mulsi3>
    5efa:	dc 01       	movw	r26, r24
    5efc:	cb 01       	movw	r24, r22
    5efe:	07 2e       	mov	r0, r23
    5f00:	7a e0       	ldi	r23, 0x0A	; 10
    5f02:	b6 95       	lsr	r27
    5f04:	a7 95       	ror	r26
    5f06:	97 95       	ror	r25
    5f08:	87 95       	ror	r24
    5f0a:	7a 95       	dec	r23
    5f0c:	d1 f7       	brne	.-12     	; 0x5f02 <TASK1_VoidGetTheTemperatureReading+0x46>
    5f0e:	70 2d       	mov	r23, r0
    5f10:	9a 83       	std	Y+2, r25	; 0x02
    5f12:	89 83       	std	Y+1, r24	; 0x01
		Local_U16AnalogValue/=10;										   //   Temp Sensor DataSheet
    5f14:	89 81       	ldd	r24, Y+1	; 0x01
    5f16:	9a 81       	ldd	r25, Y+2	; 0x02
    5f18:	2a e0       	ldi	r18, 0x0A	; 10
    5f1a:	30 e0       	ldi	r19, 0x00	; 0
    5f1c:	b9 01       	movw	r22, r18
    5f1e:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__udivmodhi4>
    5f22:	cb 01       	movw	r24, r22
    5f24:	9a 83       	std	Y+2, r25	; 0x02
    5f26:	89 83       	std	Y+1, r24	; 0x01

		if(		Local_U16AnalogValue		!=		Local_U16PreviousTemp)	  // Check if The Temp Changed
    5f28:	20 91 84 07 	lds	r18, 0x0784
    5f2c:	30 91 85 07 	lds	r19, 0x0785
    5f30:	89 81       	ldd	r24, Y+1	; 0x01
    5f32:	9a 81       	ldd	r25, Y+2	; 0x02
    5f34:	82 17       	cp	r24, r18
    5f36:	93 07       	cpc	r25, r19
    5f38:	e1 f0       	breq	.+56     	; 0x5f72 <TASK1_VoidGetTheTemperatureReading+0xb6>
		{
			Local_U16PreviousTemp=Local_U16AnalogValue;						// Update Local_U16PreviousTemp
    5f3a:	89 81       	ldd	r24, Y+1	; 0x01
    5f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    5f3e:	90 93 85 07 	sts	0x0785, r25
    5f42:	80 93 84 07 	sts	0x0784, r24

			AlarmingSystem.CurrentTemp=Local_U16AnalogValue;		//Update The Current TEMO
    5f46:	89 81       	ldd	r24, Y+1	; 0x01
    5f48:	80 93 87 07 	sts	0x0787, r24

			xEventGroupSetBits(EventGroupHandleForTheSystem,E_EVENT5);//Set The Fifith Event
    5f4c:	80 91 8e 07 	lds	r24, 0x078E
    5f50:	90 91 8f 07 	lds	r25, 0x078F
    5f54:	60 e1       	ldi	r22, 0x10	; 16
    5f56:	70 e0       	ldi	r23, 0x00	; 0
    5f58:	0e 94 56 0b 	call	0x16ac	; 0x16ac <xEventGroupSetBits>

			xSemaphoreGive(SemaphoreCheck); //Give The Semaphore inorder to Check The Conditions
    5f5c:	80 91 82 07 	lds	r24, 0x0782
    5f60:	90 91 83 07 	lds	r25, 0x0783
    5f64:	60 e0       	ldi	r22, 0x00	; 0
    5f66:	70 e0       	ldi	r23, 0x00	; 0
    5f68:	40 e0       	ldi	r20, 0x00	; 0
    5f6a:	50 e0       	ldi	r21, 0x00	; 0
    5f6c:	20 e0       	ldi	r18, 0x00	; 0
    5f6e:	0e 94 4e 13 	call	0x269c	; 0x269c <xQueueGenericSend>
		}
		vTaskDelay(150);
    5f72:	86 e9       	ldi	r24, 0x96	; 150
    5f74:	90 e0       	ldi	r25, 0x00	; 0
    5f76:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <vTaskDelay>
    5f7a:	ad cf       	rjmp	.-166    	; 0x5ed6 <TASK1_VoidGetTheTemperatureReading+0x1a>

00005f7c <TASK2_VoidAlarmingEnable>:

/*	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>		Alarming TASK		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<	*/


void TASK2_VoidAlarmingEnable(void *PointerToData)
{
    5f7c:	0f 93       	push	r16
    5f7e:	1f 93       	push	r17
    5f80:	df 93       	push	r29
    5f82:	cf 93       	push	r28
    5f84:	00 d0       	rcall	.+0      	; 0x5f86 <TASK2_VoidAlarmingEnable+0xa>
    5f86:	cd b7       	in	r28, 0x3d	; 61
    5f88:	de b7       	in	r29, 0x3e	; 62
    5f8a:	9a 83       	std	Y+2, r25	; 0x02
    5f8c:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{
		EventBit_AlarmSystem=xEventGroupWaitBits(EventGroupHandleForTheSystem,E_EVENT7,0,0,portMAX_DELAY);
    5f8e:	80 91 8e 07 	lds	r24, 0x078E
    5f92:	90 91 8f 07 	lds	r25, 0x078F
    5f96:	60 e4       	ldi	r22, 0x40	; 64
    5f98:	70 e0       	ldi	r23, 0x00	; 0
    5f9a:	40 e0       	ldi	r20, 0x00	; 0
    5f9c:	20 e0       	ldi	r18, 0x00	; 0
    5f9e:	0f ef       	ldi	r16, 0xFF	; 255
    5fa0:	1f ef       	ldi	r17, 0xFF	; 255
    5fa2:	0e 94 3b 0a 	call	0x1476	; 0x1476 <xEventGroupWaitBits>
    5fa6:	90 93 8d 07 	sts	0x078D, r25
    5faa:	80 93 8c 07 	sts	0x078C, r24

		if(		(EventBit_AlarmSystem	&	E_EVENT7 ) 		)
    5fae:	80 91 8c 07 	lds	r24, 0x078C
    5fb2:	90 91 8d 07 	lds	r25, 0x078D
    5fb6:	80 74       	andi	r24, 0x40	; 64
    5fb8:	90 70       	andi	r25, 0x00	; 0
    5fba:	00 97       	sbiw	r24, 0x00	; 0
    5fbc:	41 f3       	breq	.-48     	; 0x5f8e <TASK2_VoidAlarmingEnable+0x12>
		{
			 DIO_VidSetPinValue(0,PIN1,HIGH); //Buzzer ON
    5fbe:	80 e0       	ldi	r24, 0x00	; 0
    5fc0:	61 e0       	ldi	r22, 0x01	; 1
    5fc2:	41 e0       	ldi	r20, 0x01	; 1
    5fc4:	0e 94 e7 25 	call	0x4bce	; 0x4bce <DIO_VidSetPinValue>
			 vTaskDelay(500);
    5fc8:	84 ef       	ldi	r24, 0xF4	; 244
    5fca:	91 e0       	ldi	r25, 0x01	; 1
    5fcc:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <vTaskDelay>
			 DIO_VidSetPinValue(0,PIN1,LOW); //Buzzer OFF
    5fd0:	80 e0       	ldi	r24, 0x00	; 0
    5fd2:	61 e0       	ldi	r22, 0x01	; 1
    5fd4:	40 e0       	ldi	r20, 0x00	; 0
    5fd6:	0e 94 e7 25 	call	0x4bce	; 0x4bce <DIO_VidSetPinValue>
			 vTaskDelay(500);
    5fda:	84 ef       	ldi	r24, 0xF4	; 244
    5fdc:	91 e0       	ldi	r25, 0x01	; 1
    5fde:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <vTaskDelay>
    5fe2:	d5 cf       	rjmp	.-86     	; 0x5f8e <TASK2_VoidAlarmingEnable+0x12>

00005fe4 <TASK3_VoidCheckingAboutSystemTempertaure>:
}

/*	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>		Checking TASK		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<	*/

void TASK3_VoidCheckingAboutSystemTempertaure(void *PointerToData)
{
    5fe4:	df 93       	push	r29
    5fe6:	cf 93       	push	r28
    5fe8:	00 d0       	rcall	.+0      	; 0x5fea <TASK3_VoidCheckingAboutSystemTempertaure+0x6>
    5fea:	cd b7       	in	r28, 0x3d	; 61
    5fec:	de b7       	in	r29, 0x3e	; 62
    5fee:	9a 83       	std	Y+2, r25	; 0x02
    5ff0:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{
		if(		xSemaphoreTake(SemaphoreCheck,portMAX_DELAY)		)
    5ff2:	80 91 82 07 	lds	r24, 0x0782
    5ff6:	90 91 83 07 	lds	r25, 0x0783
    5ffa:	60 e0       	ldi	r22, 0x00	; 0
    5ffc:	70 e0       	ldi	r23, 0x00	; 0
    5ffe:	4f ef       	ldi	r20, 0xFF	; 255
    6000:	5f ef       	ldi	r21, 0xFF	; 255
    6002:	20 e0       	ldi	r18, 0x00	; 0
    6004:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <xQueueGenericReceive>
    6008:	88 23       	and	r24, r24
    600a:	99 f3       	breq	.-26     	; 0x5ff2 <TASK3_VoidCheckingAboutSystemTempertaure+0xe>
		{

			if(	(AlarmingSystem.SystemState==SYSTEM_STATE_MAIN) && (AlarmingSystem.CurrentTemp >= AlarmingSystem.Threshold	) &&(AlarmingSystem.AlarmingStatus == 'E')	)
    600c:	80 91 8a 07 	lds	r24, 0x078A
    6010:	88 23       	and	r24, r24
    6012:	f1 f4       	brne	.+60     	; 0x6050 <TASK3_VoidCheckingAboutSystemTempertaure+0x6c>
    6014:	90 91 87 07 	lds	r25, 0x0787
    6018:	80 91 88 07 	lds	r24, 0x0788
    601c:	98 17       	cp	r25, r24
    601e:	c0 f0       	brcs	.+48     	; 0x6050 <TASK3_VoidCheckingAboutSystemTempertaure+0x6c>
    6020:	80 91 89 07 	lds	r24, 0x0789
    6024:	85 34       	cpi	r24, 0x45	; 69
    6026:	a1 f4       	brne	.+40     	; 0x6050 <TASK3_VoidCheckingAboutSystemTempertaure+0x6c>
			{
				AlarmingSystem.SystemState=SYSTEM_STATE_ALARM;
    6028:	81 e0       	ldi	r24, 0x01	; 1
    602a:	80 93 8a 07 	sts	0x078A, r24
				xEventGroupSetBits(EventGroupHandleForTheSystem,E_EVENT3);//Set The Third  Event
    602e:	80 91 8e 07 	lds	r24, 0x078E
    6032:	90 91 8f 07 	lds	r25, 0x078F
    6036:	64 e0       	ldi	r22, 0x04	; 4
    6038:	70 e0       	ldi	r23, 0x00	; 0
    603a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <xEventGroupSetBits>
				xEventGroupSetBits(EventGroupHandleForTheSystem,E_EVENT7);//Set The Seventh Event
    603e:	80 91 8e 07 	lds	r24, 0x078E
    6042:	90 91 8f 07 	lds	r25, 0x078F
    6046:	60 e4       	ldi	r22, 0x40	; 64
    6048:	70 e0       	ldi	r23, 0x00	; 0
    604a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <xEventGroupSetBits>
    604e:	d1 cf       	rjmp	.-94     	; 0x5ff2 <TASK3_VoidCheckingAboutSystemTempertaure+0xe>
			}
			else if(	(AlarmingSystem.SystemState==SYSTEM_STATE_ALARM) &&	 (AlarmingSystem.CurrentTemp < AlarmingSystem.Threshold	)	)
    6050:	80 91 8a 07 	lds	r24, 0x078A
    6054:	81 30       	cpi	r24, 0x01	; 1
    6056:	69 f6       	brne	.-102    	; 0x5ff2 <TASK3_VoidCheckingAboutSystemTempertaure+0xe>
    6058:	90 91 87 07 	lds	r25, 0x0787
    605c:	80 91 88 07 	lds	r24, 0x0788
    6060:	98 17       	cp	r25, r24
    6062:	38 f6       	brcc	.-114    	; 0x5ff2 <TASK3_VoidCheckingAboutSystemTempertaure+0xe>
			{
				AlarmingSystem.SystemState=SYSTEM_STATE_MAIN;
    6064:	10 92 8a 07 	sts	0x078A, r1
				xEventGroupSetBits(EventGroupHandleForTheSystem,E_EVENT1);//Set The First  Event
    6068:	80 91 8e 07 	lds	r24, 0x078E
    606c:	90 91 8f 07 	lds	r25, 0x078F
    6070:	61 e0       	ldi	r22, 0x01	; 1
    6072:	70 e0       	ldi	r23, 0x00	; 0
    6074:	0e 94 56 0b 	call	0x16ac	; 0x16ac <xEventGroupSetBits>
				xEventGroupClearBits(EventGroupHandleForTheSystem,E_EVENT7);//Clear The Seventh Event
    6078:	80 91 8e 07 	lds	r24, 0x078E
    607c:	90 91 8f 07 	lds	r25, 0x078F
    6080:	60 e4       	ldi	r22, 0x40	; 64
    6082:	70 e0       	ldi	r23, 0x00	; 0
    6084:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <xEventGroupClearBits>
    6088:	b4 cf       	rjmp	.-152    	; 0x5ff2 <TASK3_VoidCheckingAboutSystemTempertaure+0xe>

0000608a <TASK4_VoidResponsibleAboutTheTerminal>:
/*	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>		Terminal TASK		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<	*/



void TASK4_VoidResponsibleAboutTheTerminal(void *PointerToData)
{
    608a:	df 93       	push	r29
    608c:	cf 93       	push	r28
    608e:	00 d0       	rcall	.+0      	; 0x6090 <TASK4_VoidResponsibleAboutTheTerminal+0x6>
    6090:	00 d0       	rcall	.+0      	; 0x6092 <TASK4_VoidResponsibleAboutTheTerminal+0x8>
    6092:	00 d0       	rcall	.+0      	; 0x6094 <TASK4_VoidResponsibleAboutTheTerminal+0xa>
    6094:	cd b7       	in	r28, 0x3d	; 61
    6096:	de b7       	in	r29, 0x3e	; 62
    6098:	9c 83       	std	Y+4, r25	; 0x04
    609a:	8b 83       	std	Y+3, r24	; 0x03

	u8 Local_U8ValidateFlag=0;
    609c:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_U8ReciveingData=0;
    609e:	1a 82       	std	Y+2, r1	; 0x02

	while(1)
	{
		Local_U8ValidateFlag=UART_VidReceive(&Local_U8ReciveingData);
    60a0:	ce 01       	movw	r24, r28
    60a2:	02 96       	adiw	r24, 0x02	; 2
    60a4:	0e 94 3e 2e 	call	0x5c7c	; 0x5c7c <UART_VidReceive>
    60a8:	89 83       	std	Y+1, r24	; 0x01

		if(		Local_U8ValidateFlag		==		1		)
    60aa:	89 81       	ldd	r24, Y+1	; 0x01
    60ac:	81 30       	cpi	r24, 0x01	; 1
    60ae:	09 f0       	breq	.+2      	; 0x60b2 <TASK4_VoidResponsibleAboutTheTerminal+0x28>
    60b0:	82 c0       	rjmp	.+260    	; 0x61b6 <TASK4_VoidResponsibleAboutTheTerminal+0x12c>
		{
			if(		AlarmingSystem.SystemState	==	SYSTEM_STATE_MAIN			)
    60b2:	80 91 8a 07 	lds	r24, 0x078A
    60b6:	88 23       	and	r24, r24
    60b8:	91 f5       	brne	.+100    	; 0x611e <TASK4_VoidResponsibleAboutTheTerminal+0x94>
			{
				switch(Local_U8ReciveingData)
    60ba:	8a 81       	ldd	r24, Y+2	; 0x02
    60bc:	28 2f       	mov	r18, r24
    60be:	30 e0       	ldi	r19, 0x00	; 0
    60c0:	3e 83       	std	Y+6, r19	; 0x06
    60c2:	2d 83       	std	Y+5, r18	; 0x05
    60c4:	8d 81       	ldd	r24, Y+5	; 0x05
    60c6:	9e 81       	ldd	r25, Y+6	; 0x06
    60c8:	83 34       	cpi	r24, 0x43	; 67
    60ca:	91 05       	cpc	r25, r1
    60cc:	31 f0       	breq	.+12     	; 0x60da <TASK4_VoidResponsibleAboutTheTerminal+0x50>
    60ce:	2d 81       	ldd	r18, Y+5	; 0x05
    60d0:	3e 81       	ldd	r19, Y+6	; 0x06
    60d2:	24 35       	cpi	r18, 0x54	; 84
    60d4:	31 05       	cpc	r19, r1
    60d6:	69 f0       	breq	.+26     	; 0x60f2 <TASK4_VoidResponsibleAboutTheTerminal+0x68>
    60d8:	6e c0       	rjmp	.+220    	; 0x61b6 <TASK4_VoidResponsibleAboutTheTerminal+0x12c>
				{
					case 'C':
						AlarmingSystem.SystemState	=SYSTEM_STATE_CONFIG; // Change TO Configuration Mode
    60da:	82 e0       	ldi	r24, 0x02	; 2
    60dc:	80 93 8a 07 	sts	0x078A, r24
						xEventGroupSetBits(EventGroupHandleForTheSystem,E_EVENT2);//Set The Secand  Event
    60e0:	80 91 8e 07 	lds	r24, 0x078E
    60e4:	90 91 8f 07 	lds	r25, 0x078F
    60e8:	62 e0       	ldi	r22, 0x02	; 2
    60ea:	70 e0       	ldi	r23, 0x00	; 0
    60ec:	0e 94 56 0b 	call	0x16ac	; 0x16ac <xEventGroupSetBits>
    60f0:	62 c0       	rjmp	.+196    	; 0x61b6 <TASK4_VoidResponsibleAboutTheTerminal+0x12c>
						break;
					case 'T':
						ALARMINSTATUS_VoidToggleing();//Toggle The Alarmming Status
    60f2:	0e 94 45 31 	call	0x628a	; 0x628a <ALARMINSTATUS_VoidToggleing>
						xEventGroupSetBits(EventGroupHandleForTheSystem,E_EVENT4);//Set The Fourth  Event
    60f6:	80 91 8e 07 	lds	r24, 0x078E
    60fa:	90 91 8f 07 	lds	r25, 0x078F
    60fe:	68 e0       	ldi	r22, 0x08	; 8
    6100:	70 e0       	ldi	r23, 0x00	; 0
    6102:	0e 94 56 0b 	call	0x16ac	; 0x16ac <xEventGroupSetBits>
						xSemaphoreGive(SemaphoreCheck);// Give The Semephore
    6106:	80 91 82 07 	lds	r24, 0x0782
    610a:	90 91 83 07 	lds	r25, 0x0783
    610e:	60 e0       	ldi	r22, 0x00	; 0
    6110:	70 e0       	ldi	r23, 0x00	; 0
    6112:	40 e0       	ldi	r20, 0x00	; 0
    6114:	50 e0       	ldi	r21, 0x00	; 0
    6116:	20 e0       	ldi	r18, 0x00	; 0
    6118:	0e 94 4e 13 	call	0x269c	; 0x269c <xQueueGenericSend>
    611c:	4c c0       	rjmp	.+152    	; 0x61b6 <TASK4_VoidResponsibleAboutTheTerminal+0x12c>
						break;
				}
			}
			else if(		AlarmingSystem.SystemState	==	SYSTEM_STATE_CONFIG			)
    611e:	80 91 8a 07 	lds	r24, 0x078A
    6122:	82 30       	cpi	r24, 0x02	; 2
    6124:	09 f0       	breq	.+2      	; 0x6128 <TASK4_VoidResponsibleAboutTheTerminal+0x9e>
    6126:	47 c0       	rjmp	.+142    	; 0x61b6 <TASK4_VoidResponsibleAboutTheTerminal+0x12c>
			{
				if(		Local_U8ReciveingData		==		'C'		)
    6128:	8a 81       	ldd	r24, Y+2	; 0x02
    612a:	83 34       	cpi	r24, 0x43	; 67
    612c:	19 f4       	brne	.+6      	; 0x6134 <TASK4_VoidResponsibleAboutTheTerminal+0xaa>
				{

					TERMINAL_VoidSetMoreThanOneEvent();
    612e:	0e 94 78 31 	call	0x62f0	; 0x62f0 <TERMINAL_VoidSetMoreThanOneEvent>
    6132:	41 c0       	rjmp	.+130    	; 0x61b6 <TASK4_VoidResponsibleAboutTheTerminal+0x12c>
				}
				else if(	Local_U8ReciveingData		==		'O'			)
    6134:	8a 81       	ldd	r24, Y+2	; 0x02
    6136:	8f 34       	cpi	r24, 0x4F	; 79
    6138:	a1 f4       	brne	.+40     	; 0x6162 <TASK4_VoidResponsibleAboutTheTerminal+0xd8>
				{
					AlarmingSystem.Threshold=ThersholdValue;
    613a:	80 91 8b 07 	lds	r24, 0x078B
    613e:	80 93 88 07 	sts	0x0788, r24
					ThersholdValue=0;
    6142:	10 92 8b 07 	sts	0x078B, r1
					TERMINAL_VoidSetMoreThanOneEvent();
    6146:	0e 94 78 31 	call	0x62f0	; 0x62f0 <TERMINAL_VoidSetMoreThanOneEvent>
					xSemaphoreGive(SemaphoreCheck);
    614a:	80 91 82 07 	lds	r24, 0x0782
    614e:	90 91 83 07 	lds	r25, 0x0783
    6152:	60 e0       	ldi	r22, 0x00	; 0
    6154:	70 e0       	ldi	r23, 0x00	; 0
    6156:	40 e0       	ldi	r20, 0x00	; 0
    6158:	50 e0       	ldi	r21, 0x00	; 0
    615a:	20 e0       	ldi	r18, 0x00	; 0
    615c:	0e 94 4e 13 	call	0x269c	; 0x269c <xQueueGenericSend>
    6160:	2a c0       	rjmp	.+84     	; 0x61b6 <TASK4_VoidResponsibleAboutTheTerminal+0x12c>
				}
				else
				{
					ThersholdValue=(ThersholdValue*10)+(Local_U8ReciveingData-48);// New Value OF the Thershold
    6162:	80 91 8b 07 	lds	r24, 0x078B
    6166:	88 2f       	mov	r24, r24
    6168:	90 e0       	ldi	r25, 0x00	; 0
    616a:	9c 01       	movw	r18, r24
    616c:	22 0f       	add	r18, r18
    616e:	33 1f       	adc	r19, r19
    6170:	c9 01       	movw	r24, r18
    6172:	88 0f       	add	r24, r24
    6174:	99 1f       	adc	r25, r25
    6176:	88 0f       	add	r24, r24
    6178:	99 1f       	adc	r25, r25
    617a:	82 0f       	add	r24, r18
    617c:	93 1f       	adc	r25, r19
    617e:	98 2f       	mov	r25, r24
    6180:	8a 81       	ldd	r24, Y+2	; 0x02
    6182:	89 0f       	add	r24, r25
    6184:	80 53       	subi	r24, 0x30	; 48
    6186:	80 93 8b 07 	sts	0x078B, r24

					LCD_VidSetDdram(2,1);
    618a:	82 e0       	ldi	r24, 0x02	; 2
    618c:	61 e0       	ldi	r22, 0x01	; 1
    618e:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <LCD_VidSetDdram>
					LCD_VidWriteNumber(ThersholdValue);
    6192:	80 91 8b 07 	lds	r24, 0x078B
    6196:	88 2f       	mov	r24, r24
    6198:	90 e0       	ldi	r25, 0x00	; 0
    619a:	a0 e0       	ldi	r26, 0x00	; 0
    619c:	b0 e0       	ldi	r27, 0x00	; 0
    619e:	bc 01       	movw	r22, r24
    61a0:	cd 01       	movw	r24, r26
    61a2:	0e 94 93 2c 	call	0x5926	; 0x5926 <LCD_VidWriteNumber>

					xEventGroupSetBits(EventGroupHandleForTheSystem,E_EVENT6);//Set The Six  Event
    61a6:	80 91 8e 07 	lds	r24, 0x078E
    61aa:	90 91 8f 07 	lds	r25, 0x078F
    61ae:	60 e2       	ldi	r22, 0x20	; 32
    61b0:	70 e0       	ldi	r23, 0x00	; 0
    61b2:	0e 94 56 0b 	call	0x16ac	; 0x16ac <xEventGroupSetBits>
				}
			}
		}

		vTaskDelay(50);
    61b6:	82 e3       	ldi	r24, 0x32	; 50
    61b8:	90 e0       	ldi	r25, 0x00	; 0
    61ba:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <vTaskDelay>
    61be:	70 cf       	rjmp	.-288    	; 0x60a0 <TASK4_VoidResponsibleAboutTheTerminal+0x16>

000061c0 <TASK5_VoidDisplayAndExcuteAllEvents>:
/*	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>		Display_TASK		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<	*/



void TASK5_VoidDisplayAndExcuteAllEvents(void *PointerToData)
{
    61c0:	0f 93       	push	r16
    61c2:	1f 93       	push	r17
    61c4:	df 93       	push	r29
    61c6:	cf 93       	push	r28
    61c8:	00 d0       	rcall	.+0      	; 0x61ca <TASK5_VoidDisplayAndExcuteAllEvents+0xa>
    61ca:	cd b7       	in	r28, 0x3d	; 61
    61cc:	de b7       	in	r29, 0x3e	; 62
    61ce:	9a 83       	std	Y+2, r25	; 0x02
    61d0:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{
		 EventBit_AlarmSystem=xEventGroupWaitBits(EventGroupHandleForTheSystem,
    61d2:	80 91 8e 07 	lds	r24, 0x078E
    61d6:	90 91 8f 07 	lds	r25, 0x078F
    61da:	6f e3       	ldi	r22, 0x3F	; 63
    61dc:	70 e0       	ldi	r23, 0x00	; 0
    61de:	41 e0       	ldi	r20, 0x01	; 1
    61e0:	20 e0       	ldi	r18, 0x00	; 0
    61e2:	0f ef       	ldi	r16, 0xFF	; 255
    61e4:	1f ef       	ldi	r17, 0xFF	; 255
    61e6:	0e 94 3b 0a 	call	0x1476	; 0x1476 <xEventGroupWaitBits>
    61ea:	90 93 8d 07 	sts	0x078D, r25
    61ee:	80 93 8c 07 	sts	0x078C, r24
		(E_EVENT1|E_EVENT2|E_EVENT3|E_EVENT4|E_EVENT5|E_EVENT6),
		1,0,portMAX_DELAY);


		 if(		(EventBit_AlarmSystem	& 		E_EVENT1) 	) // Display The Main Screen
    61f2:	80 91 8c 07 	lds	r24, 0x078C
    61f6:	90 91 8d 07 	lds	r25, 0x078D
    61fa:	81 70       	andi	r24, 0x01	; 1
    61fc:	90 70       	andi	r25, 0x00	; 0
    61fe:	88 23       	and	r24, r24
    6200:	19 f0       	breq	.+6      	; 0x6208 <TASK5_VoidDisplayAndExcuteAllEvents+0x48>
		 {
				 LCD_VoidDisplayTheMainScreen();
    6202:	0e 94 5f 28 	call	0x50be	; 0x50be <LCD_VoidDisplayTheMainScreen>
    6206:	e5 cf       	rjmp	.-54     	; 0x61d2 <TASK5_VoidDisplayAndExcuteAllEvents+0x12>
		 }
		 else if(		EventBit_AlarmSystem	& 		E_EVENT2		) // Display The Config Screen
    6208:	80 91 8c 07 	lds	r24, 0x078C
    620c:	90 91 8d 07 	lds	r25, 0x078D
    6210:	82 70       	andi	r24, 0x02	; 2
    6212:	90 70       	andi	r25, 0x00	; 0
    6214:	00 97       	sbiw	r24, 0x00	; 0
    6216:	19 f0       	breq	.+6      	; 0x621e <TASK5_VoidDisplayAndExcuteAllEvents+0x5e>
		 {
			 LCD_VoidDisplayTheConfigurationScreen();
    6218:	0e 94 9b 28 	call	0x5136	; 0x5136 <LCD_VoidDisplayTheConfigurationScreen>
    621c:	da cf       	rjmp	.-76     	; 0x61d2 <TASK5_VoidDisplayAndExcuteAllEvents+0x12>
		 }
		 else if(		EventBit_AlarmSystem	& 		E_EVENT3		) // Display The Alarm Screen
    621e:	80 91 8c 07 	lds	r24, 0x078C
    6222:	90 91 8d 07 	lds	r25, 0x078D
    6226:	84 70       	andi	r24, 0x04	; 4
    6228:	90 70       	andi	r25, 0x00	; 0
    622a:	00 97       	sbiw	r24, 0x00	; 0
    622c:	19 f0       	breq	.+6      	; 0x6234 <TASK5_VoidDisplayAndExcuteAllEvents+0x74>
		 {
			 LCD_VoidDisplayTheAlarmmingScreen();
    622e:	0e 94 b1 28 	call	0x5162	; 0x5162 <LCD_VoidDisplayTheAlarmmingScreen>
    6232:	cf cf       	rjmp	.-98     	; 0x61d2 <TASK5_VoidDisplayAndExcuteAllEvents+0x12>
		 }
		 else if(		EventBit_AlarmSystem	& 		E_EVENT4 		) // Update The Alarm Status
    6234:	80 91 8c 07 	lds	r24, 0x078C
    6238:	90 91 8d 07 	lds	r25, 0x078D
    623c:	88 70       	andi	r24, 0x08	; 8
    623e:	90 70       	andi	r25, 0x00	; 0
    6240:	00 97       	sbiw	r24, 0x00	; 0
    6242:	19 f0       	breq	.+6      	; 0x624a <TASK5_VoidDisplayAndExcuteAllEvents+0x8a>
		 {
			 LCD_VoidDisplayAlarmStatuscreen();
    6244:	0e 94 cb 28 	call	0x5196	; 0x5196 <LCD_VoidDisplayAlarmStatuscreen>
    6248:	c4 cf       	rjmp	.-120    	; 0x61d2 <TASK5_VoidDisplayAndExcuteAllEvents+0x12>
		 }
		 else if(		(EventBit_AlarmSystem	& 		E_EVENT5)	&& (	AlarmingSystem.SystemState	==	SYSTEM_STATE_MAIN	)	) // Update The Current Temp
    624a:	80 91 8c 07 	lds	r24, 0x078C
    624e:	90 91 8d 07 	lds	r25, 0x078D
    6252:	80 71       	andi	r24, 0x10	; 16
    6254:	90 70       	andi	r25, 0x00	; 0
    6256:	00 97       	sbiw	r24, 0x00	; 0
    6258:	39 f0       	breq	.+14     	; 0x6268 <TASK5_VoidDisplayAndExcuteAllEvents+0xa8>
    625a:	80 91 8a 07 	lds	r24, 0x078A
    625e:	88 23       	and	r24, r24
    6260:	19 f4       	brne	.+6      	; 0x6268 <TASK5_VoidDisplayAndExcuteAllEvents+0xa8>
		 {
			 LCD_VoidDisplayAndUpdateTheCurrentTemp();
    6262:	0e 94 da 28 	call	0x51b4	; 0x51b4 <LCD_VoidDisplayAndUpdateTheCurrentTemp>
    6266:	b5 cf       	rjmp	.-150    	; 0x61d2 <TASK5_VoidDisplayAndExcuteAllEvents+0x12>
		 }
		 else if(  (EventBit_AlarmSystem		& 		E_EVENT6) 	&& (	AlarmingSystem.SystemState	==	SYSTEM_STATE_MAIN	)	) // Update TheThersholdTemp
    6268:	80 91 8c 07 	lds	r24, 0x078C
    626c:	90 91 8d 07 	lds	r25, 0x078D
    6270:	80 72       	andi	r24, 0x20	; 32
    6272:	90 70       	andi	r25, 0x00	; 0
    6274:	00 97       	sbiw	r24, 0x00	; 0
    6276:	09 f4       	brne	.+2      	; 0x627a <TASK5_VoidDisplayAndExcuteAllEvents+0xba>
    6278:	ac cf       	rjmp	.-168    	; 0x61d2 <TASK5_VoidDisplayAndExcuteAllEvents+0x12>
    627a:	80 91 8a 07 	lds	r24, 0x078A
    627e:	88 23       	and	r24, r24
    6280:	09 f0       	breq	.+2      	; 0x6284 <TASK5_VoidDisplayAndExcuteAllEvents+0xc4>
    6282:	a7 cf       	rjmp	.-178    	; 0x61d2 <TASK5_VoidDisplayAndExcuteAllEvents+0x12>
		 {
			 LCD_VoidDisplayAndUpdateThershold();
    6284:	0e 94 ef 28 	call	0x51de	; 0x51de <LCD_VoidDisplayAndUpdateThershold>
    6288:	a4 cf       	rjmp	.-184    	; 0x61d2 <TASK5_VoidDisplayAndExcuteAllEvents+0x12>

0000628a <ALARMINSTATUS_VoidToggleing>:
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>... 		Used Functions 			<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<



void ALARMINSTATUS_VoidToggleing(void)
{
    628a:	df 93       	push	r29
    628c:	cf 93       	push	r28
    628e:	00 d0       	rcall	.+0      	; 0x6290 <ALARMINSTATUS_VoidToggleing+0x6>
    6290:	00 d0       	rcall	.+0      	; 0x6292 <ALARMINSTATUS_VoidToggleing+0x8>
    6292:	cd b7       	in	r28, 0x3d	; 61
    6294:	de b7       	in	r29, 0x3e	; 62
	static u8 Index=0;
	u8 LocalCharacterArray[]={'E','D'};
    6296:	85 e4       	ldi	r24, 0x45	; 69
    6298:	89 83       	std	Y+1, r24	; 0x01
    629a:	84 e4       	ldi	r24, 0x44	; 68
    629c:	8a 83       	std	Y+2, r24	; 0x02

	switch(Index)
    629e:	80 91 86 07 	lds	r24, 0x0786
    62a2:	28 2f       	mov	r18, r24
    62a4:	30 e0       	ldi	r19, 0x00	; 0
    62a6:	3c 83       	std	Y+4, r19	; 0x04
    62a8:	2b 83       	std	Y+3, r18	; 0x03
    62aa:	8b 81       	ldd	r24, Y+3	; 0x03
    62ac:	9c 81       	ldd	r25, Y+4	; 0x04
    62ae:	00 97       	sbiw	r24, 0x00	; 0
    62b0:	31 f0       	breq	.+12     	; 0x62be <ALARMINSTATUS_VoidToggleing+0x34>
    62b2:	2b 81       	ldd	r18, Y+3	; 0x03
    62b4:	3c 81       	ldd	r19, Y+4	; 0x04
    62b6:	21 30       	cpi	r18, 0x01	; 1
    62b8:	31 05       	cpc	r19, r1
    62ba:	29 f0       	breq	.+10     	; 0x62c6 <ALARMINSTATUS_VoidToggleing+0x3c>
    62bc:	06 c0       	rjmp	.+12     	; 0x62ca <ALARMINSTATUS_VoidToggleing+0x40>
	{
		case 0: Index=1; break;
    62be:	81 e0       	ldi	r24, 0x01	; 1
    62c0:	80 93 86 07 	sts	0x0786, r24
    62c4:	02 c0       	rjmp	.+4      	; 0x62ca <ALARMINSTATUS_VoidToggleing+0x40>
		case 1: Index=0; break;
    62c6:	10 92 86 07 	sts	0x0786, r1
	}
	AlarmingSystem.AlarmingStatus=LocalCharacterArray[Index];
    62ca:	80 91 86 07 	lds	r24, 0x0786
    62ce:	28 2f       	mov	r18, r24
    62d0:	30 e0       	ldi	r19, 0x00	; 0
    62d2:	ce 01       	movw	r24, r28
    62d4:	01 96       	adiw	r24, 0x01	; 1
    62d6:	fc 01       	movw	r30, r24
    62d8:	e2 0f       	add	r30, r18
    62da:	f3 1f       	adc	r31, r19
    62dc:	80 81       	ld	r24, Z
    62de:	80 93 89 07 	sts	0x0789, r24
}
    62e2:	0f 90       	pop	r0
    62e4:	0f 90       	pop	r0
    62e6:	0f 90       	pop	r0
    62e8:	0f 90       	pop	r0
    62ea:	cf 91       	pop	r28
    62ec:	df 91       	pop	r29
    62ee:	08 95       	ret

000062f0 <TERMINAL_VoidSetMoreThanOneEvent>:


void TERMINAL_VoidSetMoreThanOneEvent(void)
{
    62f0:	df 93       	push	r29
    62f2:	cf 93       	push	r28
    62f4:	cd b7       	in	r28, 0x3d	; 61
    62f6:	de b7       	in	r29, 0x3e	; 62

	AlarmingSystem.SystemState =	SYSTEM_STATE_MAIN ;// Change TO Main Mode
    62f8:	10 92 8a 07 	sts	0x078A, r1
	xEventGroupSetBits(EventGroupHandleForTheSystem,E_EVENT1);//Set The First  Event
    62fc:	80 91 8e 07 	lds	r24, 0x078E
    6300:	90 91 8f 07 	lds	r25, 0x078F
    6304:	61 e0       	ldi	r22, 0x01	; 1
    6306:	70 e0       	ldi	r23, 0x00	; 0
    6308:	0e 94 56 0b 	call	0x16ac	; 0x16ac <xEventGroupSetBits>
	xEventGroupSetBits(EventGroupHandleForTheSystem,E_EVENT4);//Set The Fourth  Event
    630c:	80 91 8e 07 	lds	r24, 0x078E
    6310:	90 91 8f 07 	lds	r25, 0x078F
    6314:	68 e0       	ldi	r22, 0x08	; 8
    6316:	70 e0       	ldi	r23, 0x00	; 0
    6318:	0e 94 56 0b 	call	0x16ac	; 0x16ac <xEventGroupSetBits>
	xEventGroupSetBits(EventGroupHandleForTheSystem,E_EVENT5);//Set The FIFTH  Event
    631c:	80 91 8e 07 	lds	r24, 0x078E
    6320:	90 91 8f 07 	lds	r25, 0x078F
    6324:	60 e1       	ldi	r22, 0x10	; 16
    6326:	70 e0       	ldi	r23, 0x00	; 0
    6328:	0e 94 56 0b 	call	0x16ac	; 0x16ac <xEventGroupSetBits>
	xEventGroupSetBits(EventGroupHandleForTheSystem,E_EVENT6);//Set The Six  Event
    632c:	80 91 8e 07 	lds	r24, 0x078E
    6330:	90 91 8f 07 	lds	r25, 0x078F
    6334:	60 e2       	ldi	r22, 0x20	; 32
    6336:	70 e0       	ldi	r23, 0x00	; 0
    6338:	0e 94 56 0b 	call	0x16ac	; 0x16ac <xEventGroupSetBits>

}
    633c:	cf 91       	pop	r28
    633e:	df 91       	pop	r29
    6340:	08 95       	ret

00006342 <RTOS2_VoidInitializationsTheHardWareComponets>:




void RTOS2_VoidInitializationsTheHardWareComponets(void)
{
    6342:	df 93       	push	r29
    6344:	cf 93       	push	r28
    6346:	cd b7       	in	r28, 0x3d	; 61
    6348:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(0,PIN0,INPUT);//PORTA     ADC Channel
    634a:	80 e0       	ldi	r24, 0x00	; 0
    634c:	60 e0       	ldi	r22, 0x00	; 0
    634e:	40 e0       	ldi	r20, 0x00	; 0
    6350:	0e 94 e7 24 	call	0x49ce	; 0x49ce <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(0,PIN1,OUTPUT);//PORTA     Buzzer BIN
    6354:	80 e0       	ldi	r24, 0x00	; 0
    6356:	61 e0       	ldi	r22, 0x01	; 1
    6358:	41 e0       	ldi	r20, 0x01	; 1
    635a:	0e 94 e7 24 	call	0x49ce	; 0x49ce <DIO_VidSetPinDirection>

	DIO_VidSetPinDirection(3,PIN0,INPUT);//RX		//PORTD
    635e:	83 e0       	ldi	r24, 0x03	; 3
    6360:	60 e0       	ldi	r22, 0x00	; 0
    6362:	40 e0       	ldi	r20, 0x00	; 0
    6364:	0e 94 e7 24 	call	0x49ce	; 0x49ce <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(3,PIN1,OUTPUT);//TX		//PORTD
    6368:	83 e0       	ldi	r24, 0x03	; 3
    636a:	61 e0       	ldi	r22, 0x01	; 1
    636c:	41 e0       	ldi	r20, 0x01	; 1
    636e:	0e 94 e7 24 	call	0x49ce	; 0x49ce <DIO_VidSetPinDirection>


	UART_VidInit();//UART INIT
    6372:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <UART_VidInit>
	LCD_VidInit();//LCD Initializations
    6376:	0e 94 05 2a 	call	0x540a	; 0x540a <LCD_VidInit>
	ADC_VidInit();//ADC Initializations
    637a:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <ADC_VidInit>

	AlarmingSystem.SystemState=SYSTEM_STATE_MAIN;
    637e:	10 92 8a 07 	sts	0x078A, r1
	AlarmingSystem.Threshold=40; // Max Temp
    6382:	88 e2       	ldi	r24, 0x28	; 40
    6384:	80 93 88 07 	sts	0x0788, r24
	AlarmingSystem.AlarmingStatus='E'; // State is Enable
    6388:	85 e4       	ldi	r24, 0x45	; 69
    638a:	80 93 89 07 	sts	0x0789, r24
	AlarmingSystem.CurrentTemp=20;
    638e:	84 e1       	ldi	r24, 0x14	; 20
    6390:	80 93 87 07 	sts	0x0787, r24

	LCD_VidWriteCommand(CLR);
    6394:	81 e0       	ldi	r24, 0x01	; 1
    6396:	0e 94 35 2c 	call	0x586a	; 0x586a <LCD_VidWriteCommand>
	LCD_VoidDisplayTheMainScreen();
    639a:	0e 94 5f 28 	call	0x50be	; 0x50be <LCD_VoidDisplayTheMainScreen>

}
    639e:	cf 91       	pop	r28
    63a0:	df 91       	pop	r29
    63a2:	08 95       	ret

000063a4 <__mulsi3>:
    63a4:	62 9f       	mul	r22, r18
    63a6:	d0 01       	movw	r26, r0
    63a8:	73 9f       	mul	r23, r19
    63aa:	f0 01       	movw	r30, r0
    63ac:	82 9f       	mul	r24, r18
    63ae:	e0 0d       	add	r30, r0
    63b0:	f1 1d       	adc	r31, r1
    63b2:	64 9f       	mul	r22, r20
    63b4:	e0 0d       	add	r30, r0
    63b6:	f1 1d       	adc	r31, r1
    63b8:	92 9f       	mul	r25, r18
    63ba:	f0 0d       	add	r31, r0
    63bc:	83 9f       	mul	r24, r19
    63be:	f0 0d       	add	r31, r0
    63c0:	74 9f       	mul	r23, r20
    63c2:	f0 0d       	add	r31, r0
    63c4:	65 9f       	mul	r22, r21
    63c6:	f0 0d       	add	r31, r0
    63c8:	99 27       	eor	r25, r25
    63ca:	72 9f       	mul	r23, r18
    63cc:	b0 0d       	add	r27, r0
    63ce:	e1 1d       	adc	r30, r1
    63d0:	f9 1f       	adc	r31, r25
    63d2:	63 9f       	mul	r22, r19
    63d4:	b0 0d       	add	r27, r0
    63d6:	e1 1d       	adc	r30, r1
    63d8:	f9 1f       	adc	r31, r25
    63da:	bd 01       	movw	r22, r26
    63dc:	cf 01       	movw	r24, r30
    63de:	11 24       	eor	r1, r1
    63e0:	08 95       	ret

000063e2 <__udivmodhi4>:
    63e2:	aa 1b       	sub	r26, r26
    63e4:	bb 1b       	sub	r27, r27
    63e6:	51 e1       	ldi	r21, 0x11	; 17
    63e8:	07 c0       	rjmp	.+14     	; 0x63f8 <__udivmodhi4_ep>

000063ea <__udivmodhi4_loop>:
    63ea:	aa 1f       	adc	r26, r26
    63ec:	bb 1f       	adc	r27, r27
    63ee:	a6 17       	cp	r26, r22
    63f0:	b7 07       	cpc	r27, r23
    63f2:	10 f0       	brcs	.+4      	; 0x63f8 <__udivmodhi4_ep>
    63f4:	a6 1b       	sub	r26, r22
    63f6:	b7 0b       	sbc	r27, r23

000063f8 <__udivmodhi4_ep>:
    63f8:	88 1f       	adc	r24, r24
    63fa:	99 1f       	adc	r25, r25
    63fc:	5a 95       	dec	r21
    63fe:	a9 f7       	brne	.-22     	; 0x63ea <__udivmodhi4_loop>
    6400:	80 95       	com	r24
    6402:	90 95       	com	r25
    6404:	bc 01       	movw	r22, r24
    6406:	cd 01       	movw	r24, r26
    6408:	08 95       	ret

0000640a <__divmodsi4>:
    640a:	97 fb       	bst	r25, 7
    640c:	09 2e       	mov	r0, r25
    640e:	05 26       	eor	r0, r21
    6410:	0e d0       	rcall	.+28     	; 0x642e <__divmodsi4_neg1>
    6412:	57 fd       	sbrc	r21, 7
    6414:	04 d0       	rcall	.+8      	; 0x641e <__divmodsi4_neg2>
    6416:	14 d0       	rcall	.+40     	; 0x6440 <__udivmodsi4>
    6418:	0a d0       	rcall	.+20     	; 0x642e <__divmodsi4_neg1>
    641a:	00 1c       	adc	r0, r0
    641c:	38 f4       	brcc	.+14     	; 0x642c <__divmodsi4_exit>

0000641e <__divmodsi4_neg2>:
    641e:	50 95       	com	r21
    6420:	40 95       	com	r20
    6422:	30 95       	com	r19
    6424:	21 95       	neg	r18
    6426:	3f 4f       	sbci	r19, 0xFF	; 255
    6428:	4f 4f       	sbci	r20, 0xFF	; 255
    642a:	5f 4f       	sbci	r21, 0xFF	; 255

0000642c <__divmodsi4_exit>:
    642c:	08 95       	ret

0000642e <__divmodsi4_neg1>:
    642e:	f6 f7       	brtc	.-4      	; 0x642c <__divmodsi4_exit>
    6430:	90 95       	com	r25
    6432:	80 95       	com	r24
    6434:	70 95       	com	r23
    6436:	61 95       	neg	r22
    6438:	7f 4f       	sbci	r23, 0xFF	; 255
    643a:	8f 4f       	sbci	r24, 0xFF	; 255
    643c:	9f 4f       	sbci	r25, 0xFF	; 255
    643e:	08 95       	ret

00006440 <__udivmodsi4>:
    6440:	a1 e2       	ldi	r26, 0x21	; 33
    6442:	1a 2e       	mov	r1, r26
    6444:	aa 1b       	sub	r26, r26
    6446:	bb 1b       	sub	r27, r27
    6448:	fd 01       	movw	r30, r26
    644a:	0d c0       	rjmp	.+26     	; 0x6466 <__udivmodsi4_ep>

0000644c <__udivmodsi4_loop>:
    644c:	aa 1f       	adc	r26, r26
    644e:	bb 1f       	adc	r27, r27
    6450:	ee 1f       	adc	r30, r30
    6452:	ff 1f       	adc	r31, r31
    6454:	a2 17       	cp	r26, r18
    6456:	b3 07       	cpc	r27, r19
    6458:	e4 07       	cpc	r30, r20
    645a:	f5 07       	cpc	r31, r21
    645c:	20 f0       	brcs	.+8      	; 0x6466 <__udivmodsi4_ep>
    645e:	a2 1b       	sub	r26, r18
    6460:	b3 0b       	sbc	r27, r19
    6462:	e4 0b       	sbc	r30, r20
    6464:	f5 0b       	sbc	r31, r21

00006466 <__udivmodsi4_ep>:
    6466:	66 1f       	adc	r22, r22
    6468:	77 1f       	adc	r23, r23
    646a:	88 1f       	adc	r24, r24
    646c:	99 1f       	adc	r25, r25
    646e:	1a 94       	dec	r1
    6470:	69 f7       	brne	.-38     	; 0x644c <__udivmodsi4_loop>
    6472:	60 95       	com	r22
    6474:	70 95       	com	r23
    6476:	80 95       	com	r24
    6478:	90 95       	com	r25
    647a:	9b 01       	movw	r18, r22
    647c:	ac 01       	movw	r20, r24
    647e:	bd 01       	movw	r22, r26
    6480:	cf 01       	movw	r24, r30
    6482:	08 95       	ret

00006484 <__prologue_saves__>:
    6484:	2f 92       	push	r2
    6486:	3f 92       	push	r3
    6488:	4f 92       	push	r4
    648a:	5f 92       	push	r5
    648c:	6f 92       	push	r6
    648e:	7f 92       	push	r7
    6490:	8f 92       	push	r8
    6492:	9f 92       	push	r9
    6494:	af 92       	push	r10
    6496:	bf 92       	push	r11
    6498:	cf 92       	push	r12
    649a:	df 92       	push	r13
    649c:	ef 92       	push	r14
    649e:	ff 92       	push	r15
    64a0:	0f 93       	push	r16
    64a2:	1f 93       	push	r17
    64a4:	cf 93       	push	r28
    64a6:	df 93       	push	r29
    64a8:	cd b7       	in	r28, 0x3d	; 61
    64aa:	de b7       	in	r29, 0x3e	; 62
    64ac:	ca 1b       	sub	r28, r26
    64ae:	db 0b       	sbc	r29, r27
    64b0:	0f b6       	in	r0, 0x3f	; 63
    64b2:	f8 94       	cli
    64b4:	de bf       	out	0x3e, r29	; 62
    64b6:	0f be       	out	0x3f, r0	; 63
    64b8:	cd bf       	out	0x3d, r28	; 61
    64ba:	09 94       	ijmp

000064bc <__epilogue_restores__>:
    64bc:	2a 88       	ldd	r2, Y+18	; 0x12
    64be:	39 88       	ldd	r3, Y+17	; 0x11
    64c0:	48 88       	ldd	r4, Y+16	; 0x10
    64c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    64c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    64c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    64c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    64ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    64cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    64ce:	b9 84       	ldd	r11, Y+9	; 0x09
    64d0:	c8 84       	ldd	r12, Y+8	; 0x08
    64d2:	df 80       	ldd	r13, Y+7	; 0x07
    64d4:	ee 80       	ldd	r14, Y+6	; 0x06
    64d6:	fd 80       	ldd	r15, Y+5	; 0x05
    64d8:	0c 81       	ldd	r16, Y+4	; 0x04
    64da:	1b 81       	ldd	r17, Y+3	; 0x03
    64dc:	aa 81       	ldd	r26, Y+2	; 0x02
    64de:	b9 81       	ldd	r27, Y+1	; 0x01
    64e0:	ce 0f       	add	r28, r30
    64e2:	d1 1d       	adc	r29, r1
    64e4:	0f b6       	in	r0, 0x3f	; 63
    64e6:	f8 94       	cli
    64e8:	de bf       	out	0x3e, r29	; 62
    64ea:	0f be       	out	0x3f, r0	; 63
    64ec:	cd bf       	out	0x3d, r28	; 61
    64ee:	ed 01       	movw	r28, r26
    64f0:	08 95       	ret

000064f2 <memcpy>:
    64f2:	fb 01       	movw	r30, r22
    64f4:	dc 01       	movw	r26, r24
    64f6:	02 c0       	rjmp	.+4      	; 0x64fc <memcpy+0xa>
    64f8:	01 90       	ld	r0, Z+
    64fa:	0d 92       	st	X+, r0
    64fc:	41 50       	subi	r20, 0x01	; 1
    64fe:	50 40       	sbci	r21, 0x00	; 0
    6500:	d8 f7       	brcc	.-10     	; 0x64f8 <memcpy+0x6>
    6502:	08 95       	ret

00006504 <_exit>:
    6504:	f8 94       	cli

00006506 <__stop_program>:
    6506:	ff cf       	rjmp	.-2      	; 0x6506 <__stop_program>
